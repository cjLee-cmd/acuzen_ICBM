{"file_contents":{"design_guidelines.md":{"content":"# Drug Surveillance System Design Guidelines\n\n## Design Approach\n**System-Based Approach**: Following Material Design principles for this healthcare/regulatory application, emphasizing clarity, accessibility, and professional credibility. The design prioritizes data readability and workflow efficiency over visual flair.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Light Mode: 25 85% 45% (professional blue)\n- Dark Mode: 220 15% 20% (dark slate background)\n\n**Supporting Colors:**\n- Success: 140 65% 45% (for approved cases)\n- Warning: 45 90% 55% (for pending reviews)\n- Error: 0 70% 50% (for critical alerts)\n- Neutral: 210 10% 50% (for secondary text)\n\n### B. Typography\n**Font Stack:** Inter via Google Fonts CDN\n- Headers: 600 weight, sizes 24px-32px\n- Body text: 400 weight, 16px base size\n- Data labels: 500 weight, 14px\n- Code/IDs: 'JetBrains Mono', monospace\n\n### C. Layout System\n**Spacing Units:** Tailwind classes using 2, 4, 6, and 8 units\n- Component padding: p-4, p-6\n- Section margins: m-4, m-8\n- Element gaps: gap-2, gap-4\n- Grid layouts: 12-column system with responsive breakpoints\n\n### D. Component Library\n\n**Navigation:**\n- Top navigation bar with role-based menu items\n- Breadcrumb navigation for deep workflows\n- Sidebar for admin/power user functions\n\n**Data Display:**\n- Clean table designs with alternating row colors\n- Card-based case summaries with status indicators\n- Dashboard widgets with clear metrics visualization\n- Progressive disclosure for complex case details\n\n**Forms:**\n- Multi-step forms for case entry\n- Inline validation with clear error states\n- File upload areas with drag-and-drop\n- Auto-save indicators for long forms\n\n**Overlays:**\n- Modal dialogs for case details and confirmations\n- Toast notifications for system feedback\n- Loading states for AI processing operations\n\n### E. Key Functional Areas\n\n**Dashboard:**\n- Grid layout with metric cards showing case volumes, AI accuracy, pending reviews\n- Chart area for trend visualization\n- Quick action buttons for common tasks\n\n**Case Management:**\n- List view with sortable columns and status filters\n- Detailed case view with tabbed sections (Details, Timeline, Attachments, AI Analysis)\n- Bulk action capabilities for reviewers\n\n**AI Processing Interface:**\n- Confidence score displays with visual indicators\n- Side-by-side comparison views for AI suggestions vs. human review\n- Clear workflow states (Pending → Processing → Review → Approved)\n\n**Audit & Compliance:**\n- Searchable activity logs with timestamp precision\n- Export functionality for regulatory reporting\n- User access tracking with clear permission indicators\n\n## No Hero Images\nThis is a utility-focused healthcare application with no marketing elements. All imagery should be functional: charts, data visualizations, status icons, and document previews only.\n\n## Accessibility & Compliance\n- WCAG 2.1 AA compliance throughout\n- High contrast ratios for medical data readability\n- Keyboard navigation for all workflows\n- Screen reader optimization for audit logs\n- Consistent dark mode implementation across all components","size_bytes":3120},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/software_development_specification_1757666502798.md":{"content":"aiCommand\n  .command('status')\n  .description('Check AI model status and performance')\n  .action(async () => {\n    try {\n      console.log('🤖 AI Model Status Report');\n      console.log('========================\\n');\n      \n      const models = await aiModelManager.getAllModels();\n      \n      for (const model of models) {\n        console.log(`📋 Model: ${model.name}`);\n        console.log(`   Version: ${model.version}`);\n        console.log(`   Status: ${model.status}`);\n        console.log(`   Accuracy: ${(model.accuracy * 100).toFixed(2)}%`);\n        console.log(`   Last Updated: ${model.lastUpdated}`);\n        console.log(`   Performance: ${model.avgResponseTime}ms avg response time`);\n        console.log('');\n      }\n      \n    } catch (error) {\n      console.error('❌ Failed to get AI model status:', error);\n      process.exit(1);\n    }\n  });\n\naiCommand\n  .command('retrain')\n  .option('-m, --model <name>', 'Model name to retrain')\n  .option('-d, --data <path>', 'Training data path')\n  .description('Retrain AI model with new data')\n  .action(async (options) => {\n    try {\n      if (!options.model) {\n        console.error('❌ Model name is required');\n        process.exit(1);\n      }\n      \n      console.log(`🔄 Starting retraining for model: ${options.model}`);\n      \n      const retrainingJob = await aiModelManager.retrainModel(options.model, {\n        dataPath: options.data,\n        validationSplit: 0.2,\n        batchSize: 32,\n        epochs: 10\n      });\n      \n      console.log(`✅ Retraining job started: ${retrainingJob.id}`);\n      console.log(`📊 Progress can be monitored at: /admin/ai/jobs/${retrainingJob.id}`);\n      \n    } catch (error) {\n      console.error('❌ Model retraining failed:', error);\n      process.exit(1);\n    }\n  });\n\naiCommand\n  .command('deploy')\n  .option('-m, --model <name>', 'Model name to deploy')\n  .option('-v, --version <version>', 'Model version to deploy')\n  .option('--canary <percentage>', 'Canary deployment percentage', '10')\n  .description('Deploy AI model to production')\n  .action(async (options) => {\n    try {\n      if (!options.model) {\n        console.error('❌ Model name is required');\n        process.exit(1);\n      }\n      \n      console.log(`🚀 Deploying model: ${options.model}@${options.version || 'latest'}`);\n      \n      const deployment = await aiModelManager.deployModel({\n        modelName: options.model,\n        version: options.version,\n        strategy: 'canary',\n        canaryPercentage: parseInt(options.canary)\n      });\n      \n      console.log(`✅ Model deployed successfully`);\n      console.log(`🎯 Canary deployment: ${options.canary}% traffic`);\n      console.log(`📈 Monitor deployment at: /admin/ai/deployments/${deployment.id}`);\n      \n    } catch (error) {\n      console.error('❌ Model deployment failed:', error);\n      process.exit(1);\n    }\n  });\n\n// 사용자 관리 명령어\nconst userCommand = program.command('user').description('User management commands');\n\nuserCommand\n  .command('create')\n  .option('-e, --email <email>', 'User email')\n  .option('-r, --role <role>', 'User role', 'USER')\n  .option('-o, --org <organization>', 'Organization')\n  .description('Create new user')\n  .action(async (options) => {\n    try {\n      if (!options.email) {\n        console.error('❌ Email is required');\n        process.exit(1);\n      }\n      \n      // 임시 패스워드 생성\n      const tempPassword = encryptionService.generateRandomString(12);\n      const hashedPassword = await encryptionService.hashPassword(tempPassword);\n      \n      const user = await prisma.user.create({\n        data: {\n          email: options.email,\n          role: options.role.toUpperCase(),\n          organization: options.org,\n          password: hashedPassword,\n          isActive: true,\n          createdAt: new Date()\n        }\n      });\n      \n      console.log('✅ User created successfully');\n      console.log(`📧 Email: ${user.email}`);\n      console.log(`🔑 Temporary password: ${tempPassword}`);\n      console.log(`👤 Role: ${user.role}`);\n      console.log('⚠️  Please ask user to change password on first login');\n      \n    } catch (error) {\n      console.error('❌ User creation failed:', error);\n      process.exit(1);\n    }\n  });\n\nuserCommand\n  .command('list')\n  .option('-r, --role <role>', 'Filter by role')\n  .option('-a, --active', 'Show only active users')\n  .description('List users')\n  .action(async (options) => {\n    try {\n      const whereClause: any = {};\n      \n      if (options.role) {\n        whereClause.role = options.role.toUpperCase();\n      }\n      \n      if (options.active) {\n        whereClause.isActive = true;\n      }\n      \n      const users = await prisma.user.findMany({\n        where: whereClause,\n        select: {\n          id: true,\n          email: true,\n          role: true,\n          organization: true,\n          isActive: true,\n          lastLoginAt: true,\n          createdAt: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      });\n      \n      console.log(`👥 Found ${users.length} users:\\n`);\n      \n      users.forEach(user => {\n        console.log(`📧 ${user.email}`);\n        console.log(`   Role: ${user.role}`);\n        console.log(`   Organization: ${user.organization || 'N/A'}`);\n        console.log(`   Status: ${user.isActive ? '✅ Active' : '❌ Inactive'}`);\n        console.log(`   Last Login: ${user.lastLoginAt || 'Never'}`);\n        console.log(`   Created: ${user.createdAt.toLocaleDateString()}`);\n        console.log('');\n      });\n      \n    } catch (error) {\n      console.error('❌ Failed to list users:', error);\n      process.exit(1);\n    }\n  });\n\n// 시스템 모니터링 명령어\nconst monitorCommand = program.command('monitor').description('System monitoring commands');\n\nmonitorCommand\n  .command('health')\n  .description('Check system health')\n  .action(async () => {\n    try {\n      console.log('🏥 System Health Check');\n      console.log('===================\\n');\n      \n      // 데이터베이스 연결 확인\n      try {\n        await prisma.$queryRaw`SELECT 1`;\n        console.log('✅ Database: Connected');\n      } catch (dbError) {\n        console.log('❌ Database: Connection failed');\n        console.log(`   Error: ${dbError}`);\n      }\n      \n      // Redis 연결 확인\n      try {\n        const Redis = require('redis');\n        const redis = Redis.createClient({ url: process.env.REDIS_URL });\n        await redis.ping();\n        await redis.quit();\n        console.log('✅ Redis: Connected');\n      } catch (redisError) {\n        console.log('❌ Redis: Connection failed');\n        console.log(`   Error: ${redisError}`);\n      }\n      \n      // AI 서비스 상태 확인\n      try {\n        const aiStatus = await aiModelManager.getServiceHealth();\n        console.log(`✅ AI Service: ${aiStatus.status}`);\n        console.log(`   Models loaded: ${aiStatus.modelsLoaded}`);\n        console.log(`   GPU available: ${aiStatus.gpuAvailable ? 'Yes' : 'No'}`);\n      } catch (aiError) {\n        console.log('❌ AI Service: Health check failed');\n        console.log(`   Error: ${aiError}`);\n      }\n      \n      // 시스템 리소스 확인\n      const os = require('os');\n      const totalMem = os.totalmem() / 1024 / 1024 / 1024; // GB\n      const freeMem = os.freemem() / 1024 / 1024 / 1024; // GB\n      const memUsage = ((totalMem - freeMem) / totalMem * 100).toFixed(1);\n      \n      console.log(`💻 System Resources:`);\n      console.log(`   CPU Load: ${os.loadavg()[0].toFixed(2)}`);\n      console.log(`   Memory Usage: ${memUsage}% (${(totalMem - freeMem).toFixed(1)}GB / ${totalMem.toFixed(1)}GB)`);\n      console.log(`   Uptime: ${(os.uptime() / 3600).toFixed(1)} hours`);\n      \n    } catch (error) {\n      console.error('❌ Health check failed:', error);\n      process.exit(1);\n    }\n  });\n\nmonitorCommand\n  .command('performance')\n  .option('-d, --days <days>', 'Number of days to analyze', '7')\n  .description('Generate performance report')\n  .action(async (options) => {\n    try {\n      const days = parseInt(options.days);\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      \n      console.log(`📊 Performance Report (Last ${days} days)`);\n      console.log('=====================================\\n');\n      \n      // 케이스 처리 통계\n      const caseStats = await prisma.case.groupBy({\n        by: ['status'],\n        _count: { status: true },\n        where: {\n          createdAt: {\n            gte: startDate\n          }\n        }\n      });\n      \n      console.log('📋 Case Processing Statistics:');\n      caseStats.forEach(stat => {\n        console.log(`   ${stat.status}: ${stat._count.status} cases`);\n      });\n      \n      // AI 처리 성능\n      const aiStats = await prisma.aIPrediction.aggregate({\n        _avg: {\n          confidence: true,\n          processingTime: true\n        },\n        _count: {\n          id: true\n        },\n        where: {\n          createdAt: {\n            gte: startDate\n          }\n        }\n      });\n      \n      console.log('\\n🤖 AI Processing Performance:');\n      console.log(`   Total predictions: ${aiStats._count.id}`);\n      console.log(`   Average confidence: ${(aiStats._avg.confidence || 0 * 100).toFixed(2)}%`);\n      console.log(`   Average processing time: ${(aiStats._avg.processingTime || 0).toFixed(2)}s`);\n      \n      // 에러율 계산\n      const totalRequests = await prisma.auditLog.count({\n        where: {\n          timestamp: {\n            gte: startDate\n          }\n        }\n      });\n      \n      const errorRequests = await prisma.auditLog.count({\n        where: {\n          timestamp: {\n            gte: startDate\n          },\n          action: {\n            contains: 'ERROR'\n          }\n        }\n      });\n      \n      const errorRate = totalRequests > 0 ? (errorRequests / totalRequests * 100).toFixed(2) : '0.00';\n      \n      console.log('\\n📈 System Reliability:');\n      console.log(`   Total requests: ${totalRequests}`);\n      console.log(`   Error requests: ${errorRequests}`);\n      console.log(`   Error rate: ${errorRate}%`);\n      \n    } catch (error) {\n      console.error('❌ Performance report generation failed:', error);\n      process.exit(1);\n    }\n  });\n\n// 유지보수 명령어\nconst maintenanceCommand = program.command('maintenance').description('System maintenance commands');\n\nmaintenanceCommand\n  .command('cleanup')\n  .option('--dry-run', 'Show what would be deleted without actually deleting')\n  .option('--days <days>', 'Delete logs older than specified days', '90')\n  .description('Clean up old logs and temporary files')\n  .action(async (options) => {\n    try {\n      const days = parseInt(options.days);\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - days);\n      \n      console.log(`🧹 Cleanup Operation (${options.dryRun ? 'DRY RUN' : 'LIVE'})`);\n      console.log(`📅 Removing data older than ${days} days (before ${cutoffDate.toISOString()})`);\n      console.log('='.repeat(60));\n      \n      // 오래된 감사 로그 정리\n      const oldAuditLogs = await prisma.auditLog.findMany({\n        where: {\n          timestamp: {\n            lt: cutoffDate\n          }\n        },\n        select: { id: true }\n      });\n      \n      console.log(`📋 Found ${oldAuditLogs.length} old audit logs`);\n      \n      if (!options.dryRun && oldAuditLogs.length > 0) {\n        await prisma.auditLog.deleteMany({\n          where: {\n            timestamp: {\n              lt: cutoffDate\n            }\n          }\n        });\n        console.log(`✅ Deleted ${oldAuditLogs.length} audit logs`);\n      }\n      \n      // 오래된 AI 예측 정리 (낮은 신뢰도)\n      const lowConfidencePredictions = await prisma.aIPrediction.findMany({\n        where: {\n          createdAt: {\n            lt: cutoffDate\n          },\n          confidence: {\n            lt: 0.5\n          },\n          humanReviewed: false\n        },\n        select: { id: true }\n      });\n      \n      console.log(`🤖 Found ${lowConfidencePredictions.length} low-confidence AI predictions`);\n      \n      if (!options.dryRun && lowConfidencePredictions.length > 0) {\n        await prisma.aIPrediction.deleteMany({\n          where: {\n            createdAt: {\n              lt: cutoffDate\n            },\n            confidence: {\n              lt: 0.5\n            },\n            humanReviewed: false\n          }\n        });\n        console.log(`✅ Deleted ${lowConfidencePredictions.length} low-confidence predictions`);\n      }\n      \n      // 임시 파일 정리\n      const fs = require('fs').promises;\n      const path = require('path');\n      const tempDir = './temp';\n      \n      try {\n        const files = await fs.readdir(tempDir);\n        let deletedFiles = 0;\n        \n        for (const file of files) {\n          const filePath = path.join(tempDir, file);\n          const stats = await fs.stat(filePath);\n          \n          if (stats.mtime < cutoffDate) {\n            if (!options.dryRun) {\n              await fs.unlink(filePath);\n            }\n            deletedFiles++;\n          }\n        }\n        \n        console.log(`🗂️  Found ${deletedFiles} old temporary files`);\n        if (!options.dryRun) {\n          console.log(`✅ Deleted ${deletedFiles} temporary files`);\n        }\n        \n      } catch (error) {\n        console.log('⚠️  No temp directory or temp files found');\n      }\n      \n      if (options.dryRun) {\n        console.log('\\n💡 This was a dry run. Use without --dry-run to actually perform cleanup.');\n      } else {\n        console.log('\\n✅ Cleanup completed successfully');\n      }\n      \n    } catch (error) {\n      console.error('❌ Cleanup failed:', error);\n      process.exit(1);\n    }\n  });\n\nmaintenanceCommand\n  .command('vacuum')\n  .description('Optimize database storage')\n  .action(async () => {\n    try {\n      console.log('🔄 Running database vacuum...');\n      \n      await prisma.$executeRawUnsafe('VACUUM ANALYZE;');\n      \n      console.log('✅ Database vacuum completed');\n      console.log('💡 Database storage optimized and statistics updated');\n      \n    } catch (error) {\n      console.error('❌ Database vacuum failed:', error);\n      process.exit(1);\n    }\n  });\n\n// 메인 실행\nprogram.parse();\n\n// 프로그램 종료 시 정리\nprocess.on('SIGINT', async () => {\n  console.log('\\n🛑 Shutting down gracefully...');\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\n🛑 Received SIGTERM, shutting down...');\n  await prisma.$disconnect();\n  process.exit(0);\n});\n```\n\n### 10.2 백업 및 재해복구\n\n#### **<코드 23>** 자동 백업 및 복구 스크립트\n```bash\n#!/bin/bash\n# scripts/backup-restore.sh\n\nset -e  # Exit on any error\n\n# Configuration\nBACKUP_DIR=\"/var/backups/icsr-ai\"\nS3_BUCKET=\"icsr-ai-backups\"\nRETENTION_DAYS=30\nLOG_FILE=\"/var/log/icsr-ai-backup.log\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Logging function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\nerror() {\n    echo -e \"${RED}[ERROR] $1${NC}\" | tee -a \"$LOG_FILE\"\n}\n\nsuccess() {\n    echo -e \"${GREEN}[SUCCESS] $1${NC}\" | tee -a \"$LOG_FILE\"\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING] $1${NC}\" | tee -a \"$LOG_FILE\"\n}\n\n# Create backup directory if it doesn't exist\nmkdir -p \"$BACKUP_DIR\"\n\n# Database backup function\nbackup_database() {\n    log \"Starting database backup...\"\n    \n    local timestamp=$(date +\"%Y%m%d_%H%M%S\")\n    local backup_file=\"$BACKUP_DIR/db_backup_$timestamp.sql\"\n    local compressed_file=\"$backup_file.gz\"\n    \n    # Create database dump\n    if pg_dump \"$DATABASE_URL\" > \"$backup_file\"; then\n        success \"Database dump created: $backup_file\"\n    else\n        error \"Failed to create database dump\"\n        return 1\n    fi\n    \n    # Compress backup\n    if gzip \"$backup_file\"; then\n        success \"Backup compressed: $compressed_file\"\n    else\n        error \"Failed to compress backup\"\n        return 1\n    fi\n    \n    # Encrypt backup\n    local encrypted_file=\"$compressed_file.enc\"\n    if openssl enc -aes-256-cbc -salt -in \"$compressed_file\" -out \"$encrypted_file\" -pass pass:\"$BACKUP_ENCRYPTION_KEY\"; then\n        success \"Backup encrypted: $encrypted_file\"\n        rm \"$compressed_file\"  # Remove unencrypted version\n    else\n        error \"Failed to encrypt backup\"\n        return 1\n    fi\n    \n    # Upload to S3\n    if aws s3 cp \"$encrypted_file\" \"s3://$S3_BUCKET/database/\"; then\n        success \"Backup uploaded to S3\"\n    else\n        error \"Failed to upload backup to S3\"\n        return 1\n    fi\n    \n    echo \"$encrypted_file\"\n}\n\n# File storage backup function\nbackup_files() {\n    log \"Starting file storage backup...\"\n    \n    local timestamp=$(date +\"%Y%m%d_%H%M%S\")\n    local backup_file=\"$BACKUP_DIR/files_backup_$timestamp.tar.gz\"\n    \n    # Create tar archive of important files\n    if tar -czf \"$backup_file\" \\\n        -C / \\\n        var/uploads \\\n        var/models \\\n        etc/ssl/certs \\\n        --exclude='*.tmp' \\\n        --exclude='*.log'; then\n        success \"File backup created: $backup_file\"\n    else\n        error \"Failed to create file backup\"\n        return 1\n    fi\n    \n    # Encrypt file backup\n    local encrypted_file=\"$backup_file.enc\"\n    if openssl enc -aes-256-cbc -salt -in \"$backup_file\" -out \"$encrypted_file\" -pass pass:\"$BACKUP_ENCRYPTION_KEY\"; then\n        success \"File backup encrypted: $encrypted_file\"\n        rm \"$backup_file\"  # Remove unencrypted version\n    else\n        error \"Failed to encrypt file backup\"\n        return 1\n    fi\n    \n    # Upload to S3\n    if aws s3 cp \"$encrypted_file\" \"s3://$S3_BUCKET/files/\"; then\n        success \"File backup uploaded to S3\"\n    else\n        error \"Failed to upload file backup to S3\"\n        return 1\n    fi\n    \n    echo \"$encrypted_file\"\n}\n\n# Configuration backup function\nbackup_config() {\n    log \"Starting configuration backup...\"\n    \n    local timestamp=$(date +\"%Y%m%d_%H%M%S\")\n    local backup_file=\"$BACKUP_DIR/config_backup_$timestamp.tar.gz\"\n    \n    # Backup Kubernetes configs, environment files, etc.\n    if tar -czf \"$backup_file\" \\\n        -C / \\\n        etc/kubernetes \\\n        opt/icsr-ai/config \\\n        home/admin/.env.production; then\n        success \"Configuration backup created: $backup_file\"\n    else\n        error \"Failed to create configuration backup\"\n        return 1\n    fi\n    \n    # Upload to S3\n    if aws s3 cp \"$backup_file\" \"s3://$S3_BUCKET/config/\"; then\n        success \"Configuration backup uploaded to S3\"\n    else\n        error \"Failed to upload configuration backup to S3\"\n        return 1\n    fi\n    \n    echo \"$backup_file\"\n}\n\n# Cleanup old backups\ncleanup_old_backups() {\n    log \"Cleaning up old backups...\"\n    \n    # Local cleanup\n    find \"$BACKUP_DIR\" -name \"*.enc\" -mtime +$RETENTION_DAYS -delete\n    find \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +$RETENTION_DAYS -delete\n    find \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +$RETENTION_DAYS -delete\n    \n    success \"Local old backups cleaned up\"\n    \n    # S3 cleanup (lifecycle policy should handle this, but double-check)\n    local cutoff_date=$(date -d \"$RETENTION_DAYS days ago\" +%Y-%m-%d)\n    aws s3api list-objects-v2 --bucket \"$S3_BUCKET\" --query \"Contents[?LastModified<'$cutoff_date'].Key\" --output text | \\\n    while read -r key; do\n        if [ -n \"$key\" ]; then\n            aws s3 rm \"s3://$S3_BUCKET/$key\"\n            log \"Deleted old S3 backup: $key\"\n        fi\n    done\n    \n    success \"S3 old backups cleaned up\"\n}\n\n# Database restore function\nrestore_database() {\n    local backup_file=\"$1\"\n    \n    if [ -z \"$backup_file\" ]; then\n        error \"Backup file path is required for restore\"\n        return 1\n    fi\n    \n    log \"Starting database restore from: $backup_file\"\n    \n    # Check if file exists\n    if [ ! -f \"$backup_file\" ]; then\n        error \"Backup file not found: $backup_file\"\n        return 1\n    fi\n    \n    # Decrypt backup\n    local decrypted_file=\"${backup_file%.enc}\"\n    if openssl enc -aes-256-cbc -d -in \"$backup_file\" -out \"$decrypted_file\" -pass pass:\"$BACKUP_ENCRYPTION_KEY\"; then\n        success \"Backup decrypted successfully\"\n    else\n        error \"Failed to decrypt backup\"\n        return 1\n    fi\n    \n    # Decompress backup\n    local sql_file=\"${decrypted_file%.gz}\"\n    if gunzip \"$decrypted_file\"; then\n        success \"Backup decompressed successfully\"\n    else\n        error \"Failed to decompress backup\"\n        return 1\n    fi\n    \n    # Create confirmation prompt\n    warning \"⚠️  This will COMPLETELY REPLACE the current database!\"\n    warning \"Current database will be backed up before restore.\"\n    read -p \"Are you sure you want to continue? (yes/no): \" confirm\n    \n    if [ \"$confirm\" != \"yes\" ]; then\n        log \"Restore cancelled by user\"\n        return 1\n    fi\n    \n    # Backup current database before restore\n    log \"Creating safety backup of current database...\"\n    local safety_backup=\"$BACKUP_DIR/safety_backup_$(date +%Y%m%d_%H%M%S).sql\"\n    if pg_dump \"$DATABASE_URL\" > \"$safety_backup\"; then\n        success \"Safety backup created: $safety_backup\"\n    else\n        error \"Failed to create safety backup\"\n        return 1\n    fi\n    \n    # Stop application services\n    log \"Stopping application services...\"\n    kubectl scale deployment/icsr-ai-backend --replicas=0 -n icsr-ai-prod\n    kubectl scale deployment/icsr-ai-frontend --replicas=0 -n icsr-ai-prod\n    \n    # Wait for pods to stop\n    sleep 30\n    \n    # Drop and recreate database\n    log \"Recreating database...\"\n    if psql \"$DATABASE_URL\" -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"; then\n        success \"Database schema recreated\"\n    else\n        error \"Failed to recreate database schema\"\n        return 1\n    fi\n    \n    # Restore from backup\n    log \"Restoring database from backup...\"\n    if psql \"$DATABASE_URL\" < \"$sql_file\"; then\n        success \"Database restored successfully\"\n    else\n        error \"Failed to restore database\"\n        \n        # Attempt to restore safety backup\n        warning \"Attempting to restore from safety backup...\"\n        psql \"$DATABASE_URL\" < \"$safety_backup\"\n        return 1\n    fi\n    \n    # Restart application services\n    log \"Restarting application services...\"\n    kubectl scale deployment/icsr-ai-backend --replicas=3 -n icsr-ai-prod\n    kubectl scale deployment/icsr-ai-frontend --replicas=2 -n icsr-ai-prod\n    \n    # Wait for services to be ready\n    kubectl wait --for=condition=available --timeout=300s deployment/icsr-ai-backend -n icsr-ai-prod\n    kubectl wait --for=condition=available --timeout=300s deployment/icsr-ai-frontend -n icsr-ai-prod\n    \n    # Cleanup temporary files\n    rm -f \"$sql_file\"\n    \n    success \"Database restore completed successfully\"\n}\n\n# Health check after restore\nhealth_check() {\n    log \"Performing post-restore health check...\"\n    \n    local max_attempts=30\n    local attempt=1\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -f -s \"https://api.icsr-ai.company.com/health\" > /dev/null; then\n            success \"Application health check passed\"\n            return 0\n        fi\n        \n        log \"Health check attempt $attempt/$max_attempts failed, retrying in 10s...\"\n        sleep 10\n        ((attempt++))\n    done\n    \n    error \"Application failed health check after restore\"\n    return 1\n}\n\n# Send notification\nsend_notification() {\n    local status=\"$1\"\n    local message=\"$2\"\n    \n    # Slack notification\n    if [ -n \"$SLACK_WEBHOOK_URL\" ]; then\n        curl -X POST -H 'Content-type: application/json' \\\n            --data \"{\\\"text\\\":\\\"🔄 ICSR-AI Backup Report\\\\n*Status:* $status\\\\n*Message:* $message\\\\n*Time:* $(date)\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\"\n    fi\n    \n    # Email notification (requires mailutils)\n    if command -v mail >/dev/null 2>&1 && [ -n \"$NOTIFICATION_EMAIL\" ]; then\n        echo \"$message\" | mail -s \"ICSR-AI Backup Report - $status\" \"$NOTIFICATION_EMAIL\"\n    fi\n}\n\n# Main backup function\nrun_backup() {\n    log \"========== Starting ICSR-AI System Backup ==========\"\n    \n    local overall_status=\"SUCCESS\"\n    local error_messages=()\n    \n    # Database backup\n    if ! db_backup_file=$(backup_database); then\n        overall_status=\"PARTIAL_FAILURE\"\n        error_messages+=(\"Database backup failed\")\n    fi\n    \n    # File backup\n    if ! file_backup_file=$(backup_files); then\n        overall_status=\"PARTIAL_FAILURE\"\n        error_messages+=(\"File backup failed\")\n    fi\n    \n    # Configuration backup\n    if ! config_backup_file=$(backup_config); then\n        overall_status=\"PARTIAL_FAILURE\"\n        error_messages+=(\"Configuration backup failed\")\n    fi\n    \n    # Cleanup\n    cleanup_old_backups\n    \n    # Generate backup report\n    local backup_report=\"Backup Summary:\\n\"\n    backup_report+=\"- Database: ${db_backup_file:-FAILED}\\n\"\n    backup_report+=\"- Files: ${file_backup_file:-FAILED}\\n\"\n    backup_report+=\"- Config: ${config_backup_file:-FAILED}\\n\"\n    \n    if [ ${#error_messages[@]} -gt 0 ]; then\n        backup_report+=\"Errors:\\n\"\n        printf '%s\\n' \"${error_messages[@]}\" | sed 's/^/- /' >> /tmp/backup_report\n        backup_report+=\"$(cat /tmp/backup_report)\"\n        rm -f /tmp/backup_report\n    fi\n    \n    log \"========== Backup Completed with status: $overall_status ==========\"\n    \n    # Send notification\n    send_notification \"$overall_status\" \"$backup_report\"\n    \n    if [ \"$overall_status\" = \"SUCCESS\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Command line interface\ncase \"$1\" in\n    \"backup\")\n        run_backup\n        ;;\n    \"restore\")\n        if [ -z \"$2\" ]; then\n            error \"Usage: $0 restore <backup_file_path>\"\n            exit 1\n        fi\n        restore_database \"$2\"\n        health_check\n        ;;\n    \"cleanup\")\n        cleanup_old_backups\n        ;;\n    \"health\")\n        health_check\n        ;;\n    *)\n        echo \"Usage: $0 {backup|restore <file>|cleanup|health}\"\n        echo \"\"\n        echo \"Commands:\"\n        echo \"  backup  - Run full system backup\"\n        echo \"  restore - Restore from backup file\"\n        echo \"  cleanup - Clean up old backup files\"\n        echo \"  health  - Check application| **데이터 암호화** | 저장/전송 중 암호화 | AES-256, TLS 1.3 | FIPS 140-2 |\n| **접근 제어** | 역할 기반 접근 제어 | RBAC, 최소 권한 원칙 | NIST 800-53 |\n| **개인정보 보호** | PII 익명화/가명처리 | 해시, 토큰화 | GDPR, HIPAA |\n| **감사 추적** | 모든 활동 로깅 | 변조 방지 로그 | SOX, CFR 21 Part 11 |\n| **네트워크 보안** | 침입 탐지/차단 | WAF, IDS/IPS | PCI DSS |\n| **취약점 관리** | 정기 보안 스캔 | SAST, DAST, SCA | OWASP Top 10 |\n\n#### **<코드 20>** 보안 미들웨어 구현\n```typescript\n// src/middleware/securityMiddleware.ts\nimport { Request, Response, NextFunction } from 'express';\nimport rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport { body, validationResult } from 'express-validator';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\nimport { AppError } from '../utils/AppError';\nimport { logger } from '../utils/logger';\nimport { RedisClient } from '../utils/redis';\n\nexport class SecurityMiddleware {\n  private redis: RedisClient;\n\n  constructor() {\n    this.redis = new RedisClient();\n  }\n\n  // Helmet 보안 헤더 설정\n  static securityHeaders() {\n    return helmet({\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          scriptSrc: [\"'self'\", \"'unsafe-inline'\", 'cdn.jsdelivr.net'],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\", 'fonts.googleapis.com'],\n          fontSrc: [\"'self'\", 'fonts.gstatic.com'],\n          imgSrc: [\"'self'\", 'data:', 'https:'],\n          connectSrc: [\"'self'\"],\n          frameSrc: [\"'none'\"],\n          objectSrc: [\"'none'\"],\n          upgradeInsecureRequests: []\n        }\n      },\n      hsts: {\n        maxAge: 31536000,\n        includeSubDomains: true,\n        preload: true\n      },\n      noSniff: true,\n      frameguard: { action: 'deny' },\n      xssFilter: true,\n      referrerPolicy: { policy: 'strict-origin-when-cross-origin' }\n    });\n  }\n\n  // API 속도 제한\n  static createRateLimiter(windowMs: number = 15 * 60 * 1000, max: number = 100) {\n    return rateLimit({\n      windowMs,\n      max,\n      message: {\n        error: 'Too many requests',\n        message: 'Rate limit exceeded. Please try again later.',\n        retryAfter: Math.ceil(windowMs / 1000)\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skip: (req) => {\n        // 헬스 체크 등 특정 엔드포인트는 제외\n        const skipPaths = ['/health', '/metrics'];\n        return skipPaths.includes(req.path);\n      },\n      keyGenerator: (req) => {\n        // IP 주소와 사용자 ID 조합으로 키 생성\n        const userId = req.user?.id || 'anonymous';\n        return `${req.ip}:${userId}`;\n      }\n    });\n  }\n\n  // JWT 토큰 검증 미들웨어\n  static authenticateToken(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.split(' ')[1]; // Bearer TOKEN\n\n    if (!token) {\n      throw new AppError('Access token required', 401);\n    }\n\n    jwt.verify(token, process.env.JWT_SECRET!, async (err, decoded) => {\n      if (err) {\n        logger.logSecurityEvent('Invalid JWT token', 'medium', {\n          ip: req.ip,\n          userAgent: req.headers['user-agent'],\n          token: token.substring(0, 10) + '...' // 부분만 로깅\n        });\n        throw new AppError('Invalid or expired token', 403);\n      }\n\n      const payload = decoded as any;\n      \n      // 토큰 블랙리스트 확인\n      const isBlacklisted = await SecurityMiddleware.isTokenBlacklisted(token);\n      if (isBlacklisted) {\n        throw new AppError('Token has been revoked', 403);\n      }\n\n      // 사용자 정보 설정\n      req.user = {\n        id: payload.sub,\n        email: payload.email,\n        role: payload.role,\n        senderID: payload.senderID,\n        permissions: payload.permissions || []\n      };\n\n      // 토큰 활동 기록\n      logger.info('Token authenticated', {\n        userId: payload.sub,\n        tokenId: payload.jti,\n        ip: req.ip\n      });\n\n      next();\n    });\n  }\n\n  // 역할 기반 접근 제어\n  static requireRole(...roles: string[]) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (!req.user) {\n        throw new AppError('Authentication required', 401);\n      }\n\n      if (!roles.includes(req.user.role)) {\n        logger.logSecurityEvent('Unauthorized role access attempt', 'high', {\n          userId: req.user.id,\n          requiredRoles: roles,\n          actualRole: req.user.role,\n          path: req.path,\n          ip: req.ip\n        });\n        throw new AppError('Insufficient permissions', 403);\n      }\n\n      next();\n    };\n  }\n\n  // 권한 기반 접근 제어\n  static requirePermission(...permissions: string[]) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (!req.user?.permissions) {\n        throw new AppError('Permissions not found', 403);\n      }\n\n      const hasPermission = permissions.every(permission => \n        req.user.permissions.includes(permission)\n      );\n\n      if (!hasPermission) {\n        logger.logSecurityEvent('Unauthorized permission access attempt', 'high', {\n          userId: req.user.id,\n          requiredPermissions: permissions,\n          actualPermissions: req.user.permissions,\n          path: req.path,\n          ip: req.ip\n        });\n        throw new AppError('Insufficient permissions', 403);\n      }\n\n      next();\n    };\n  }\n\n  // 입력 검증 및 살균\n  static validateAndSanitize = {\n    // 이메일 검증\n    email: body('email')\n      .isEmail()\n      .normalizeEmail()\n      .withMessage('Valid email is required'),\n\n    // 패스워드 검증\n    password: body('password')\n      .isLength({ min: 8, max: 128 })\n      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n      .withMessage('Password must be 8-128 characters with uppercase, lowercase, number, and special character'),\n\n    // 사용자 입력 살균\n    sanitizeString: body('*')\n      .trim()\n      .escape(),\n\n    // SQL 인젝션 방지\n    preventSQLInjection: body('*').custom((value) => {\n      if (typeof value === 'string') {\n        const sqlPatterns = [\n          /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE)\\b)/i,\n          /(\\b(UNION|OR|AND)\\b.*\\b(SELECT|INSERT|UPDATE|DELETE)\\b)/i,\n          /(--|\\/\\*|\\*\\/|;)/,\n          /(\\b(SCRIPT|JAVASCRIPT|VBSCRIPT)\\b)/i\n        ];\n\n        for (const pattern of sqlPatterns) {\n          if (pattern.test(value)) {\n            throw new Error('Potentially malicious input detected');\n          }\n        }\n      }\n      return true;\n    }),\n\n    // XSS 방지\n    preventXSS: body('*').custom((value) => {\n      if (typeof value === 'string') {\n        const xssPatterns = [\n          /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n          /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\n          /javascript:/gi,\n          /on\\w+\\s*=/gi\n        ];\n\n        for (const pattern of xssPatterns) {\n          if (pattern.test(value)) {\n            throw new Error('XSS attempt detected');\n          }\n        }\n      }\n      return true;\n    })\n  };\n\n  // 검증 오류 처리\n  static handleValidationErrors(req: Request, res: Response, next: NextFunction) {\n    const errors = validationResult(req);\n    \n    if (!errors.isEmpty()) {\n      logger.logSecurityEvent('Input validation failed', 'medium', {\n        errors: errors.array(),\n        ip: req.ip,\n        path: req.path,\n        userId: req.user?.id\n      });\n\n      throw new AppError('Input validation failed', 400, errors.array());\n    }\n\n    next();\n  }\n\n  // CSRF 토큰 생성\n  static generateCSRFToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  // CSRF 토큰 검증\n  static verifyCSRFToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers['x-csrf-token'] || req.body._csrf;\n    const sessionToken = req.session?.csrfToken;\n\n    if (!token || !sessionToken || token !== sessionToken) {\n      logger.logSecurityEvent('CSRF token validation failed', 'high', {\n        ip: req.ip,\n        userAgent: req.headers['user-agent'],\n        userId: req.user?.id\n      });\n      throw new AppError('Invalid CSRF token', 403);\n    }\n\n    next();\n  }\n\n  // 토큰 블랙리스트 확인\n  private static async isTokenBlacklisted(token: string): Promise<boolean> {\n    try {\n      const redis = new RedisClient();\n      const tokenHash = crypto.createHash('sha256').update(token).digest('hex');\n      const isBlacklisted = await redis.client.exists(`blacklist:${tokenHash}`);\n      return isBlacklisted === 1;\n    } catch (error) {\n      logger.error('Failed to check token blacklist', error);\n      return false; // 에러 시 안전한 방향으로 처리\n    }\n  }\n\n  // 토큰 블랙리스트 추가\n  static async blacklistToken(token: string, expirationTime: number): Promise<void> {\n    try {\n      const redis = new RedisClient();\n      const tokenHash = crypto.createHash('sha256').update(token).digest('hex');\n      await redis.client.setex(`blacklist:${tokenHash}`, expirationTime, 'true');\n      \n      logger.logSecurityEvent('Token blacklisted', 'low', {\n        tokenHash: tokenHash.substring(0, 16) + '...',\n        expiration: expirationTime\n      });\n    } catch (error) {\n      logger.error('Failed to blacklist token', error);\n    }\n  }\n\n  // IP 주소 기반 지역 차단\n  static blockGeoLocation(blockedCountries: string[] = []) {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        // IP 지역 조회 서비스 (예: MaxMind GeoIP)\n        const geoInfo = await this.getGeoLocation(req.ip);\n        \n        if (blockedCountries.includes(geoInfo.country)) {\n          logger.logSecurityEvent('Blocked geographical access', 'medium', {\n            ip: req.ip,\n            country: geoInfo.country,\n            city: geoInfo.city\n          });\n          \n          throw new AppError('Access denied from this location', 403);\n        }\n        \n        next();\n      } catch (error) {\n        if (error instanceof AppError) {\n          throw error;\n        }\n        // 지역 조회 실패 시 통과 (서비스 가용성 우선)\n        next();\n      }\n    };\n  }\n\n  private static async getGeoLocation(ip: string): Promise<{country: string, city: string}> {\n    // 실제 구현에서는 MaxMind GeoIP2 또는 다른 서비스 사용\n    return { country: 'US', city: 'Unknown' };\n  }\n\n  // 의심스러운 활동 탐지\n  static detectSuspiciousActivity() {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      const userId = req.user?.id;\n      const ip = req.ip;\n      const userAgent = req.headers['user-agent'];\n      const path = req.path;\n\n      // 의심스러운 패턴들\n      const suspiciousPatterns = [\n        // 짧은 시간 내 대량 요청\n        { type: 'rapid_requests', threshold: 50, window: 60 },\n        // 다양한 IP에서 동일 계정 접근\n        { type: 'multiple_ips', threshold: 5, window: 300 },\n        // 비정상적인 시간대 접근\n        { type: 'unusual_hours', threshold: 1, window: 3600 }\n      ];\n\n      try {\n        for (const pattern of suspiciousPatterns) {\n          const isSuspicious = await this.checkSuspiciousPattern(\n            pattern, userId, ip, userAgent, path\n          );\n          \n          if (isSuspicious) {\n            logger.logSecurityEvent(`Suspicious activity detected: ${pattern.type}`, 'high', {\n              userId,\n              ip,\n              userAgent,\n              path,\n              pattern: pattern.type\n            });\n\n            // 의심스러운 활동 시 추가 인증 요구 또는 계정 일시 잠금\n            if (pattern.type === 'rapid_requests') {\n              throw new AppError('Suspicious activity detected. Please try again later.', 429);\n            }\n          }\n        }\n\n        next();\n      } catch (error) {\n        if (error instanceof AppError) {\n          throw error;\n        }\n        next(); // 탐지 실패 시 통과\n      }\n    };\n  }\n\n  private static async checkSuspiciousPattern(\n    pattern: any, \n    userId: string | undefined, \n    ip: string, \n    userAgent: string | undefined, \n    path: string\n  ): Promise<boolean> {\n    // Redis를 사용한 패턴 탐지 로직 구현\n    const redis = new RedisClient();\n    const key = `suspicious:${pattern.type}:${userId || ip}`;\n    \n    const count = await redis.client.incr(key);\n    if (count === 1) {\n      await redis.client.expire(key, pattern.window);\n    }\n    \n    return count > pattern.threshold;\n  }\n}\n\n// 보안 관련 타입 확장\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        role: string;\n        senderID?: string;\n        permissions: string[];\n      };\n    }\n  }\n}\n\nexport default SecurityMiddleware;\n```\n\n### 9.2 데이터 보호 및 암호화\n\n#### **<코드 21>** 데이터 암호화 서비스\n```typescript\n// src/services/encryptionService.ts\nimport crypto from 'crypto';\nimport { promisify } from 'util';\nimport bcrypt from 'bcryptjs';\nimport { AppError } from '../utils/AppError';\nimport { logger } from '../utils/logger';\n\ninterface EncryptionResult {\n  encryptedData: string;\n  iv: string;\n  authTag?: string;\n}\n\ninterface DecryptionParams {\n  encryptedData: string;\n  iv: string;\n  authTag?: string;\n}\n\nexport class EncryptionService {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32; // 256 bits\n  private readonly ivLength = 16; // 128 bits\n  private readonly saltRounds = 12;\n\n  // 환경변수에서 마스터 키 로드\n  private readonly masterKey: Buffer;\n\n  constructor() {\n    const key = process.env.ENCRYPTION_KEY;\n    if (!key || key.length < 32) {\n      throw new Error('ENCRYPTION_KEY must be at least 32 characters');\n    }\n    \n    this.masterKey = crypto.scryptSync(key, 'salt', this.keyLength);\n  }\n\n  // 개인식별정보(PII) 암호화\n  async encryptPII(data: string): Promise<string> {\n    try {\n      const result = this.encrypt(data);\n      \n      // 암호화된 데이터를 Base64로 인코딩하여 저장\n      const encryptedPackage = {\n        data: result.encryptedData,\n        iv: result.iv,\n        authTag: result.authTag\n      };\n      \n      logger.info('PII data encrypted', {\n        dataLength: data.length,\n        encryptedLength: result.encryptedData.length\n      });\n      \n      return Buffer.from(JSON.stringify(encryptedPackage)).toString('base64');\n      \n    } catch (error) {\n      logger.error('Failed to encrypt PII data', error);\n      throw new AppError('Encryption failed', 500);\n    }\n  }\n\n  // 개인식별정보(PII) 복호화\n  async decryptPII(encryptedData: string): Promise<string> {\n    try {\n      const encryptedPackage = JSON.parse(\n        Buffer.from(encryptedData, 'base64').toString('utf8')\n      );\n      \n      const decryptedData = this.decrypt({\n        encryptedData: encryptedPackage.data,\n        iv: encryptedPackage.iv,\n        authTag: encryptedPackage.authTag\n      });\n      \n      logger.info('PII data decrypted', {\n        encryptedLength: encryptedData.length,\n        decryptedLength: decryptedData.length\n      });\n      \n      return decryptedData;\n      \n    } catch (error) {\n      logger.error('Failed to decrypt PII data', error);\n      throw new AppError('Decryption failed', 500);\n    }\n  }\n\n  // 일반 데이터 암호화\n  private encrypt(plaintext: string): EncryptionResult {\n    const iv = crypto.randomBytes(this.ivLength);\n    const cipher = crypto.createCipher(this.algorithm, this.masterKey, iv);\n    \n    let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const authTag = cipher.getAuthTag();\n    \n    return {\n      encryptedData: encrypted,\n      iv: iv.toString('hex'),\n      authTag: authTag.toString('hex')\n    };\n  }\n\n  // 일반 데이터 복호화\n  private decrypt(params: DecryptionParams): string {\n    const iv = Buffer.from(params.iv, 'hex');\n    const authTag = Buffer.from(params.authTag!, 'hex');\n    \n    const decipher = crypto.createDecipher(this.algorithm, this.masterKey, iv);\n    decipher.setAuthTag(authTag);\n    \n    let decrypted = decipher.update(params.encryptedData, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  }\n\n  // 패스워드 해싱\n  async hashPassword(password: string): Promise<string> {\n    try {\n      const salt = await bcrypt.genSalt(this.saltRounds);\n      const hashedPassword = await bcrypt.hash(password, salt);\n      \n      logger.info('Password hashed successfully');\n      return hashedPassword;\n      \n    } catch (error) {\n      logger.error('Failed to hash password', error);\n      throw new AppError('Password hashing failed', 500);\n    }\n  }\n\n  // 패스워드 검증\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    try {\n      const isValid = await bcrypt.compare(password, hashedPassword);\n      \n      logger.info('Password verification completed', { isValid });\n      return isValid;\n      \n    } catch (error) {\n      logger.error('Failed to verify password', error);\n      throw new AppError('Password verification failed', 500);\n    }\n  }\n\n  // 토큰 생성 (세션 토큰, API 키 등)\n  generateSecureToken(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  // HMAC 서명 생성\n  createHMAC(data: string, secret?: string): string {\n    const key = secret || process.env.HMAC_SECRET!;\n    return crypto.createHmac('sha256', key).update(data).digest('hex');\n  }\n\n  // HMAC 서명 검증\n  verifyHMAC(data: string, signature: string, secret?: string): boolean {\n    const key = secret || process.env.HMAC_SECRET!;\n    const expectedSignature = crypto.createHmac('sha256', key).update(data).digest('hex');\n    \n    // 타이밍 공격 방지를 위한 constant-time 비교\n    return crypto.timingSafeEqual(\n      Buffer.from(expectedSignature, 'hex'),\n      Buffer.from(signature, 'hex')\n    );\n  }\n\n  // 데이터 해싱 (중복 제거, 무결성 검사용)\n  hashData(data: string, algorithm: 'md5' | 'sha1' | 'sha256' = 'sha256'): string {\n    return crypto.createHash(algorithm).update(data).digest('hex');\n  }\n\n  // 키 유도 함수 (Key Derivation Function)\n  deriveKey(password: string, salt: string, iterations: number = 100000): Buffer {\n    return crypto.pbkdf2Sync(password, salt, iterations, this.keyLength, 'sha256');\n  }\n\n  // 안전한 랜덤 문자열 생성\n  generateRandomString(length: number = 16, charset: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'): string {\n    let result = '';\n    const randomBytes = crypto.randomBytes(length);\n    \n    for (let i = 0; i < length; i++) {\n      result += charset[randomBytes[i] % charset.length];\n    }\n    \n    return result;\n  }\n\n  // 파일 암호화\n  async encryptFile(filePath: string, outputPath: string): Promise<void> {\n    const fs = require('fs').promises;\n    \n    try {\n      const fileData = await fs.readFile(filePath);\n      const encrypted = this.encrypt(fileData.toString('base64'));\n      \n      const encryptedPackage = {\n        data: encrypted.encryptedData,\n        iv: encrypted.iv,\n        authTag: encrypted.authTag,\n        originalName: filePath.split('/').pop(),\n        encryptedAt: new Date().toISOString()\n      };\n      \n      await fs.writeFile(outputPath, JSON.stringify(encryptedPackage));\n      \n      logger.info('File encrypted successfully', {\n        originalPath: filePath,\n        encryptedPath: outputPath\n      });\n      \n    } catch (error) {\n      logger.error('File encryption failed', error);\n      throw new AppError('File encryption failed', 500);\n    }\n  }\n\n  // 파일 복호화\n  async decryptFile(encryptedFilePath: string, outputPath: string): Promise<void> {\n    const fs = require('fs').promises;\n    \n    try {\n      const encryptedContent = await fs.readFile(encryptedFilePath, 'utf8');\n      const encryptedPackage = JSON.parse(encryptedContent);\n      \n      const decryptedData = this.decrypt({\n        encryptedData: encryptedPackage.data,\n        iv: encryptedPackage.iv,\n        authTag: encryptedPackage.authTag\n      });\n      \n      const fileData = Buffer.from(decryptedData, 'base64');\n      await fs.writeFile(outputPath, fileData);\n      \n      logger.info('File decrypted successfully', {\n        encryptedPath: encryptedFilePath,\n        decryptedPath: outputPath,\n        originalName: encryptedPackage.originalName\n      });\n      \n    } catch (error) {\n      logger.error('File decryption failed', error);\n      throw new AppError('File decryption failed', 500);\n    }\n  }\n\n  // 개인정보 마스킹 (로그 출력용)\n  maskPII(data: string, visibleChars: number = 2): string {\n    if (data.length <= visibleChars * 2) {\n      return '*'.repeat(data.length);\n    }\n    \n    const start = data.substring(0, visibleChars);\n    const end = data.substring(data.length - visibleChars);\n    const middle = '*'.repeat(data.length - visibleChars * 2);\n    \n    return start + middle + end;\n  }\n\n  // 데이터 무결성 검증\n  verifyDataIntegrity(data: string, expectedHash: string, algorithm: 'md5' | 'sha1' | 'sha256' = 'sha256'): boolean {\n    const actualHash = this.hashData(data, algorithm);\n    return crypto.timingSafeEqual(\n      Buffer.from(expectedHash, 'hex'),\n      Buffer.from(actualHash, 'hex')\n    );\n  }\n}\n\n// 싱글톤 인스턴스 내보내기\nexport const encryptionService = new EncryptionService();\n```\n\n---\n\n## 🔧 10. 운영 및 유지보수\n\n### 10.1 시스템 관리 도구\n\n#### **<코드 22>** 시스템 관리 CLI 도구\n```typescript\n// scripts/admin-cli.ts\n#!/usr/bin/env ts-node\nimport { Command } from 'commander';\nimport { PrismaClient } from '@prisma/client';\nimport { encryptionService } from '../src/services/encryptionService';\nimport { databaseOptimizer } from '../src/utils/databaseOptimization';\nimport { logger } from '../src/utils/logger';\nimport { AIModelManager } from '../src/ai/services/modelManager';\n\nconst program = new Command();\nconst prisma = new PrismaClient();\nconst aiModelManager = new AIModelManager();\n\nprogram\n  .name('icsr-admin')\n  .description('ICSR AI System Administration CLI')\n  .version('1.0.0');\n\n// 데이터베이스 관련 명령어\nconst dbCommand = program.command('db').description('Database management commands');\n\ndbCommand\n  .command('migrate')\n  .description('Run database migrations')\n  .action(async () => {\n    try {\n      console.log('🔄 Running database migrations...');\n      // Prisma migrate 실행\n      const { exec } = require('child_process');\n      exec('npx prisma migrate deploy', (error: any, stdout: any, stderr: any) => {\n        if (error) {\n          console.error('❌ Migration failed:', error);\n          process.exit(1);\n        }\n        console.log('✅ Migration completed successfully');\n        console.log(stdout);\n      });\n    } catch (error) {\n      console.error('❌ Migration error:', error);\n      process.exit(1);\n    }\n  });\n\ndbCommand\n  .command('optimize')\n  .description('Optimize database performance')\n  .action(async () => {\n    try {\n      console.log('🔄 Analyzing database performance...');\n      \n      const suggestions = await databaseOptimizer.analyzePerformance();\n      console.log('📊 Performance Analysis Results:');\n      suggestions.forEach((suggestion, index) => {\n        console.log(`  ${index + 1}. ${suggestion}`);\n      });\n      \n      console.log('\\n🔄 Creating recommended indexes...');\n      await databaseOptimizer.createRecommendedIndexes();\n      \n      console.log('🔄 Updating database statistics...');\n      await databaseOptimizer.updateStatistics();\n      \n      console.log('✅ Database optimization completed');\n      \n    } catch (error) {\n      console.error('❌ Database optimization failed:', error);\n      process.exit(1);\n    }\n  });\n\ndbCommand\n  .command('backup')\n  .option('-o, --output <path>', 'Output file path', `./backup-${new Date().toISOString().split('T')[0]}.sql`)\n  .description('Create database backup')\n  .action(async (options) => {\n    try {\n      console.log('🔄 Creating database backup...');\n      \n      const { exec } = require('child_process');\n      const backupCommand = `pg_dump ${process.env.DATABASE_URL} > ${options.output}`;\n      \n      exec(backupCommand, (error: any, stdout: any, stderr: any) => {\n        if (error) {\n          console.error('❌ Backup failed:', error);\n          process.exit(1);\n        }\n        \n        console.log(`✅ Database backup created: ${options.output}`);\n        \n        // 백업 파일 암호화\n        encryptionService.encryptFile(options.output, `${options.output}.encrypted`)\n          .then(() => {\n            console.log(`🔒 Backup encrypted: ${options.output}.encrypted`);\n          })\n          .catch((encError) => {\n            console.error('⚠️  Backup encryption failed:', encError);\n          });\n      });\n      \n    } catch (error) {\n      console.error('❌ Backup error:', error);\n      process.exit(1);\n    }\n  });\n\n// AI 모델 관련 명령어\nconst aiCommand = program.command('ai').description('AI model management commands');\n\naiCommand\n  .command('status')  icsr_ai_rules.yml: |\n    groups:\n    - name: icsr-ai-alerts\n      rules:\n      - alert: HighErrorRate\n        expr: rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"High error rate detected\"\n          description: \"Error rate is {{ $value | humanizePercentage }} for {{ $labels.job }}\"\n      \n      - alert: AIModelLowAccuracy\n        expr: ai_model_accuracy < 0.75\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"AI model accuracy is low\"\n          description: \"AI model {{ $labels.model_name }} accuracy is {{ $value | humanizePercentage }}\"\n      \n      - alert: DatabaseConnectionHigh\n        expr: pg_stat_activity_count > 80\n        for: 3m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High database connections\"\n          description: \"PostgreSQL has {{ $value }} active connections\"\n      \n      - alert: PodCrashLooping\n        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Pod is crash looping\"\n          description: \"Pod {{ $labels.pod }} is restarting frequently\"\n      \n      - alert: MemoryUsageHigh\n        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High memory usage\"\n          description: \"Container {{ $labels.container }} memory usage is {{ $value | humanizePercentage }}\"\n```\n\n#### **<코드 16>** 애플리케이션 로깅 구성\n```typescript\n// src/utils/logger.ts\nimport winston from 'winston';\nimport 'winston-daily-rotate-file';\n\ninterface LogContext {\n  userId?: string;\n  caseId?: string;\n  requestId?: string;\n  action?: string;\n  duration?: number;\n}\n\nclass Logger {\n  private logger: winston.Logger;\n\n  constructor() {\n    this.logger = winston.createLogger({\n      level: process.env.LOG_LEVEL || 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json(),\n        winston.format.printf(({ timestamp, level, message, ...meta }) => {\n          return JSON.stringify({\n            '@timestamp': timestamp,\n            level,\n            message,\n            service: 'icsr-ai-backend',\n            version: process.env.APP_VERSION || '1.0.0',\n            environment: process.env.NODE_ENV || 'development',\n            ...meta\n          });\n        })\n      ),\n      transports: [\n        // Console output\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        }),\n\n        // File output\n        new winston.transports.DailyRotateFile({\n          filename: 'logs/application-%DATE%.log',\n          datePattern: 'YYYY-MM-DD',\n          zippedArchive: true,\n          maxSize: '100m',\n          maxFiles: '30d'\n        }),\n\n        // Error file output\n        new winston.transports.DailyRotateFile({\n          filename: 'logs/error-%DATE%.log',\n          datePattern: 'YYYY-MM-DD',\n          level: 'error',\n          zippedArchive: true,\n          maxSize: '100m',\n          maxFiles: '30d'\n        })\n      ]\n    });\n\n    // Elasticsearch transport in production\n    if (process.env.NODE_ENV === 'production') {\n      const { ElasticsearchTransport } = require('winston-elasticsearch');\n      \n      this.logger.add(new ElasticsearchTransport({\n        level: 'info',\n        clientOpts: {\n          node: process.env.ELASTICSEARCH_URL || 'http://elasticsearch:9200'\n        },\n        index: 'icsr-ai-logs',\n        indexTemplate: {\n          name: 'icsr-ai-template',\n          patterns: ['icsr-ai-logs-*'],\n          settings: {\n            number_of_shards: 1,\n            number_of_replicas: 1\n          },\n          mappings: {\n            properties: {\n              '@timestamp': { type: 'date' },\n              level: { type: 'keyword' },\n              message: { type: 'text' },\n              service: { type: 'keyword' },\n              userId: { type: 'keyword' },\n              caseId: { type: 'keyword' },\n              requestId: { type: 'keyword' },\n              action: { type: 'keyword' },\n              duration: { type: 'long' },\n              stack: { type: 'text' }\n            }\n          }\n        }\n      }));\n    }\n  }\n\n  info(message: string, context?: LogContext): void {\n    this.logger.info(message, context);\n  }\n\n  error(message: string, error?: Error | any, context?: LogContext): void {\n    const errorInfo = error instanceof Error ? {\n      stack: error.stack,\n      name: error.name\n    } : error;\n\n    this.logger.error(message, {\n      error: errorInfo,\n      ...context\n    });\n  }\n\n  warn(message: string, context?: LogContext): void {\n    this.logger.warn(message, context);\n  }\n\n  debug(message: string, context?: LogContext): void {\n    this.logger.debug(message, context);\n  }\n\n  // 성능 로깅\n  logPerformance(action: string, duration: number, context?: LogContext): void {\n    this.info(`Performance: ${action} completed`, {\n      action,\n      duration,\n      ...context\n    });\n  }\n\n  // 비즈니스 이벤트 로깅\n  logBusinessEvent(event: string, context?: LogContext): void {\n    this.info(`Business Event: ${event}`, {\n      event_type: 'business',\n      event_name: event,\n      ...context\n    });\n  }\n\n  // AI 처리 로깅\n  logAIProcessing(modelName: string, accuracy: number, processingTime: number, context?: LogContext): void {\n    this.info('AI Processing completed', {\n      event_type: 'ai_processing',\n      model_name: modelName,\n      accuracy,\n      processing_time: processingTime,\n      ...context\n    });\n  }\n\n  // 보안 이벤트 로깅\n  logSecurityEvent(event: string, severity: 'low' | 'medium' | 'high' | 'critical', context?: LogContext): void {\n    this.warn(`Security Event: ${event}`, {\n      event_type: 'security',\n      event_name: event,\n      severity,\n      ...context\n    });\n  }\n}\n\nexport const logger = new Logger();\n```\n\n---\n\n## 📊 8. 성능 최적화 및 모니터링\n\n### 8.1 성능 최적화 전략\n\n#### **<표 10>** 성능 최적화 체크리스트\n| 영역 | 최적화 기법 | 구현 상태 | 예상 효과 |\n|------|------------|-----------|-----------|\n| **Frontend** | 코드 스플리팅 | ✅ 완료 | 초기 로딩 40% 단축 |\n| **Frontend** | 이미지 최적화 | ✅ 완료 | 번들 크기 30% 감소 |\n| **Frontend** | 메모이제이션 | ✅ 완료 | 렌더링 성능 25% 향상 |\n| **Backend** | API 응답 캐싱 | ✅ 완료 | API 응답 시간 60% 단축 |\n| **Backend** | 데이터베이스 최적화 | ✅ 완료 | 쿼리 성능 50% 향상 |\n| **Backend** | 커넥션 풀링 | ✅ 완료 | 동시 처리량 200% 증가 |\n| **AI Engine** | 모델 양자화 | 🔄 진행중 | 추론 시간 70% 단축 |\n| **AI Engine** | 배치 처리 | ✅ 완료 | 처리량 300% 증가 |\n| **Infrastructure** | CDN 적용 | ✅ 완료 | 로딩 시간 50% 단축 |\n\n#### **<코드 17>** 성능 모니터링 미들웨어\n```typescript\n// src/middleware/performanceMiddleware.ts\nimport { Request, Response, NextFunction } from 'express';\nimport { performance } from 'perf_hooks';\nimport { logger } from '../utils/logger';\nimport { prometheusMetrics } from '../utils/metrics';\n\ninterface PerformanceData {\n  requestId: string;\n  method: string;\n  path: string;\n  statusCode: number;\n  responseTime: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  cpuUsage: NodeJS.CpuUsage;\n}\n\nexport const performanceMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const startTime = performance.now();\n  const startCpuUsage = process.cpuUsage();\n  const requestId = req.headers['x-request-id'] as string || generateRequestId();\n\n  // Request ID 설정\n  req.requestId = requestId;\n  res.setHeader('X-Request-ID', requestId);\n\n  // Response 완료 후 성능 메트릭 수집\n  res.on('finish', () => {\n    const endTime = performance.now();\n    const responseTime = endTime - startTime;\n    const endCpuUsage = process.cpuUsage(startCpuUsage);\n    const memoryUsage = process.memoryUsage();\n\n    const performanceData: PerformanceData = {\n      requestId,\n      method: req.method,\n      path: req.route?.path || req.path,\n      statusCode: res.statusCode,\n      responseTime: Math.round(responseTime * 100) / 100, // 소수점 2자리\n      memoryUsage,\n      cpuUsage: endCpuUsage\n    };\n\n    // 성능 로그\n    logger.logPerformance(`${req.method} ${req.path}`, responseTime, {\n      requestId,\n      statusCode: res.statusCode,\n      memoryUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024), // MB\n      cpuUser: endCpuUsage.user,\n      cpuSystem: endCpuUsage.system\n    });\n\n    // Prometheus 메트릭 업데이트\n    prometheusMetrics.httpRequestDuration\n      .labels(req.method, req.route?.path || req.path, res.statusCode.toString())\n      .observe(responseTime / 1000); // 초 단위로 변환\n\n    prometheusMetrics.httpRequestsTotal\n      .labels(req.method, req.route?.path || req.path, res.statusCode.toString())\n      .inc();\n\n    // 메모리 사용량 메트릭\n    prometheusMetrics.memoryUsage.set(memoryUsage.heapUsed);\n\n    // 느린 요청 알림 (5초 이상)\n    if (responseTime > 5000) {\n      logger.warn('Slow request detected', {\n        requestId,\n        method: req.method,\n        path: req.path,\n        responseTime,\n        statusCode: res.statusCode\n      });\n    }\n\n    // 메모리 사용량 높은 경우 알림 (500MB 이상)\n    if (memoryUsage.heapUsed > 500 * 1024 * 1024) {\n      logger.warn('High memory usage detected', {\n        requestId,\n        heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024)\n      });\n    }\n  });\n\n  next();\n};\n\n// 요청 ID 생성\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// Request 타입 확장\ndeclare global {\n  namespace Express {\n    interface Request {\n      requestId: string;\n    }\n  }\n}\n```\n\n#### **<코드 18>** 데이터베이스 성능 최적화\n```typescript\n// src/utils/databaseOptimization.ts\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from './logger';\n\nclass DatabaseOptimizer {\n  constructor(private prisma: PrismaClient) {\n    this.setupQueryLogging();\n    this.setupConnectionPooling();\n  }\n\n  private setupQueryLogging(): void {\n    // 슬로우 쿼리 로깅\n    this.prisma.$use(async (params, next) => {\n      const start = Date.now();\n      const result = await next(params);\n      const duration = Date.now() - start;\n\n      // 1초 이상 걸린 쿼리 로깅\n      if (duration > 1000) {\n        logger.warn('Slow query detected', {\n          model: params.model,\n          action: params.action,\n          duration,\n          args: JSON.stringify(params.args, null, 2)\n        });\n      }\n\n      return result;\n    });\n  }\n\n  private setupConnectionPooling(): void {\n    // 커넥션 풀 설정은 DATABASE_URL에서 설정\n    // postgresql://user:pass@host:5432/db?connection_limit=20&pool_timeout=20\n  }\n\n  // 인덱스 최적화 제안\n  async analyzePerformance(): Promise<string[]> {\n    const suggestions: string[] = [];\n\n    try {\n      // 자주 사용되는 쿼리 패턴 분석\n      const caseQueries = await this.prisma.$queryRaw`\n        SELECT schemaname, tablename, attname, n_distinct, correlation\n        FROM pg_stats \n        WHERE tablename IN ('cases', 'patients', 'drugs', 'events')\n        ORDER BY n_distinct DESC;\n      `;\n\n      // 느린 쿼리 분석\n      const slowQueries = await this.prisma.$queryRaw`\n        SELECT query, mean_time, calls, total_time\n        FROM pg_stat_statements \n        WHERE mean_time > 1000\n        ORDER BY mean_time DESC\n        LIMIT 10;\n      `;\n\n      if (Array.isArray(caseQueries)) {\n        suggestions.push(`분석된 테이블: ${caseQueries.length}개`);\n      }\n\n      if (Array.isArray(slowQueries) && slowQueries.length > 0) {\n        suggestions.push(`느린 쿼리 발견: ${slowQueries.length}개`);\n        suggestions.push('인덱스 추가를 고려해보세요.');\n      }\n\n    } catch (error) {\n      logger.error('Database performance analysis failed', error);\n      suggestions.push('성능 분석 중 오류 발생');\n    }\n\n    return suggestions;\n  }\n\n  // 권장 인덱스 생성\n  async createRecommendedIndexes(): Promise<void> {\n    const indexes = [\n      // 케이스 검색 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_cases_status_created ON cases (status, created_at);',\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_cases_sender_updated ON cases (sender_id, updated_at);',\n      \n      // 환자 정보 검색 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_patients_initials ON patients (initials);',\n      \n      // 의약품 검색 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_drugs_name ON drugs USING gin (name gin_trgm_ops);',\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_drugs_meddra ON drugs (meddra_code);',\n      \n      // 이상사례 검색 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_events_verbatim ON events USING gin (verbatim_term gin_trgm_ops);',\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_events_pt_code ON events (pt_code);',\n      \n      // AI 예측 검색 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ai_predictions_case_confidence ON ai_predictions (case_id, confidence);',\n      \n      // 감사 로그 최적화\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs (timestamp);',\n      'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_audit_logs_user_action ON audit_logs (user_id, action);'\n    ];\n\n    for (const indexQuery of indexes) {\n      try {\n        await this.prisma.$executeRawUnsafe(indexQuery);\n        logger.info('Index created successfully', { query: indexQuery });\n      } catch (error) {\n        logger.error('Failed to create index', error, { query: indexQuery });\n      }\n    }\n  }\n\n  // 데이터베이스 통계 업데이트\n  async updateStatistics(): Promise<void> {\n    try {\n      await this.prisma.$executeRawUnsafe('ANALYZE;');\n      logger.info('Database statistics updated');\n    } catch (error) {\n      logger.error('Failed to update database statistics', error);\n    }\n  }\n\n  // 연결 상태 모니터링\n  async monitorConnections(): Promise<{\n    active: number;\n    idle: number;\n    total: number;\n  }> {\n    try {\n      const result = await this.prisma.$queryRaw<Array<{\n        state: string;\n        count: bigint;\n      }>>`\n        SELECT state, COUNT(*) as count\n        FROM pg_stat_activity \n        WHERE datname = current_database()\n        GROUP BY state;\n      `;\n\n      const connections = {\n        active: 0,\n        idle: 0,\n        total: 0\n      };\n\n      result.forEach(row => {\n        const count = Number(row.count);\n        if (row.state === 'active') {\n          connections.active = count;\n        } else if (row.state === 'idle') {\n          connections.idle = count;\n        }\n        connections.total += count;\n      });\n\n      return connections;\n    } catch (error) {\n      logger.error('Failed to monitor database connections', error);\n      return { active: 0, idle: 0, total: 0 };\n    }\n  }\n}\n\nexport const databaseOptimizer = new DatabaseOptimizer(new PrismaClient());\n```\n\n### 8.2 AI 모델 성능 최적화\n\n#### **<코드 19>** AI 모델 최적화 및 모니터링\n```python\n# src/ai/utils/model_optimizer.py\nimport torch\nimport torch.nn as nn\nfrom torch.quantization import quantize_dynamic\nimport time\nimport logging\nfrom typing import Dict, Any, List\nimport psutil\nimport GPUtil\nfrom dataclasses import dataclass\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass ModelPerformanceMetrics:\n    \"\"\"모델 성능 메트릭\"\"\"\n    inference_time: float\n    memory_usage: float\n    gpu_utilization: float\n    accuracy: float\n    throughput: float  # requests per second\n\nclass AIModelOptimizer:\n    \"\"\"AI 모델 성능 최적화 클래스\"\"\"\n    \n    def __init__(self):\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        self.optimization_cache = {}\n        \n    def optimize_model_for_inference(self, model: nn.Module, optimization_level: str = 'medium') -> nn.Module:\n        \"\"\"\n        추론을 위한 모델 최적화\n        \n        Args:\n            model: 최적화할 PyTorch 모델\n            optimization_level: 'low', 'medium', 'high'\n            \n        Returns:\n            최적화된 모델\n        \"\"\"\n        try:\n            logger.info(f\"Starting model optimization (level: {optimization_level})\")\n            \n            # 평가 모드로 설정\n            model.eval()\n            \n            if optimization_level in ['medium', 'high']:\n                # 동적 양자화 적용\n                model = self._apply_dynamic_quantization(model)\n                \n            if optimization_level == 'high':\n                # 더 강력한 최적화 적용\n                model = self._apply_advanced_optimization(model)\n            \n            # JIT 컴파일 (추론 속도 향상)\n            model = torch.jit.script(model)\n            \n            logger.info(\"Model optimization completed\")\n            return model\n            \n        except Exception as e:\n            logger.error(f\"Model optimization failed: {str(e)}\")\n            return model  # 최적화 실패 시 원본 모델 반환\n\n    def _apply_dynamic_quantization(self, model: nn.Module) -> nn.Module:\n        \"\"\"동적 양자화 적용\"\"\"\n        try:\n            quantized_model = quantize_dynamic(\n                model,\n                {nn.Linear, nn.LSTM, nn.GRU},  # 양자화할 레이어 타입\n                dtype=torch.qint8\n            )\n            \n            logger.info(\"Dynamic quantization applied\")\n            return quantized_model\n            \n        except Exception as e:\n            logger.warning(f\"Dynamic quantization failed: {str(e)}\")\n            return model\n\n    def _apply_advanced_optimization(self, model: nn.Module) -> nn.Module:\n        \"\"\"고급 최적화 기법 적용\"\"\"\n        try:\n            # 그래디언트 비활성화 (추론 시 메모리 절약)\n            for param in model.parameters():\n                param.requires_grad = False\n            \n            # 혼합 정밀도 최적화 (GPU에서)\n            if self.device.type == 'cuda':\n                model = model.half()  # FP16 사용\n                \n            logger.info(\"Advanced optimization applied\")\n            return model\n            \n        except Exception as e:\n            logger.warning(f\"Advanced optimization failed: {str(e)}\")\n            return model\n\n    async def benchmark_model_performance(\n        self, \n        model: nn.Module, \n        sample_inputs: List[torch.Tensor],\n        num_iterations: int = 100\n    ) -> ModelPerformanceMetrics:\n        \"\"\"\n        모델 성능 벤치마킹\n        \n        Args:\n            model: 벤치마킹할 모델\n            sample_inputs: 테스트용 입력 데이터\n            num_iterations: 반복 횟수\n            \n        Returns:\n            성능 메트릭\n        \"\"\"\n        logger.info(f\"Starting performance benchmark ({num_iterations} iterations)\")\n        \n        model.eval()\n        inference_times = []\n        \n        # GPU 메모리 사용량 측정 시작\n        if torch.cuda.is_available():\n            torch.cuda.reset_peak_memory_stats()\n            initial_gpu_memory = torch.cuda.memory_allocated()\n        \n        # CPU 메모리 사용량 측정 시작\n        initial_cpu_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n        \n        # 워밍업 (첫 몇 번의 추론은 제외)\n        with torch.no_grad():\n            for _ in range(10):\n                _ = model(sample_inputs[0])\n        \n        # 실제 벤치마크\n        with torch.no_grad():\n            for i in range(num_iterations):\n                input_tensor = sample_inputs[i % len(sample_inputs)]\n                \n                start_time = time.time()\n                _ = model(input_tensor)\n                end_time = time.time()\n                \n                inference_times.append(end_time - start_time)\n                \n                # GPU 동기화 (정확한 시간 측정을 위해)\n                if torch.cuda.is_available():\n                    torch.cuda.synchronize()\n        \n        # 성능 메트릭 계산\n        avg_inference_time = sum(inference_times) / len(inference_times)\n        throughput = 1.0 / avg_inference_time\n        \n        # 메모리 사용량 계산\n        if torch.cuda.is_available():\n            gpu_memory_used = (torch.cuda.max_memory_allocated() - initial_gpu_memory) / 1024 / 1024  # MB\n            gpu_utilization = self._get_gpu_utilization()\n        else:\n            gpu_memory_used = 0\n            gpu_utilization = 0\n            \n        final_cpu_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n        cpu_memory_used = final_cpu_memory - initial_cpu_memory\n        \n        metrics = ModelPerformanceMetrics(\n            inference_time=avg_inference_time * 1000,  # milliseconds\n            memory_usage=max(gpu_memory_used, cpu_memory_used),\n            gpu_utilization=gpu_utilization,\n            accuracy=0.0,  # 별도 평가 필요\n            throughput=throughput\n        )\n        \n        logger.info(f\"Benchmark completed - Avg inference time: {metrics.inference_time:.2f}ms, \"\n                   f\"Throughput: {metrics.throughput:.2f} req/s\")\n        \n        return metrics\n\n    def _get_gpu_utilization(self) -> float:\n        \"\"\"GPU 사용률 조회\"\"\"\n        try:\n            gpus = GPUtil.getGPUs()\n            if gpus:\n                return gpus[0].load * 100  # 첫 번째 GPU 사용률\n            return 0.0\n        except Exception:\n            return 0.0\n\n    async def optimize_batch_processing(\n        self, \n        model: nn.Module,\n        batch_sizes: List[int] = [1, 4, 8, 16, 32]\n    ) -> int:\n        \"\"\"\n        최적 배치 크기 찾기\n        \n        Args:\n            model: 모델\n            batch_sizes: 테스트할 배치 크기 리스트\n            \n        Returns:\n            최적 배치 크기\n        \"\"\"\n        logger.info(\"Optimizing batch size for processing\")\n        \n        best_batch_size = 1\n        best_throughput = 0.0\n        \n        for batch_size in batch_sizes:\n            try:\n                # 샘플 배치 생성 (실제 입력 크기에 맞게 조정 필요)\n                sample_batch = torch.randn(batch_size, 512)  # 예시 크기\n                \n                # 메모리 체크\n                if torch.cuda.is_available():\n                    torch.cuda.empty_cache()\n                    \n                start_time = time.time()\n                \n                with torch.no_grad():\n                    for _ in range(10):  # 10번 반복 테스트\n                        _ = model(sample_batch)\n                        \n                if torch.cuda.is_available():\n                    torch.cuda.synchronize()\n                    \n                end_time = time.time()\n                \n                # 처리량 계산 (samples per second)\n                total_samples = batch_size * 10\n                total_time = end_time - start_time\n                throughput = total_samples / total_time\n                \n                logger.info(f\"Batch size {batch_size}: {throughput:.2f} samples/sec\")\n                \n                if throughput > best_throughput:\n                    best_throughput = throughput\n                    best_batch_size = batch_size\n                    \n            except RuntimeError as e:\n                if \"out of memory\" in str(e):\n                    logger.warning(f\"OOM at batch size {batch_size}\")\n                    break  # 메모리 부족 시 중단\n                else:\n                    logger.error(f\"Error testing batch size {batch_size}: {str(e)}\")\n        \n        logger.info(f\"Optimal batch size: {best_batch_size} (throughput: {best_throughput:.2f} samples/sec)\")\n        return best_batch_size\n\n    def monitor_model_drift(\n        self,\n        current_accuracy: float,\n        baseline_accuracy: float,\n        drift_threshold: float = 0.05\n    ) -> Dict[str, Any]:\n        \"\"\"\n        모델 드리프트 모니터링\n        \n        Args:\n            current_accuracy: 현재 정확도\n            baseline_accuracy: 기준 정확도\n            drift_threshold: 드리프트 임계값\n            \n        Returns:\n            드리프트 분석 결과\n        \"\"\"\n        accuracy_drop = baseline_accuracy - current_accuracy\n        is_drifted = accuracy_drop > drift_threshold\n        \n        drift_info = {\n            'is_drifted': is_drifted,\n            'accuracy_drop': accuracy_drop,\n            'current_accuracy': current_accuracy,\n            'baseline_accuracy': baseline_accuracy,\n            'drift_threshold': drift_threshold,\n            'severity': self._calculate_drift_severity(accuracy_drop, drift_threshold)\n        }\n        \n        if is_drifted:\n            logger.warning(f\"Model drift detected! Accuracy dropped by {accuracy_drop:.3f}\")\n        \n        return drift_info\n\n    def _calculate_drift_severity(self, accuracy_drop: float, threshold: float) -> str:\n        \"\"\"드리프트 심각도 계산\"\"\"\n        if accuracy_drop <= threshold:\n            return 'none'\n        elif accuracy_drop <= threshold * 2:\n            return 'low'\n        elif accuracy_drop <= threshold * 4:\n            return 'medium'\n        else:\n            return 'high'\n\n# 전역 인스턴스\nmodel_optimizer = AIModelOptimizer()\n```\n\n---\n\n## 🔒 9. 보안 및 컴플라이언스\n\n### 9.1 보안 아키텍처\n\n#### **<표 11>** 보안 요구사항 매트릭스\n| 보안 영역 | 요구사항 | 구현 방법 | 준수 표준 |\n|----------|----------|-----------|-----------|\n| **인증/인가** | 다단계 인증 | OAuth 2.0 + TOTP | ISO 27001 |\n| **데이터 암# AI 기반 약물감시 시스템 소프트웨어 제작 사양서\n\n## 📋 문서 정보\n\n- **프로젝트명**: ICSR-AI (Individual Case Safety Report - AI)\n- **문서 버전**: v2.0\n- **작성일**: 2025년 9월 12일\n- **승인자**: 기술이사, PV 책임자\n- **문서 유형**: 소프트웨어 요구사항 명세서 (SRS)\n\n---\n\n## 🎯 1. 프로젝트 개요\n\n### 1.1 프로젝트 목표\n**약물감시업계의 ICSR 처리 과정을 AI로 자동화하여 업무 효율성 향상 및 규제 준수 보장**\n\n### 1.2 주요 성과 목표\n- **<표 1>** ICSR 처리 시간 75% 단축 (60분 → 15분)\n- **<표 2>** AI 자동화율 85% 달성\n- **<표 3>** 운영비용 40% 절감\n- **<표 4>** 처리 용량 300% 증가\n\n### 1.3 프로젝트 범위\n\n#### 포함 사항 (In-Scope)\n✅ ICSR 케이스 관리 시스템  \n✅ AI 기반 데이터 추출 및 분류  \n✅ MedDRA 자동 코딩  \n✅ E2B(R3) XML 생성 및 검증  \n✅ 규제기관 자동 제출  \n✅ 대시보드 및 리포팅  \n\n#### 제외 사항 (Out-of-Scope)  \n❌ 기존 레거시 시스템 마이그레이션  \n❌ 하드웨어 구매 및 설치  \n❌ 타사 시스템과의 직접 연동  \n\n---\n\n## 🏗️ 2. 시스템 아키텍처\n\n### 2.1 전체 시스템 구조도\n\n```mermaid\ngraph TB\n    A[Web Browser] --> B[Load Balancer]\n    B --> C[React Frontend]\n    C --> D[API Gateway]\n    D --> E[Microservices]\n    E --> F[AI Engine]\n    E --> G[Database Cluster]\n    E --> H[External APIs]\n    \n    subgraph \"Frontend Layer\"\n        C\n    end\n    \n    subgraph \"Backend Layer\"\n        D\n        E\n        I[Redis Cache]\n        J[Message Queue]\n    end\n    \n    subgraph \"AI/ML Layer\"\n        F\n        K[Model Registry]\n        L[Training Pipeline]\n    end\n    \n    subgraph \"Data Layer\"\n        G\n        M[File Storage]\n    end\n```\n\n### 2.2 기술 스택 매트릭스\n\n#### **<표 5>** Front-End 기술 스택\n| 구분 | 기술 | 버전 | 용도 |\n|------|------|------|------|\n| Framework | React | 18.2+ | UI 프레임워크 |\n| Language | TypeScript | 5.0+ | 타입 안정성 |\n| State Management | Redux Toolkit | 1.9+ | 전역 상태 관리 |\n| UI Library | Material-UI | 5.14+ | UI 컴포넌트 |\n| Build Tool | Vite | 4.4+ | 빌드 도구 |\n| Testing | Jest + RTL | Latest | 테스팅 |\n\n#### **<표 6>** Back-End 기술 스택\n| 구분 | 기술 | 버전 | 용도 |\n|------|------|------|------|\n| Runtime | Node.js | 20.x LTS | 서버 런타임 |\n| Framework | Express.js | 4.18+ | 웹 프레임워크 |\n| Language | TypeScript | 5.0+ | 타입 안정성 |\n| Database | PostgreSQL | 16.x | 메인 데이터베이스 |\n| Cache | Redis | 7.x | 캐싱 및 세션 |\n| ORM | Prisma | 5.x | 데이터베이스 ORM |\n\n#### **<표 7>** AI/ML 기술 스택\n| 구분 | 기술 | 버전 | 용도 |\n|------|------|------|------|\n| Runtime | Python | 3.11+ | AI/ML 런타임 |\n| Framework | FastAPI | 0.103+ | API 서버 |\n| ML Library | scikit-learn | 1.3+ | 전통적 ML |\n| NLP | Transformers | 4.33+ | 자연어 처리 |\n| Model Serving | MLflow | 2.6+ | 모델 관리 |\n| GPU Support | CUDA | 12.0+ | GPU 가속 |\n\n---\n\n## 📱 3. Front-End 상세 설계\n\n### 3.1 디렉토리 구조\n\n```\nsrc/\n├── components/          # 재사용 가능한 컴포넌트\n│   ├── common/         # 공통 컴포넌트\n│   ├── forms/          # 폼 컴포넌트\n│   └── charts/         # 차트 컴포넌트\n├── pages/              # 페이지 컴포넌트\n│   ├── dashboard/      # 대시보드\n│   ├── cases/          # ICSR 케이스 관리\n│   ├── meddra/         # MedDRA 관리\n│   └── reports/        # 리포트\n├── hooks/              # Custom React Hooks\n├── store/              # Redux Store\n├── services/           # API 서비스\n├── types/              # TypeScript 타입 정의\n├── utils/              # 유틸리티 함수\n└── constants/          # 상수 정의\n```\n\n### 3.2 주요 컴포넌트 설계\n\n#### **<코드 1>** ICSR 케이스 목록 컴포넌트\n```typescript\n// src/components/cases/CaseList.tsx\nimport React, { useState, useCallback } from 'react';\nimport {\n  Table, TableBody, TableCell, TableContainer, TableHead, \n  TableRow, Paper, Chip, IconButton, Tooltip\n} from '@mui/material';\nimport { Edit, Visibility, Send } from '@mui/icons-material';\nimport { ICSRCase, CaseStatus } from '../../types/case.types';\n\ninterface CaseListProps {\n  cases: ICSRCase[];\n  loading?: boolean;\n  onEdit: (caseId: string) => void;\n  onView: (caseId: string) => void;\n  onSubmit: (caseId: string) => void;\n}\n\nexport const CaseList: React.FC<CaseListProps> = ({\n  cases,\n  loading = false,\n  onEdit,\n  onView,\n  onSubmit\n}) => {\n  const getStatusColor = (status: CaseStatus): \"success\" | \"warning\" | \"error\" | \"info\" => {\n    switch (status) {\n      case 'COMPLETED': return 'success';\n      case 'IN_PROGRESS': return 'warning'; \n      case 'ERROR': return 'error';\n      default: return 'info';\n    }\n  };\n\n  const getStatusLabel = (status: CaseStatus): string => {\n    const labels = {\n      DRAFT: '작성중',\n      IN_PROGRESS: '처리중', \n      AI_PROCESSED: 'AI처리완료',\n      REVIEWED: '검토완료',\n      COMPLETED: '완료',\n      ERROR: '오류'\n    };\n    return labels[status] || status;\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>케이스 번호</TableCell>\n            <TableCell>환자 이니셜</TableCell>\n            <TableCell>의약품명</TableCell>\n            <TableCell>이상사례</TableCell>\n            <TableCell>상태</TableCell>\n            <TableCell>AI 신뢰도</TableCell>\n            <TableCell>수정일</TableCell>\n            <TableCell>작업</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {cases.map((caseItem) => (\n            <TableRow key={caseItem.id} hover>\n              <TableCell>{caseItem.caseNumber}</TableCell>\n              <TableCell>{caseItem.patient?.initials || 'N/A'}</TableCell>\n              <TableCell>{caseItem.drugs?.[0]?.name || 'N/A'}</TableCell>\n              <TableCell>\n                {caseItem.events?.[0]?.verbatimTerm || 'N/A'}\n              </TableCell>\n              <TableCell>\n                <Chip \n                  label={getStatusLabel(caseItem.status)}\n                  color={getStatusColor(caseItem.status)}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>\n                {caseItem.aiConfidence ? \n                  `${Math.round(caseItem.aiConfidence * 100)}%` : 'N/A'}\n              </TableCell>\n              <TableCell>\n                {new Date(caseItem.updatedAt).toLocaleDateString('ko-KR')}\n              </TableCell>\n              <TableCell>\n                <Tooltip title=\"보기\">\n                  <IconButton onClick={() => onView(caseItem.id)} size=\"small\">\n                    <Visibility />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"편집\">\n                  <IconButton onClick={() => onEdit(caseItem.id)} size=\"small\">\n                    <Edit />\n                  </IconButton>\n                </Tooltip>\n                {caseItem.status === 'REVIEWED' && (\n                  <Tooltip title=\"제출\">\n                    <IconButton onClick={() => onSubmit(caseItem.id)} size=\"small\">\n                      <Send />\n                    </IconButton>\n                  </Tooltip>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n```\n\n#### **<코드 2>** MedDRA 자동 매핑 컴포넌트\n```typescript\n// src/components/meddra/MedDRAMapper.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Autocomplete, TextField, Box, Typography, \n  Chip, LinearProgress, Alert\n} from '@mui/material';\nimport { Psychology, CheckCircle } from '@mui/icons-material';\nimport { useMedDRAMappingQuery } from '../../hooks/useMedDRA';\nimport { MedDRAMapping, MedDRAResponse } from '../../types/meddra.types';\n\ninterface MedDRAMapperProps {\n  verbatimTerm: string;\n  language: 'ko' | 'en';\n  onMappingSelect: (mapping: MedDRAMapping) => void;\n  disabled?: boolean;\n}\n\nexport const MedDRAMapper: React.FC<MedDRAMapperProps> = ({\n  verbatimTerm,\n  language,\n  onMappingSelect,\n  disabled = false\n}) => {\n  const [selectedMapping, setSelectedMapping] = useState<MedDRAMapping | null>(null);\n  \n  const {\n    data: mappings,\n    isLoading,\n    error,\n    refetch\n  } = useMedDRAMappingQuery({\n    verbatimTerm,\n    language,\n    enabled: !!verbatimTerm\n  });\n\n  const handleMappingChange = (\n    event: React.SyntheticEvent,\n    value: MedDRAMapping | null\n  ) => {\n    setSelectedMapping(value);\n    if (value) {\n      onMappingSelect(value);\n    }\n  };\n\n  const getConfidenceColor = (confidence: number): string => {\n    if (confidence >= 0.8) return '#4caf50'; // 녹색\n    if (confidence >= 0.6) return '#ff9800'; // 주황색\n    return '#f44336'; // 빨간색\n  };\n\n  const getConfidenceLabel = (confidence: number): string => {\n    if (confidence >= 0.8) return '높음';\n    if (confidence >= 0.6) return '중간';\n    return '낮음';\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle2\" gutterBottom>\n        <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />\n        AI MedDRA 매핑 결과\n      </Typography>\n      \n      {isLoading && (\n        <Box>\n          <LinearProgress />\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            AI가 MedDRA 코드를 분석중입니다...\n          </Typography>\n        </Box>\n      )}\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          MedDRA 매핑 중 오류가 발생했습니다. 다시 시도해주세요.\n        </Alert>\n      )}\n\n      {mappings && (\n        <Autocomplete\n          options={mappings}\n          value={selectedMapping}\n          onChange={handleMappingChange}\n          disabled={disabled}\n          getOptionLabel={(option) => \n            `${option.ptCode} - ${option.ptName} (${Math.round(option.confidence * 100)}%)`\n          }\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"MedDRA PT 선택\"\n              variant=\"outlined\"\n              placeholder=\"AI 추천 결과에서 선택하거나 직접 검색\"\n              helperText={selectedMapping ? \n                `선택된 코드: ${selectedMapping.ptCode}` : \n                '가장 높은 신뢰도의 결과를 선택하는 것을 권장합니다.'\n              }\n            />\n          )}\n          renderOption={(props, option) => (\n            <Box component=\"li\" {...props}>\n              <Box sx={{ flexGrow: 1 }}>\n                <Typography variant=\"subtitle2\">\n                  {option.ptCode} - {option.ptName}\n                </Typography>\n                <Typography variant=\"caption\" color=\"textSecondary\">\n                  SOC: {option.socName || 'N/A'}\n                </Typography>\n              </Box>\n              <Box sx={{ ml: 2 }}>\n                <Chip\n                  label={`${getConfidenceLabel(option.confidence)} ${Math.round(option.confidence * 100)}%`}\n                  size=\"small\"\n                  sx={{ \n                    bgcolor: getConfidenceColor(option.confidence),\n                    color: 'white'\n                  }}\n                />\n              </Box>\n            </Box>\n          )}\n          noOptionsText=\"검색 결과가 없습니다\"\n        />\n      )}\n\n      {selectedMapping && (\n        <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\n          <Typography variant=\"subtitle2\" sx={{ display: 'flex', alignItems: 'center' }}>\n            <CheckCircle sx={{ mr: 1, color: 'success.main' }} />\n            선택된 MedDRA 정보\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>PT Code:</strong> {selectedMapping.ptCode}\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>PT Name:</strong> {selectedMapping.ptName}\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>SOC:</strong> {selectedMapping.socName || 'N/A'}\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>AI 신뢰도:</strong> {Math.round(selectedMapping.confidence * 100)}%\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n```\n\n### 3.3 상태 관리 (Redux)\n\n#### **<코드 3>** Case Store 설계\n```typescript\n// src/store/slices/caseSlice.ts\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { caseService } from '../../services/caseService';\nimport { ICSRCase, CaseFilters, CreateCaseRequest } from '../../types/case.types';\n\ninterface CaseState {\n  cases: ICSRCase[];\n  currentCase: ICSRCase | null;\n  loading: boolean;\n  error: string | null;\n  filters: CaseFilters;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n}\n\nconst initialState: CaseState = {\n  cases: [],\n  currentCase: null,\n  loading: false,\n  error: null,\n  filters: {\n    status: undefined,\n    dateRange: undefined,\n    searchTerm: ''\n  },\n  pagination: {\n    page: 1,\n    limit: 20,\n    total: 0\n  }\n};\n\n// Async Thunks\nexport const fetchCases = createAsyncThunk(\n  'cases/fetchCases',\n  async (params: { filters?: CaseFilters; page?: number; limit?: number }) => {\n    const response = await caseService.getCases(params);\n    return response;\n  }\n);\n\nexport const createCase = createAsyncThunk(\n  'cases/createCase',\n  async (caseData: CreateCaseRequest) => {\n    const response = await caseService.createCase(caseData);\n    return response;\n  }\n);\n\nexport const processWithAI = createAsyncThunk(\n  'cases/processWithAI',\n  async ({ caseId, processType }: { caseId: string; processType: string }) => {\n    const response = await caseService.processWithAI(caseId, processType);\n    return response;\n  }\n);\n\n// Slice\nconst caseSlice = createSlice({\n  name: 'cases',\n  initialState,\n  reducers: {\n    setFilters: (state, action: PayloadAction<Partial<CaseFilters>>) => {\n      state.filters = { ...state.filters, ...action.payload };\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    setCurrentCase: (state, action: PayloadAction<ICSRCase | null>) => {\n      state.currentCase = action.payload;\n    },\n    updateCaseInList: (state, action: PayloadAction<ICSRCase>) => {\n      const index = state.cases.findIndex(c => c.id === action.payload.id);\n      if (index !== -1) {\n        state.cases[index] = action.payload;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Fetch Cases\n      .addCase(fetchCases.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchCases.fulfilled, (state, action) => {\n        state.loading = false;\n        state.cases = action.payload.cases;\n        state.pagination = action.payload.pagination;\n      })\n      .addCase(fetchCases.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || 'Failed to fetch cases';\n      })\n      \n      // Create Case\n      .addCase(createCase.fulfilled, (state, action) => {\n        state.cases.unshift(action.payload);\n        state.pagination.total += 1;\n      })\n      \n      // AI Processing\n      .addCase(processWithAI.pending, (state, action) => {\n        const caseId = action.meta.arg.caseId;\n        const caseIndex = state.cases.findIndex(c => c.id === caseId);\n        if (caseIndex !== -1) {\n          state.cases[caseIndex].status = 'IN_PROGRESS';\n        }\n      })\n      .addCase(processWithAI.fulfilled, (state, action) => {\n        const updatedCase = action.payload;\n        const caseIndex = state.cases.findIndex(c => c.id === updatedCase.id);\n        if (caseIndex !== -1) {\n          state.cases[caseIndex] = updatedCase;\n        }\n        if (state.currentCase?.id === updatedCase.id) {\n          state.currentCase = updatedCase;\n        }\n      });\n  }\n});\n\nexport const { setFilters, clearError, setCurrentCase, updateCaseInList } = caseSlice.actions;\nexport default caseSlice.reducer;\n```\n\n---\n\n## 🔧 4. Back-End 상세 설계\n\n### 4.1 프로젝트 구조\n\n```\nsrc/\n├── controllers/        # API 컨트롤러\n├── services/          # 비즈니스 로직\n├── models/            # 데이터 모델 (Prisma)\n├── middleware/        # 미들웨어\n├── routes/            # 라우트 정의\n├── utils/             # 유틸리티\n├── types/             # TypeScript 타입\n├── config/            # 설정\n└── tests/             # 테스트 파일\n```\n\n### 4.2 API 설계\n\n#### **<표 8>** RESTful API 엔드포인트\n| Method | Endpoint | 설명 | 인증 필요 |\n|--------|----------|------|-----------|\n| GET | /api/v1/cases | 케이스 목록 조회 | ✅ |\n| POST | /api/v1/cases | 새 케이스 생성 | ✅ |\n| GET | /api/v1/cases/:id | 특정 케이스 조회 | ✅ |\n| PUT | /api/v1/cases/:id | 케이스 수정 | ✅ |\n| POST | /api/v1/cases/:id/ai-process | AI 처리 요청 | ✅ |\n| GET | /api/v1/meddra/search | MedDRA 검색 | ✅ |\n| POST | /api/v1/meddra/mapping | MedDRA 자동 매핑 | ✅ |\n| POST | /api/v1/regulatory/submit | 규제기관 제출 | ✅ |\n\n#### **<코드 4>** Case Controller 구현\n```typescript\n// src/controllers/caseController.ts\nimport { Request, Response, NextFunction } from 'express';\nimport { CaseService } from '../services/caseService';\nimport { AIProcessingService } from '../services/aiProcessingService';\nimport { validationResult } from 'express-validator';\nimport { AppError } from '../utils/AppError';\n\nexport class CaseController {\n  constructor(\n    private caseService: CaseService,\n    private aiService: AIProcessingService\n  ) {}\n\n  // 케이스 목록 조회\n  getCases = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { page = 1, limit = 20, status, searchTerm, dateFrom, dateTo } = req.query;\n      \n      const filters = {\n        status: status as string,\n        searchTerm: searchTerm as string,\n        dateRange: dateFrom && dateTo ? {\n          from: new Date(dateFrom as string),\n          to: new Date(dateTo as string)\n        } : undefined\n      };\n\n      const result = await this.caseService.getCases({\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        filters,\n        userId: req.user.id\n      });\n\n      res.json({\n        success: true,\n        data: result,\n        message: 'Cases retrieved successfully'\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // 새 케이스 생성\n  createCase = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // 입력 검증\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        throw new AppError('Validation failed', 400, errors.array());\n      }\n\n      const caseData = {\n        ...req.body,\n        createdBy: req.user.id,\n        senderID: req.user.senderID\n      };\n\n      const newCase = await this.caseService.createCase(caseData);\n\n      res.status(201).json({\n        success: true,\n        data: newCase,\n        message: 'Case created successfully'\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // AI 처리 요청\n  processWithAI = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id: caseId } = req.params;\n      const { processType, options } = req.body;\n\n      // 케이스 존재 여부 확인\n      const existingCase = await this.caseService.getCaseById(caseId, req.user.id);\n      if (!existingCase) {\n        throw new AppError('Case not found', 404);\n      }\n\n      // AI 처리 시작\n      const processingJob = await this.aiService.processCase(caseId, processType, options);\n\n      res.json({\n        success: true,\n        data: {\n          jobId: processingJob.id,\n          status: 'started',\n          estimatedTime: processingJob.estimatedTime\n        },\n        message: 'AI processing started'\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // 케이스 상세 조회\n  getCaseById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const caseData = await this.caseService.getCaseById(id, req.user.id);\n      \n      if (!caseData) {\n        throw new AppError('Case not found', 404);\n      }\n\n      res.json({\n        success: true,\n        data: caseData,\n        message: 'Case retrieved successfully'\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // 케이스 업데이트\n  updateCase = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      // 입력 검증\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        throw new AppError('Validation failed', 400, errors.array());\n      }\n\n      const updatedCase = await this.caseService.updateCase(id, updateData, req.user.id);\n\n      res.json({\n        success: true,\n        data: updatedCase,\n        message: 'Case updated successfully'\n      });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n```\n\n### 4.3 비즈니스 로직 (Service Layer)\n\n#### **<코드 5>** Case Service 구현\n```typescript\n// src/services/caseService.ts\nimport { PrismaClient } from '@prisma/client';\nimport { AIProcessingService } from './aiProcessingService';\nimport { XMLGeneratorService } from './xmlGeneratorService';\nimport { ValidationService } from './validationService';\nimport { AppError } from '../utils/AppError';\nimport { \n  CreateCaseRequest, \n  UpdateCaseRequest, \n  CaseFilters, \n  ICSRCase \n} from '../types/case.types';\n\nexport class CaseService {\n  constructor(\n    private prisma: PrismaClient,\n    private aiService: AIProcessingService,\n    private xmlService: XMLGeneratorService,\n    private validationService: ValidationService\n  ) {}\n\n  async getCases(params: {\n    page: number;\n    limit: number;\n    filters?: CaseFilters;\n    userId: string;\n  }) {\n    const { page, limit, filters, userId } = params;\n    const offset = (page - 1) * limit;\n\n    // 권한에 따른 필터링\n    const whereClause = this.buildWhereClause(filters, userId);\n\n    const [cases, total] = await Promise.all([\n      this.prisma.case.findMany({\n        skip: offset,\n        take: limit,\n        where: whereClause,\n        include: {\n          patient: {\n            select: {\n              initials: true,\n              age: true,\n              gender: true\n            }\n          },\n          drugs: {\n            select: {\n              name: true,\n              meddraCode: true,\n              dose: true,\n              unit: true\n            }\n          },\n          events: {\n            select: {\n              verbatimTerm: true,\n              ptCode: true,\n              ptName: true,\n              seriousness: true\n            }\n          },\n          aiPredictions: {\n            select: {\n              confidence: true,\n              modelVersion: true\n            },\n            orderBy: {\n              createdAt: 'desc'\n            },\n            take: 1\n          }\n        },\n        orderBy: {\n          updatedAt: 'desc'\n        }\n      }),\n      this.prisma.case.count({ where: whereClause })\n    ]);\n\n    // AI 신뢰도 추가\n    const casesWithConfidence = cases.map(c => ({\n      ...c,\n      aiConfidence: c.aiPredictions[0]?.confidence || null\n    }));\n\n    return {\n      cases: casesWithConfidence,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    };\n  }\n\n  async createCase(data: CreateCaseRequest): Promise<ICSRCase> {\n    try {\n      // 케이스 번호 생성\n      const caseNumber = await this.generateCaseNumber();\n\n      // 트랜잭션으로 케이스와 관련 데이터 생성\n      const newCase = await this.prisma.$transaction(async (tx) => {\n        // 메인 케이스 생성\n        const caseRecord = await tx.case.create({\n          data: {\n            caseNumber,\n            senderID: data.senderID,\n            receiverID: data.receiverID || 'MFDS-O-KR',\n            reportType: data.reportType || 'INITIAL',\n            status: 'DRAFT',\n            createdBy: data.createdBy,\n            \n            // 환자 정보 생성\n            patient: data.patient ? {\n              create: {\n                initials: data.patient.initials,\n                age: data.patient.age,\n                gender: data.patient.gender,\n                medicalHistory: data.patient.medicalHistory\n              }\n            } : undefined,\n            \n            // 의약품 정보 생성\n            drugs: data.drugs ? {\n              create: data.drugs.map(drug => ({\n                name: drug.name,\n                activeIngredient: drug.activeIngredient,\n                dose: drug.dose,\n                unit: drug.unit,\n                route: drug.route,\n                indication: drug.indication\n              }))\n            } : undefined,\n            \n            // 이상사례 정보 생성\n            events: data.events ? {\n              create: data.events.map(event => ({\n                verbatimTerm: event.verbatimTerm,\n                onsetDate: event.onsetDate,\n                seriousness: event.seriousness,\n                outcome: event.outcome\n              }))\n            } : undefined\n          },\n          include: {\n            patient: true,\n            drugs: true,\n            events: true\n          }\n        });\n\n        // 감사 로그 생성\n        await tx.auditLog.create({\n          data: {\n            caseId: caseRecord.id,\n            userId: data.createdBy,\n            action: 'CREATE_CASE',\n            details: { caseNumber },\n            timestamp: new Date()\n          }\n        });\n\n        return caseRecord;\n      });\n\n      return newCase;\n    } catch (error) {\n      throw new AppError('Failed to create case', 500, error);\n    }\n  }\n\n  async updateCase(caseId: string, data: UpdateCaseRequest, userId: string): Promise<ICSRCase> {\n    try {\n      // 권한 확인\n      await this.checkCasePermission(caseId, userId);\n\n      const updatedCase = await this.prisma.$transaction(async (tx) => {\n        // 케이스 업데이트\n        const updated = await tx.case.update({\n          where: { id: caseId },\n          data: {\n            status: data.status,\n            updatedBy: userId,\n            updatedAt: new Date(),\n            \n            // 환자 정보 업데이트\n            patient: data.patient ? {\n              upsert: {\n                create: data.patient,\n                update: data.patient\n              }\n            } : undefined\n          },\n          include: {\n            patient: true,\n            drugs: true,\n            events: true,\n            aiPredictions: {\n              orderBy: { createdAt: 'desc' },\n              take: 1\n            }\n          }\n        });\n\n        // 의약품 정보 업데이트\n        if (data.drugs) {\n          await tx.drug.deleteMany({ where: { caseId } });\n          await tx.drug.createMany({\n            data: data.drugs.map(drug => ({ ...drug, caseId }))\n          });\n        }\n\n        // 이상사례 정보 업데이트\n        if (data.events) {\n          await tx.event.deleteMany({ where: { caseId } });\n          await tx.event.createMany({\n            data: data.events.map(event => ({ ...event, caseId }))\n          });\n        }\n\n        // 감사 로그\n        await tx.auditLog.create({\n          data: {\n            caseId,\n            userId,\n            action: 'UPDATE_CASE',\n            details: data,\n            timestamp: new Date()\n          }\n        });\n\n        return updated;\n      });\n\n      return updatedCase;\n    } catch (error) {\n      throw new AppError('Failed to update case', 500, error);\n    }\n  }\n\n  private buildWhereClause(filters?: CaseFilters, userId?: string) {\n    const where: any = {};\n\n    // 사용자별 권한 필터링\n    if (userId) {\n      where.OR = [\n        { createdBy: userId },\n        { assignedTo: userId },\n        // 관리자 권한 확인은 middleware에서 처리\n      ];\n    }\n\n    if (filters) {\n      if (filters.status) {\n        where.status = filters.status;\n      }\n\n      if (filters.searchTerm) {\n        where.OR = [\n          { caseNumber: { contains: filters.searchTerm } },\n          { patient: { initials: { contains: filters.searchTerm } } },\n          { drugs: { some: { name: { contains: filters.searchTerm } } } }\n        ];\n      }\n\n      if (filters.dateRange) {\n        where.createdAt = {\n          gte: filters.dateRange.from,\n          lte: filters.dateRange.to\n        };\n      }\n    }\n\n    return where;\n  }\n\n  private async generateCaseNumber(): Promise<string> {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    \n    // 연월별 카운터 조회/증가\n    const counter = await this.prisma.caseCounter.upsert({\n      where: { yearMonth: `${year}${month}` },\n      update: { count: { increment: 1 } },\n      create: { yearMonth: `${year}${month}`, count: 1 }\n    });\n\n    return `KR${year}${month}${String(counter.count).padStart(4, '0')}`;\n  }\n\n  private async checkCasePermission(caseId: string, userId: string): Promise<void> {\n    const caseData = await this.prisma.case.findUnique({\n      where: { id: caseId },\n      select: { createdBy: true, assignedTo: true }\n    });\n\n    if (!caseData) {\n      throw new AppError('Case not found', 404);\n    }\n\n    if (caseData.createdBy !== userId && caseData.assignedTo !== userId) {\n      throw new AppError('Access denied', 403);\n    }\n  }\n}\n```\n\n### 4.4 데이터베이스 설계 (Prisma Schema)\n\n#### **<코드 6>** Prisma 스키마 정의\n```prisma\n// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            String   @id @default(cuid())\n  email         String   @unique\n  username      String   @unique\n  firstName     String\n  lastName      String\n  role          Role     @default(USER)\n  senderID      String?  // MFDS Sender ID\n  organization  String?\n  isActive      Boolean  @default(true)\n  lastLoginAt   DateTime?\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n  \n  // Relations\n  createdCases  Case[]   @relation(\"CaseCreatedBy\")\n  assignedCases Case[]   @relation(\"CaseAssignedTo\")\n  auditLogs     AuditLog[]\n  \n  @@map(\"users\")\n}\n\nmodel Case {\n  id              String      @id @default(cuid())\n  caseNumber      String      @unique\n  senderID        String\n  receiverID      String\n  reportType      ReportType  @default(INITIAL)\n  status          CaseStatus  @default(DRAFT)\n  priority        Priority    @default(NORMAL)\n  \n  // AI Processing\n  aiProcessed     Boolean     @default(false)\n  aiProcessedAt   DateTime?\n  aiModelVersion  String?\n  \n  // Tracking\n  createdBy       String\n  createdUser     User        @relation(\"CaseCreatedBy\", fields: [createdBy], references: [id])\n  assignedTo      String?\n  assignedUser    User?       @relation(\"CaseAssignedTo\", fields: [assignedTo], references: [id])\n  \n  // Timestamps\n  createdAt       DateTime    @default(now())\n  updatedAt       DateTime    @updatedAt\n  submittedAt     DateTime?\n  \n  // Relations\n  patient         Patient?\n  drugs           Drug[]\n  events          Event[]\n  aiPredictions   AIPrediction[]\n  submissions     RegulatorySubmission[]\n  auditLogs       AuditLog[]\n  attachments     Attachment[]\n  \n  @@map(\"cases\")\n  @@index([senderID])\n  @@index([status])\n  @@index([createdAt])\n}\n\nmodel Patient {\n  id              String    @id @default(cuid())\n  caseId          String    @unique\n  case            Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  \n  // Patient Information (Encrypted)\n  initials        String\n  dateOfBirth     DateTime?\n  age             Int?\n  ageUnit         AgeUnit   @default(YEARS)\n  gender          Gender?\n  weight          Float?\n  height          Float?\n  \n  // Medical History\n  medicalHistory  String?   // Encrypted JSON\n  allergies       String?   // Encrypted JSON\n  concomitantMeds String?   // Encrypted JSON\n  \n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n  \n  @@map(\"patients\")\n}\n\nmodel Drug {\n  id                  String    @id @default(cuid())\n  caseId              String\n  case                Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  \n  // Drug Information\n  name                String\n  activeIngredient    String?\n  strength            String?\n  formulation         String?\n  manufacturer        String?\n  batchLotNumber      String?\n  \n  // Dosing Information\n  dose                String?\n  unit                String?\n  frequency           String?\n  route               String?\n  startDate           DateTime?\n  endDate             DateTime?\n  \n  // Indication and Action\n  indication          String?\n  actionTaken         String?\n  \n  // MedDRA Coding\n  meddraCode          String?\n  meddraVersion       String?\n  \n  // Korean Specific\n  koreanProductCode   String?   // 품목기준코드\n  \n  createdAt           DateTime  @default(now())\n  updatedAt           DateTime  @updatedAt\n  \n  @@map(\"drugs\")\n  @@index([caseId])\n}\n\nmodel Event {\n  id              String      @id @default(cuid())\n  caseId          String\n  case            Case        @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  \n  // Event Description\n  verbatimTerm    String\n  description     String?\n  \n  // Timing\n  onsetDate       DateTime?\n  endDate         DateTime?\n  duration        String?\n  \n  // Severity and Outcome\n  seriousness     Seriousness @default(NON_SERIOUS)\n  severity        Severity?\n  outcome         Outcome?\n  \n  // MedDRA Coding\n  ptCode          String?\n  ptName          String?\n  socCode         String?\n  socName         String?\n  meddraVersion   String?\n  \n  // Causality Assessment\n  causalityWHO    String?     // WHO-UMC Scale\n  causalityKRCT   String?     // KRCT Scale\n  \n  createdAt       DateTime    @default(now())\n  updatedAt       DateTime    @updatedAt\n  \n  @@map(\"events\")\n  @@index([caseId])\n}\n\nmodel AIPrediction {\n  id            String    @id @default(cuid())\n  caseId        String\n  case          Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  \n  modelName     String\n  modelVersion  String\n  prediction    Json      // AI 예측 결과 (JSON)\n  confidence    Float     // 0.0 - 1.0\n  processingTime Float?   // 처리 시간 (seconds)\n  \n  // Human Review\n  humanReviewed Boolean   @default(false)\n  reviewedBy    String?\n  reviewedAt    DateTime?\n  accepted      Boolean?\n  feedback      String?\n  \n  createdAt     DateTime  @default(now())\n  \n  @@map(\"ai_predictions\")\n  @@index([caseId])\n  @@index([modelName, modelVersion])\n}\n\nmodel RegulatorySubmission {\n  id              String            @id @default(cuid())\n  caseId          String\n  case            Case              @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  \n  authority       String            // MFDS, FDA, EMA, etc.\n  submissionType  SubmissionType\n  xmlContent      String            // Generated XML\n  \n  status          SubmissionStatus  @default(PENDING)\n  submittedAt     DateTime?\n  acknowledgedAt  DateTime?\n  ackMessage      String?           // ACK/NACK message\n  \n  // Retry Logic\n  retryCount      Int               @default(0)\n  maxRetries      Int               @default(3)\n  nextRetryAt     DateTime?\n  \n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  \n  @@map(\"regulatory_submissions\")\n  @@index([caseId])\n  @@index([authority])\n  @@index([status])\n}\n\nmodel AuditLog {\n  id          String    @id @default(cuid())\n  caseId      String?\n  case        Case?     @relation(fields: [caseId], references: [id], onDelete: Cascade)\n  userId      String\n  user        User      @relation(fields: [userId], references: [id])\n  \n  action      String    // CREATE_CASE, UPDATE_CASE, SUBMIT_CASE, etc.\n  details     Json?     // Action details\n  ipAddress   String?\n  userAgent   String?\n  \n  timestamp   DateTime  @default(now())\n  \n  @@map(\"audit_logs\")\n  @@index([caseId])\n  @@index([userId])\n  @@index([timestamp])\n}\n\nmodel CaseCounter {\n  yearMonth   String    @id  // YYYYMM format\n  count       Int       @default(0)\n  \n  @@map(\"case_counters\")\n}\n\n// Enums\nenum Role {\n  SUPER_ADMIN\n  ADMIN\n  MANAGER\n  REVIEWER\n  USER\n}\n\nenum CaseStatus {\n  DRAFT\n  IN_PROGRESS\n  AI_PROCESSED\n  REVIEWED\n  APPROVED\n  SUBMITTED\n  COMPLETED\n  ERROR\n  REJECTED\n}\n\nenum ReportType {\n  INITIAL\n  FOLLOWUP\n  CORRECTION\n  NULLIFICATION\n}\n\nenum Priority {\n  LOW\n  NORMAL\n  HIGH\n  URGENT\n}\n\nenum Gender {\n  MALE\n  FEMALE\n  UNKNOWN\n}\n\nenum AgeUnit {\n  YEARS\n  MONTHS\n  WEEKS\n  DAYS\n  HOURS\n}\n\nenum Seriousness {\n  SERIOUS\n  NON_SERIOUS\n}\n\nenum Severity {\n  MILD\n  MODERATE\n  SEVERE\n}\n\nenum Outcome {\n  RECOVERED\n  RECOVERING\n  NOT_RECOVERED\n  RECOVERED_WITH_SEQUELAE\n  FATAL\n  UNKNOWN\n}\n\nenum SubmissionType {\n  INITIAL\n  FOLLOWUP\n  CORRECTION\n  NULLIFICATION\n}\n\nenum SubmissionStatus {\n  PENDING\n  SUBMITTED\n  ACKNOWLEDGED\n  REJECTED\n  ERROR\n}\n```\n\n---\n\n## 🤖 5. AI Engine 상세 설계\n\n### 5.1 AI 서비스 아키텍처\n\n#### **<코드 7>** AI Processing Service\n```python\n# src/ai/services/ai_processing_service.py\nimport asyncio\nimport logging\nfrom typing import Dict, List, Optional, Any\nfrom datetime import datetime\n\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\nfrom sentence_transformers import SentenceTransformer\nimport spacy\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\n\nfrom ..models.meddra_mapper import MedDRAMapper\nfrom ..models.causality_assessor import CausalityAssessor\nfrom ..models.seriousness_classifier import SeriousnessClassifier\nfrom ..utils.text_preprocessor import TextPreprocessor\nfrom ..config import AI_CONFIG\n\nlogger = logging.getLogger(__name__)\n\nclass AIProcessingService:\n    \"\"\"AI 기반 ICSR 처리 서비스\"\"\"\n    \n    def __init__(self):\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        self.models = {}\n        self.tokenizers = {}\n        self.text_preprocessor = TextPreprocessor()\n        \n        # NLP 모델 로드\n        self.nlp = spacy.load(\"ko_core_news_sm\")  # 한국어 모델\n        self.nlp_en = spacy.load(\"en_core_web_sm\")  # 영어 모델\n        \n        # 초기화\n        self._load_models()\n        \n    def _load_models(self):\n        \"\"\"AI 모델들을 메모리에 로드\"\"\"\n        try:\n            logger.info(\"Loading AI models...\")\n            \n            # MedDRA 매핑 모델\n            self.meddra_mapper = MedDRAMapper(\n                model_path=AI_CONFIG['MEDDRA_MODEL_PATH'],\n                device=self.device\n            )\n            \n            # 인과관계 평가 모델\n            self.causality_assessor = CausalityAssessor(\n                model_path=AI_CONFIG['CAUSALITY_MODEL_PATH'],\n                device=self.device\n            )\n            \n            # 중대성 분류 모델\n            self.seriousness_classifier = SeriousnessClassifier(\n                model_path=AI_CONFIG['SERIOUSNESS_MODEL_PATH'],\n                device=self.device\n            )\n            \n            # BioBERT 토크나이저 및 모델\n            self.tokenizer = AutoTokenizer.from_pretrained(\n                'dmis-lab/biobert-base-cased-v1.1'\n            )\n            \n            logger.info(\"All AI models loaded successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Error loading AI models: {str(e)}\")\n            raise\n\n    async def process_case_data(\n        self, \n        case_data: Dict[str, Any], \n        process_types: List[str]\n    ) -> Dict[str, Any]:\n        \"\"\"\n        케이스 데이터를 AI로 처리\n        \n        Args:\n            case_data: ICSR 케이스 데이터\n            process_types: 처리할 AI 작업 유형 리스트\n                          ['extract', 'classify', 'meddra', 'causality', 'validate']\n        \n        Returns:\n            처리 결과 딕셔너리\n        \"\"\"\n        start_time = datetime.now()\n        results = {\n            'case_id': case_data.get('id'),\n            'processed_at': start_time,\n            'processing_time': 0,\n            'results': {},\n            'confidence_scores': {},\n            'errors': []\n        }\n        \n        try:\n            # 병렬 처리를 위한 태스크 생성\n            tasks = []\n            \n            if 'extract' in process_types:\n                tasks.append(self._extract_medical_entities(case_data))\n                \n            if 'classify' in process_types:\n                tasks.append(self._classify_case_attributes(case_data))\n                \n            if 'meddra' in process_types:\n                tasks.append(self._map_to_meddra(case_data))\n                \n            if 'causality' in process_types:\n                tasks.append(self._assess_causality(case_data))\n                \n            if 'validate' in process_types:\n                tasks.append(self._validate_data_quality(case_data))\n            \n            # 병렬 실행\n            task_results = await asyncio.gather(*tasks, return_exceptions=True)\n            \n            # 결과 통합\n            for i, result in enumerate(task_results):\n                if isinstance(result, Exception):\n                    results['errors'].append(str(result))\n                else:\n                    results['results'].update(result)\n            \n            # 전체 신뢰도 점수 계산\n            confidence_scores = [\n                score for score in results.get('confidence_scores', {}).values()\n                if isinstance(score, (int, float))\n            ]\n            \n            if confidence_scores:\n                results['overall_confidence'] = sum(confidence_scores) / len(confidence_scores)\n            else:\n                results['overall_confidence'] = 0.0\n            \n            # 처리 시간 계산\n            end_time = datetime.now()\n            results['processing_time'] = (end_time - start_time).total_seconds()\n            \n            logger.info(\n                f\"Case {case_data.get('id')} processed in \"\n                f\"{results['processing_time']:.2f} seconds\"\n            )\n            \n        except Exception as e:\n            logger.error(f\"Error processing case {case_data.get('id')}: {str(e)}\")\n            results['errors'].append(str(e))\n        \n        return results\n\n    async def _extract_medical_entities(self, case_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"의료 개체명 추출\"\"\"\n        try:\n            results = {\n                'extracted_entities': {},\n                'confidence_scores': {}\n            }\n            \n            # 자유텍스트 필드들에서 개체명 추출\n            text_fields = [\n                case_data.get('narrative', ''),\n                case_data.get('medical_history', ''),\n                case_data.get('event_description', '')\n            ]\n            \n            full_text = ' '.join(filter(None, text_fields))\n            \n            if not full_text.strip():\n                return results\n            \n            # 언어 감지\n            language = self._detect_language(full_text)\n            nlp_model = self.nlp if language == 'ko' else self.nlp_en\n            \n            # 텍스트 전처리\n            processed_text = self.text_preprocessor.preprocess(full_text, language)\n            \n            # spaCy를 사용한 개체명 인식\n            doc = nlp_model(processed_text)\n            \n            entities = {\n                'drugs': [],\n                'symptoms': [],\n                'medical_conditions': [],\n                'procedures': [],\n                'dates': [],\n                'persons': [],\n                'organizations': []\n            }\n            \n            for ent in doc.ents:\n                entity_info = {\n                    'text': ent.text,\n                    'label': ent.label_,\n                    'start': ent.start_char,\n                    'end': ent.end_char,\n                    'confidence': 0.8  # spaCy confidence placeholder\n                }\n                \n                # 엔티티 유형별 분류\n                if ent.label_ in ['DRUG', 'MEDICATION']:\n                    entities['drugs'].append(entity_info)\n                elif ent.label_ in ['SYMPTOM', 'DISEASE', 'CONDITION']:\n                    entities['symptoms'].append(entity_info)\n                elif ent.label_ in ['DATE', 'TIME']:\n                    entities['dates'].append(entity_info)\n                elif ent.label_ in ['PERSON']:\n                    entities['persons'].append(entity_info)\n                elif ent.label_ in ['ORG']:\n                    entities['organizations'].append(entity_info)\n            \n            # 규칙 기반 추가 추출\n            drug_entities = await self._extract_drugs_with_rules(processed_text)\n            entities['drugs'].extend(drug_entities)\n            \n            # 중복 제거\n            for category in entities:\n                entities[category] = self._remove_duplicate_entities(entities[category])\n            \n            results['extracted_entities'] = entities\n            results['confidence_scores']['extraction'] = 0.85\n            \n            return results\n            \n        except Exception as e:\n            logger.error(f\"Error in entity extraction: {str(e)}\")\n            raise\n\n    async def _map_to_meddra(self, case_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"MedDRA 자동 매핑\"\"\"\n        try:\n            results = {\n                'meddra_mappings': [],\n                'confidence_scores': {}\n            }\n            \n            # 이상사례 용어들 추출\n            adverse_events = []\n            \n            # 케이스 데이터에서 이상사례 용어 수집\n            if 'events' in case_data:\n                for event in case_data['events']:\n                    if event.get('verbatim_term'):\n                        adverse_events.append({\n                            'verbatim_term': event['verbatim_term'],\n                            'description': event.get('description', ''),\n                            'event_id': event.get('id')\n                        })\n            \n            if not adverse_events:\n                return results\n            \n            # 각 이상사례에 대해 MedDRA 매핑 수행\n            for event in adverse_events:\n                mappings = await self.meddra_mapper.map_term(\n                    verbatim_term=event['verbatim_term'],\n                    context=event.get('description', ''),\n                    top_k=5\n                )\n                \n                event_mapping = {\n                    'event_id': event.get('event_id'),\n                    'verbatim_term': event['verbatim_term'],\n                    'suggested_mappings': mappings\n                }\n                \n                results['meddra_mappings'].append(event_mapping)\n            \n            # 전체 매핑 신뢰도 계산\n            all_confidences = []\n            for mapping in results['meddra_mappings']:\n                for suggestion in mapping['suggested_mappings']:\n                    all_confidences.append(suggestion['confidence'])\n            \n            if all_confidences:\n                results['confidence_scores']['meddra_mapping'] = (\n                    sum(all_confidences) / len(all_confidences)\n                )\n            \n            return results\n            \n        except Exception as e:\n            logger.error(f\"Error in MedDRA mapping: {str(e)}\")\n            raise\n\n    async def _assess_causality(self, case_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"인과관계 자동 평가\"\"\"\n        try:\n            results = {\n                'causality_assessments': [],\n                'confidence_scores': {}\n            }\n            \n            if not case_data.get('drugs') or not case_data.get('events'):\n                return results\n            \n            # 약물-이상사례 쌍별 인과관계 평가\n            for drug in case_data['drugs']:\n                for event in case_data['events']:\n                    assessment = await self.causality_assessor.assess(\n                        drug_info=drug,\n                        event_info=event,\n                        patient_info=case_data.get('patient', {}),\n                        timing_info={\n                            'drug_start': drug.get('start_date'),\n                            'drug_end': drug.get('end_date'),\n                            'event_onset': event.get('onset_date'),\n                            'event_end': event.get('end_date')\n                        }\n                    )\n                    \n                    results['causality_assessments'].append({\n                        'drug_id': drug.get('id'),\n                        'drug_name': drug.get('name'),\n                        'event_id': event.get('id'),\n                        'event_term': event.get('verbatim_term'),\n                        'who_umc_scale': assessment['who_umc'],\n                        'krct_scale': assessment['krct'],\n                        'confidence': assessment['confidence'],\n                        'reasoning': assessment['reasoning']\n                    })\n            \n            # 평균 신뢰도 계산\n            confidences = [\n                assessment['confidence'] \n                for assessment in results['causality_assessments']\n            ]\n            \n            if confidences:\n                results['confidence_scores']['causality'] = sum(confidences) / len(confidences)\n            \n            return results\n            \n        except Exception as e:\n            logger.error(f\"Error in causality assessment: {str(e)}\")\n            raise\n\n    def _detect_language(self, text: str) -> str:\n        \"\"\"텍스트 언어 감지\"\"\"\n        try:\n            # 한글 문자 비율 계산\n            korean_chars = sum(1 for char in text if '\\uac00' <= char <= '\\ud7a3')\n            total_chars = len(text.replace(' ', ''))\n            \n            if total_chars == 0:\n                return 'en'\n            \n            korean_ratio = korean_chars / total_chars\n            return 'ko' if korean_ratio > 0.3 else 'en'\n            \n        except Exception:\n            return 'en'  # 기본값\n\n    def _remove_duplicate_entities(self, entities: List[Dict]) -> List[Dict]:\n        \"\"\"중복 개체 제거\"\"\"\n        seen = set()\n        unique_entities = []\n        \n        for entity in entities:\n            key = (entity['text'].lower(), entity['label'])\n            if key not in seen:\n                seen.add(key)\n                unique_entities.append(entity)\n        \n        return unique_entities\n\n    async def _extract_drugs_with_rules(self, text: str) -> List[Dict]:\n        \"\"\"규칙 기반 의약품 추출\"\"\"\n        # 의약품명 패턴 매칭\n        import re\n        \n        drug_patterns = [\n            r'\\b([A-Z][a-z]+(?:cillin|mycin|prine|zole|statin))\\b',  # 일반적인 의약품 접미사\n            r'\\b(\\w+(?:정|캡슐|시럽|연고|주사))\\b',  # 한국어 제형\n        ]\n        \n        extracted_drugs = []\n        for pattern in drug_patterns:\n            matches = re.finditer(pattern, text, re.IGNORECASE)\n            for match in matches:\n                extracted_drugs.append({\n                    'text': match.group(1),\n                    'label': 'DRUG',\n                    'start': match.start(),\n                    'end': match.end(),\n                    'confidence': 0.7\n                })\n        \n        return extracted_drugs\n```\n\n#### **<코드 8>** MedDRA 매핑 모델\n```python\n# src/ai/models/meddra_mapper.py\nimport torch\nimport torch.nn as nn\nfrom transformers import AutoModel, AutoTokenizer\nfrom sentence_transformers import SentenceTransformer\nimport pickle\nimport numpy as np\nfrom typing import List, Dict, Tuple\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass MedDRAMapper:\n    \"\"\"MedDRA 자동 매핑을 위한 AI 모델\"\"\"\n    \n    def __init__(self, model_path: str, device: torch.device):\n        self.device = device\n        self.model_path = model_path\n        \n        # 모델 및 리소스 로드\n        self._load_resources()\n        \n    def _load_resources(self):\n        \"\"\"필요한 리소스들 로드\"\"\"\n        try:\n            # Sentence Transformer 모델 (의미적 유사도)\n            self.sentence_model = SentenceTransformer(\n                'sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'\n            ).to(self.device)\n            \n            # MedDRA 사전 로드\n            with open(f'{self.model_path}/meddra_dict.pkl', 'rb') as f:\n                self.meddra_dict = pickle.load(f)\n            \n            # 사전 계산된 MedDRA PT 임베딩 로드\n            self.meddra_embeddings = np.load(f'{self.model_path}/meddra_embeddings.npy')\n            \n            # PT 코드 -> 인덱스 매핑\n            with open(f'{self.model_path}/pt_to_idx.pkl', 'rb') as f:\n                self.pt_to_idx = pickle.load(f)\n            \n            # 인덱스 -> PT 정보 매핑\n            with open(f'{self.model_path}/idx_to_pt.pkl', 'rb') as f:\n                self.idx_to_pt = pickle.load(f)\n            \n            # 한국어-영어 번역 매핑 (선택적)\n            try:\n                with open(f'{self.model_path}/ko_en_mapping.pkl', 'rb') as f:\n                    self.ko_en_mapping = pickle.load(f)\n            except FileNotFoundError:\n                self.ko_en_mapping = {}\n            \n            logger.info(\"MedDRA mapping resources loaded successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Error loading MedDRA resources: {str(e)}\")\n            raise\n\n    async def map_term(\n        self, \n        verbatim_term: str, \n        context: str = \"\",\n        top_k: int = 5,\n        min_confidence: float = 0.5\n    ) -> List[Dict]:\n        \"\"\"\n        Verbatim term을 MedDRA PT로 매핑\n        \n        Args:\n            verbatim_term: 원본 이상사례 용어\n            context: 추가 컨텍스트 정보\n            top_k: 반환할 상위 매핑 개수\n            min_confidence: 최소 신뢰도 임계값\n            \n        Returns:\n            매핑 결과 리스트\n        \"\"\"\n        try:\n            # 입력 텍스트 전처리\n            processed_term = self._preprocess_term(verbatim_term)\n            \n            # 컨텍스트가 있으면 결합\n            if context:\n                search_text = f\"{processed_term} {context}\"\n            else:\n                search_text = processed_term\n            \n            # 임베딩 생성\n            query_embedding = self.sentence_model.encode(\n                [search_text], \n                convert_to_tensor=True,\n                device=self.device\n            )\n            \n            # 코사인 유사도 계산\n            similarities = torch.nn.functional.cosine_similarity(\n                query_embedding, \n                torch.tensor(self.meddra_embeddings).to(self.device),\n                dim=1\n            )\n            \n            # 상위 k개 결과 추출\n            top_scores, top_indices = torch.topk(similarities, k=min(top_k * 2, len(similarities)))\n            \n            # 결과 생성\n            results = []\n            for score, idx in zip(top_scores.cpu().numpy(), top_indices.cpu().numpy()):\n                if score < min_confidence:\n                    continue\n                    \n                pt_info = self.idx_to_pt[idx]\n                \n                # 추가 스코어링 (규칙 기반)\n                rule_score = self._calculate_rule_based_score(verbatim_term, pt_info['pt_name'])\n                combined_score = (score * 0.7) + (rule_score * 0.3)\n                \n                result = {\n                    'pt_code': pt_info['pt_code'],\n                    'pt_name': pt_info['pt_name'],\n                    'soc_code': pt_info.get('soc_code'),\n                    'soc_name': pt_info.get('soc_name'),\n                    'hlgt_code': pt_info.get('hlgt_code'),\n                    'hlgt_name': pt_info.get('hlgt_name'),\n                    'hlt_code': pt_info.get('hlt_code'),\n                    'hlt_name': pt_info.get('hlt_name'),\n                    'confidence': float(combined_score),\n                    'semantic_similarity': float(score),\n                    'rule_score': float(rule_score)\n                }\n                \n                results.append(result)\n            \n            # 최종 신뢰도로 정렬\n            results.sort(key=lambda x: x['confidence'], reverse=True)\n            \n            # 상위 k개만 반환\n            return results[:top_k]\n            \n        except Exception as e:\n            logger.error(f\"Error mapping term '{verbatim_term}': {str(e)}\")\n            return []\n\n    def _preprocess_term(self, term: str) -> str:\n        \"\"\"용어 전처리\"\"\"\n        import re\n        \n        # 소문자 변환\n        processed = term.lower()\n        \n        # 특수문자 정리\n        processed = re.sub(r'[^\\w\\s가-힣]', ' ', processed)\n        \n        # 다중 공백 정리\n        processed = ' '.join(processed.split())\n        \n        return processed.strip()\n\n    def _calculate_rule_based_score(self, verbatim_term: str, pt_name: str) -> float:\n        \"\"\"규칙 기반 스코어 계산\"\"\"\n        score = 0.0\n        \n        verbatim_lower = verbatim_term.lower()\n        pt_lower = pt_name.lower()\n        \n        # 정확한 매치\n        if verbatim_lower == pt_lower:\n            score += 1.0\n        \n        # 부분 문자열 매치\n        elif verbatim_lower in pt_lower or pt_lower in verbatim_lower:\n            score += 0.8\n        \n        # 단어별 매치\n        verbatim_words = set(verbatim_lower.split())\n        pt_words = set(pt_lower.split())\n        \n        if verbatim_words and pt_words:\n            intersection = verbatim_words.intersection(pt_words)\n            union = verbatim_words.union(pt_words)\n            jaccard_score = len(intersection) / len(union)\n            score += jaccard_score * 0.6\n        \n        # 동의어 매치 (사전 정의된 동의어가 있는 경우)\n        synonym_score = self._check_synonyms(verbatim_lower, pt_lower)\n        score += synonym_score * 0.4\n        \n        return min(score, 1.0)\n\n    def _check_synonyms(self, term1: str, term2: str) -> float:\n        \"\"\"동의어 확인\"\"\"\n        # 간단한 동의어 사전 (실제로는 더 포괄적인 사전 필요)\n        synonyms = {\n            '두통': ['headache', 'cephalgia'],\n            '복통': ['abdominal pain', 'stomach ache'],\n            '설사': ['diarrhea', 'loose stool'],\n            '구토': ['vomiting', 'emesis'],\n            '발열': ['fever', 'pyrexia'],\n            '어지러움': ['dizziness', 'vertigo']\n        }\n        \n        score = 0.0\n        \n        for key, values in synonyms.items():\n            if key in term1:\n                for synonym in values:\n                    if synonym in term2:\n                        score = 1.0\n                        break\n            elif key in term2:\n                for synonym in values:\n                    if synonym in term1:\n                        score = 1.0\n                        break\n        \n        return score\n\n    def retrain_model(self, training_data: List[Dict]):\n        \"\"\"모델 재훈련 (피드백 기반)\"\"\"\n        # 사용자 피드백을 바탕으로 모델 성능 개선\n        # 실제 구현에서는 더 복잡한 재훈련 로직 필요\n        logger.info(\"Model retraining initiated with new feedback data\")\n        # TODO: 재훈련 로직 구현\n```\n\n### 5.2 XML 생성 서비스\n\n#### **<코드 9>** E2B XML 생성기\n```typescript\n// src/services/xmlGeneratorService.ts\nimport { create } from 'xmlbuilder2';\nimport { ICSRCase } from '../types/case.types';\nimport { ValidationService } from './validationService';\nimport { AppError } from '../utils/AppError';\n\nexport class XMLGeneratorService {\n  constructor(private validationService: ValidationService) {}\n\n  async generateE2BXML(caseData: ICSRCase): Promise<string> {\n    try {\n      // 데이터 검증\n      const validationResult = await this.validationService.validateForXML(caseData);\n      if (!validationResult.isValid) {\n        throw new AppError('Case data validation failed', 400, validationResult.errors);\n      }\n\n      const root = create({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }).ele('ichicsr', {\n        'xmlns': 'http://www.ich.org/ICSR/xmlschema/20100718',\n        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n        'xsi:schemaLocation': 'http://www.ich.org/ICSR/xmlschema/20100718 ICH_ICSR_v2.1.xsd',\n        'lang': caseData.language || 'ko'\n      });\n\n      // N.1 Message Header\n      const messageHeader = root.ele('ichicsrmessageheader');\n      messageHeader.ele('messagetype').txt('ichicsr');\n      messageHeader.ele('messageformatversion').txt('2.1');\n      messageHeader.ele('messageformatrelease').txt('2.0');\n      messageHeader.ele('messagenumb').txt(caseData.batchNumber || this.generateBatchNumber());\n      messageHeader.ele('messagesenderidentifier').txt(caseData.senderID);\n      messageHeader.ele('messagereceiveridentifier').txt(caseData.receiverID);\n      messageHeader.ele('messagedateformat').txt('102');\n      messageHeader.ele('messagedate').txt(this.formatDate(new Date()));\n\n      // N.2 Safety Report\n      const safetyReport = root.ele('safetyreport');\n      \n      // N.2.r ICSR\n      const safetyReportVersion = safetyReport.ele('safetyreportversion').txt('1');\n      const safetyReportId = safetyReport.ele('safetyreportid').txt(caseData.caseNumber);\n      \n      // Primary Source\n      const primarySource = safetyReport.ele('primarysource');\n      \n      if (caseData.patient) {\n        // C.1 Case Information\n        this.addCaseInformation(safetyReport, caseData);\n        \n        // C.2 Primary Source Information\n        this.addPrimarySourceInformation(primarySource, caseData);\n        \n        // C.3 Information on Sender of the Report  \n        this.addSenderInformation(safetyReport, caseData);\n        \n        // D Patient Information\n        this.addPatientInformation(safetyReport, caseData.patient);\n        \n        // E Medical History\n        if (caseData.patient.medicalHistory) {\n          this.addMedicalHistory(safetyReport, caseData.patient);\n        }\n        \n        // G Drug Information\n        if (caseData.drugs && caseData.drugs.length > 0) {\n          this.addDrugInformation(safetyReport, caseData.drugs);\n        }\n        \n        // H Narrative Case Summary\n        this.addNarrativeSummary(safetyReport, caseData);\n      }\n\n      // XML 생성 및 포맷팅\n      const xmlString = root.end({ \n        prettyPrint: true,\n        indent: '  ',\n        newline: '\\n'\n      });\n\n      // 최종 검증\n      await this.validateXMLSchema(xmlString);\n\n      return xmlString;\n\n    } catch (error) {\n      throw new AppError('Failed to generate E2B XML', 500, error);\n    }\n  }\n\n  private addCaseInformation(safetyReport: any, caseData: ICSRCase): void {\n    // C.1.1 Sender's (case) safety report unique identifier\n    safetyReport.ele('safetyreportid').txt(caseData.caseNumber);\n    \n    // C.1.2 Date of creation\n    safetyReport.ele('creationdate').txt(this.formatDate(caseData.createdAt));\n    \n    // C.1.3 Type of report\n    const reportType = this.mapReportType(caseData.reportType);\n    safetyReport.ele('reporttype').txt(reportType);\n    \n    // C.1.4 Date of this report\n    safetyReport.ele('reportdate').txt(this.formatDate(caseData.updatedAt || caseData.createdAt));\n    \n    // C.1.5 Date report was first received from source\n    safetyReport.ele('receiptdate').txt(this.formatDate(caseData.createdAt));\n    \n    // C.1.6 Date of most recent information for this report\n    safetyReport.ele('receivedate').txt(this.formatDate(caseData.updatedAt || caseData.createdAt));\n    \n    // C.1.7 Is this an expedited report?\n    safetyReport.ele('serious').txt(this.isExpeditedReport(caseData) ? '1' : '2');\n    \n    // C.1.8.1 Worldwide unique case identification number\n    safetyReport.ele('companynumb').txt(caseData.caseNumber);\n  }\n\n  private addPatientInformation(safetyReport: any, patient: any): void {\n    const patientElement = safetyReport.ele('patient');\n    \n    // D.1 Patient (name or initials)\n    if (patient.initials) {\n      patientElement.ele('patientinitial').txt(patient.initials);\n    }\n    \n    // D.2 Age information\n    if (patient.age) {\n      patientElement.ele('patientage').txt(patient.age.toString());\n      patientElement.ele('patientageunit').txt(this.mapAgeUnit(patient.ageUnit || 'YEARS'));\n    }\n    \n    // D.3 Date of birth\n    if (patient.dateOfBirth) {\n      patientElement.ele('patientdateofbirth').txt(this.formatDate(patient.dateOfBirth));\n    }\n    \n    // D.4 Age group\n    const ageGroup = this.calculateAgeGroup(patient.age);\n    if (ageGroup) {\n      patientElement.ele('patientagegroup').txt(ageGroup);\n    }\n    \n    // D.5 Sex\n    if (patient.gender) {\n      patientElement.ele('patientsex').txt(this.mapGender(patient.gender));\n    }\n    \n    // D.6 Last menstrual period date\n    // D.7.1 Medical record number\n    // D.7.2 Investigation number\n    // D.8 Weight (kg)\n    if (patient.weight) {\n      patientElement.ele('patientweight').txt(patient.weight.toString());\n    }\n    \n    // D.9 Height (cm)\n    if (patient.height) {\n      patientElement.ele('patientheight').txt(patient.height.toString());\n    }\n  }\n\n  private addDrugInformation(safetyReport: any, drugs: any[]): void {\n    drugs.forEach((drug, index) => {\n      const drugElement = safetyReport.ele('drug');\n      \n      // G.k.1 Characterisation of drug role\n      drugElement.ele('drugcharacterization').txt('1'); // Suspect\n      \n      // G.k.2.2 Medicinal product name\n      if (drug.name) {\n        const medProduct = drugElement.ele('medicinalproduct');\n        medProduct.txt(drug.name);\n      }\n      \n      // G.k.2.3 Substance/specified substance name\n      if (drug.activeIngredient) {\n        const activeSubstance = drugElement.ele('activesubstance');\n        const substanceName = activeSubstance.ele('activesubstancename');\n        substanceName.txt(drug.activeIngredient);\n      }\n      \n      // G.k.3 Holder and authorisation/application number of drug\n      // G.k.4 Dosage information\n      if (drug.dose || drug.unit || drug.frequency) {\n        const drugDosage = drugElement.ele('drugdosagetext');\n        const dosageText = `${drug.dose || ''} ${drug.unit || ''} ${drug.frequency || ''}`.trim();\n        drugDosage.txt(dosageText);\n      }\n      \n      // G.k.5 Pharmaceutical dose form\n      if (drug.formulation) {\n        drugElement.ele('drugdosageform').txt(drug.formulation);\n      }\n      \n      // G.k.6 Route of administration\n      if (drug.route) {\n        drugElement.ele('drugroute').txt(this.mapRoute(drug.route));\n      }\n      \n      // G.k.7 Indication for use in the case\n      if (drug.indication) {\n        const drugIndication = drugElement.ele('drugindication');\n        drugIndication.txt(drug.indication);\n      }\n      \n      // G.k.8 Action(s) taken with drug\n      if (drug.actionTaken) {\n        drugElement.ele('actiondrug').txt(this.mapAction(drug.actionTaken));\n      }\n      \n      // G.k.9 Assessment of relatedness of drug to adverse event(s)/reaction(s)\n      // This would be added based on causality assessment results\n      \n      // Korean specific fields\n      if (drug.koreanProductCode) {\n        const koreanCode = drugElement.ele('drugadditionalinformation');\n        // Add Korean specific MedDRA coding here\n      }\n    });\n  }\n\n  private addNarrativeSummary(safetyReport: any, caseData: ICSRCase): void {\n    const summary = safetyReport.ele('summary');\n    \n    // H.1 Case narrative including clinical course, therapeutic measures, outcome\n    let narrativeText = '';\n    \n    // 환자 정보 요약\n    if (caseData.patient) {\n      narrativeText += `Patient: ${caseData.patient.initials || 'Unknown'}, `;\n      narrativeText += `${caseData.patient.age || 'Unknown age'} ${caseData.patient.gender || 'Unknown gender'}. `;\n    }\n    \n    // 의약품 정보 요약\n    if (caseData.drugs && caseData.drugs.length > 0) {\n      narrativeText += 'Suspected drugs: ';\n      narrativeText += caseData.drugs.map(d => d.name).join(', ') + '. ';\n    }\n    \n    // 이상사례 정보 요약\n    if (caseData.events && caseData.events.length > 0) {\n      narrativeText += 'Adverse events: ';\n      narrativeText += caseData.events.map(e => e.verbatimTerm).join(', ') + '. ';\n    }\n    \n    // 추가 서술이 있다면 포함\n    if (caseData.narrative) {\n      narrativeText += caseData.narrative;\n    }\n    \n    summary.ele('narrativeincludeclinical').txt(narrativeText);\n    \n    // H.2 Other relevant history including concomitant medication and medical history\n    if (caseData.patient?.medicalHistory) {\n      summary.ele('reportercomment').txt(caseData.patient.medicalHistory);\n    }\n    \n    // H.4 Sender's diagnosis/syndrome and/or reclassification of reaction/event\n    // H.5 Sender's comments\n  }\n\n  // 유틸리티 메서드들\n  private formatDate(date: Date | string): string {\n    const d = typeof date === 'string' ? new Date(date) : date;\n    return d.toISOString().split('T')[0].replace(/-/g, '');\n  }\n\n  private generateBatchNumber(): string {\n    const timestamp = Date.now().toString();\n    return `BATCH_${timestamp}`;\n  }\n\n  private mapReportType(reportType: string): string {\n    const mapping: { [key: string]: string } = {\n      'INITIAL': '1',\n      'FOLLOWUP': '2',\n      'CORRECTION': '3',\n      'NULLIFICATION': '4'\n    };\n    return mapping[reportType] || '1';\n  }\n\n  private mapGender(gender: string): string {\n    const mapping: { [key: string]: string } = {\n      'MALE': '1',\n      'FEMALE': '2',\n      'UNKNOWN': '0'\n    };\n    return mapping[gender] || '0';\n  }\n\n  private mapAgeUnit(unit: string): string {\n    const mapping: { [key: string]: string } = {\n      'YEARS': '801',\n      'MONTHS': '802', \n      'WEEKS': '803',\n      'DAYS': '804',\n      'HOURS': '805'\n    };\n    return mapping[unit] || '801';\n  }\n\n  private calculateAgeGroup(age?: number): string | null {\n    if (!age) return null;\n    \n    if (age < 18) return '1'; // Pediatric\n    if (age >= 18 && age < 65) return '2'; // Adult\n    if (age >= 65) return '3'; // Elderly\n    \n    return null;\n  }\n\n  private isExpeditedReport(caseData: ICSRCase): boolean {\n    // 중대한 이상사례인지 확인\n    return caseData.events?.some(event => \n      event.seriousness === 'SERIOUS'\n    ) || false;\n  }\n\n  private mapRoute(route: string): string {\n    const mapping: { [key: string]: string } = {\n      'ORAL': '001',\n      'INTRAVENOUS': '002',\n      'INTRAMUSCULAR': '003',\n      'SUBCUTANEOUS': '004',\n      'TOPICAL': '005'\n    };\n    return mapping[route.toUpperCase()] || '001';\n  }\n\n  private mapAction(action: string): string {\n    const mapping: { [key: string]: string } = {\n      'DOSE_REDUCED': '1',\n      'DOSE_INCREASED': '2', \n      'DOSE_NOT_CHANGED': '3',\n      'UNKNOWN': '4',\n      'NOT_APPLICABLE': '5',\n      'DRUG_WITHDRAWN': '6'\n    };\n    return mapping[action.toUpperCase()] || '4';\n  }\n\n  private async validateXMLSchema(xmlString: string): Promise<void> {\n    // XML 스키마 검증 로직\n    // 실제 구현에서는 ICH E2B XSD 스키마를 사용하여 검증\n    try {\n      // libxmljs2 또는 다른 XML 검증 라이브러리 사용\n      // const result = validator.validate(xmlString, schemaPath);\n      // if (!result.isValid) {\n      //   throw new Error('XML schema validation failed');\n      // }\n    } catch (error) {\n      throw new AppError('XML schema validation failed', 400, error);\n    }\n  }\n}\n```\n\n---\n\n## 🧪 6. 테스트 전략 및 구현\n\n### 6.1 테스트 계획\n\n#### **<표 9>** 테스트 매트릭스\n| 테스트 레벨 | 도구/프레임워크 | 커버리지 목표 | 자동화 | 실행 주기 |\n|------------|----------------|-------------|--------|-----------|\n| 단위 테스트 | Jest, PyTest | 90% | ✅ | 매 커밋 |\n| 통합 테스트 | Supertest, TestContainers | 80% | ✅ | PR 생성시 |\n| API 테스트 | Postman/Newman | 100% | ✅ | 배포 전 |\n| E2E 테스트 | Playwright | 핵심 플로우 | ✅ | 매일 |\n| 성능 테스트 | K6, Artillery | N/A | ✅ | 주간 |\n| 보안 테스트 | OWASP ZAP | N/A | ✅ | 월간 |\n| AI 모델 테스트 | Custom | 정확도 90%+ | ✅ | 모델 업데이트시 |\n\n### 6.2 테스트 구현\n\n#### **<코드 10>** 단위 테스트 예제\n```typescript\n// src/services/__tests__/caseService.test.ts\nimport { CaseService } from '../caseService';\nimport { PrismaClient } from '@prisma/client';\nimport { mockDeep, mockReset } from 'jest-mock-extended';\n\nconst mockPrisma = mockDeep<PrismaClient>();\nconst mockAIService = {\n  processCase: jest.fn(),\n  mapToMedDRA: jest.fn()\n};\nconst mockXMLService = {\n  generateE2BXML: jest.fn()\n};\nconst mockValidationService = {\n  validateCase: jest.fn()\n};\n\ndescribe('CaseService', () => {\n  let caseService: CaseService;\n\n  beforeEach(() => {\n    mockReset(mockPrisma);\n    jest.clearAllMocks();\n    \n    caseService = new CaseService(\n      mockPrisma,\n      mockAIService as any,\n      mockXMLService as any,\n      mockValidationService as any\n    );\n  });\n\n  describe('createCase', () => {\n    it('should create a new ICSR case successfully', async () => {\n      // Arrange\n      const caseData = {\n        senderID: 'MFDS-TEST-001',\n        receiverID: 'MFDS-O-KR',\n        reportType: 'INITIAL' as const,\n        createdBy: 'user-123',\n        patient: {\n          initials: 'J.D.',\n          age: 45,\n          gender: 'MALE' as const\n        },\n        drugs: [{\n          name: 'Aspirin',\n          activeIngredient: 'Acetylsalicylic acid',\n          dose: '100',\n          unit: 'mg'\n        }],\n        events: [{\n          verbatimTerm: 'Headache',\n          seriousness: 'NON_SERIOUS' as const\n        }]\n      };\n\n      const expectedCase = {\n        id: 'case-123',\n        caseNumber: 'KR202509120001',\n        ...caseData,\n        status: 'DRAFT',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        const mockTx = {\n          case: {\n            create: jest.fn().mockResolvedValue(expectedCase)\n          },\n          auditLog: {\n            create: jest.fn().mockResolvedValue({})\n          }\n        };\n        return await callback(mockTx as any);\n      });\n\n      // Act\n      const result = await caseService.createCase(caseData);\n\n      // Assert\n      expect(result).toEqual(expectedCase);\n      expect(mockPrisma.$transaction).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Arrange\n      const caseData = {\n        senderID: 'MFDS-TEST-001',\n        createdBy: 'user-123'\n      };\n\n      mockPrisma.$transaction.mockRejectedValue(new Error('Database error'));\n\n      // Act & Assert\n      await expect(caseService.createCase(caseData))\n        .rejects\n        .toThrow('Failed to create case');\n    });\n  });\n\n  describe('getCases', () => {\n    it('should return paginated cases with filters', async () => {\n      // Arrange\n      const params = {\n        page: 1,\n        limit: 10,\n        filters: { status: 'DRAFT' as const },\n        userId: 'user-123'\n      };\n\n      const mockCases = [\n        {\n          id: 'case-1',\n          caseNumber: 'KR202509120001',\n          status: 'DRAFT',\n          aiPredictions: [{ confidence: 0.85 }],\n          patient: { initials: 'J.D.' },\n          drugs: [{ name: 'Aspirin' }],\n          events: [{ verbatimTerm: 'Headache' }]\n        }\n      ];\n\n      mockPrisma.case.findMany.mockResolvedValue(mockCases);\n      mockPrisma.case.count.mockResolvedValue(1);\n\n      // Act\n      const result = await caseService.getCases(params);\n\n      // Assert\n      expect(result.cases).toHaveLength(1);\n      expect(result.pagination).toEqual({\n        page: 1,\n        limit: 10,\n        total: 1,\n        totalPages: 1\n      });\n      expect(result.cases[0].aiConfidence).toBe(0.85);\n    });\n  });\n});\n```\n\n#### **<코드 11>** AI 모델 테스트\n```python\n# tests/ai/test_meddra_mapper.py\nimport pytest\nimport torch\nfrom unittest.mock import Mock, patch\nfrom src.ai.models.meddra_mapper import MedDRAMapper\n\nclass TestMedDRAMapper:\n    @pytest.fixture\n    def mock_mapper(self):\n        with patch('src.ai.models.meddra_mapper.SentenceTransformer'), \\\n             patch('builtins.open'), \\\n             patch('pickle.load'), \\\n             patch('numpy.load'):\n            \n            mapper = MedDRAMapper('/fake/path', torch.device('cpu'))\n            \n            # Mock resources\n            mapper.meddra_embeddings = torch.randn(1000, 384).numpy()\n            mapper.idx_to_pt = {\n                0: {\n                    'pt_code': '10019211',\n                    'pt_name': 'Headache',\n                    'soc_code': '10029205', \n                    'soc_name': 'Nervous system disorders'\n                },\n                1: {\n                    'pt_code': '10000081',\n                    'pt_name': 'Abdominal pain',\n                    'soc_code': '10017947',\n                    'soc_name': 'Gastrointestinal disorders'\n                }\n            }\n            \n            return mapper\n\n    @pytest.mark.asyncio\n    async def test_map_term_korean_input(self, mock_mapper):\n        \"\"\"한국어 입력에 대한 MedDRA 매핑 테스트\"\"\"\n        # Arrange\n        mock_mapper.sentence_model.encode.return_value = torch.randn(1, 384)\n        \n        # Act\n        results = await mock_mapper.map_term(\"심한 두통\", context=\"\", top_k=3)\n        \n        # Assert\n        assert len(results) <= 3\n        assert all(0 <= result['confidence'] <= 1 for result in results)\n        assert all('pt_code' in result for result in results)\n        assert all('pt_name' in result for result in results)\n\n    @pytest.mark.asyncio\n    async def test_map_term_with_context(self, mock_mapper):\n        \"\"\"컨텍스트를 포함한 매핑 테스트\"\"\"\n        # Arrange\n        mock_mapper.sentence_model.encode.return_value = torch.randn(1, 384)\n        \n        # Act\n        results = await mock_mapper.map_term(\n            \"headache\", \n            context=\"patient experienced severe headache after taking medication\",\n            top_k=5\n        )\n        \n        # Assert\n        assert len(results) <= 5\n        assert results[0]['confidence'] >= 0.5  # 최소 신뢰도 확인\n\n    def test_preprocess_term(self, mock_mapper):\n        \"\"\"용어 전처리 테스트\"\"\"\n        # Test cases\n        test_cases = [\n            (\"SEVERE HEADACHE!!!\", \"severe headache\"),\n            (\"복통   및   설사\", \"복통 및 설사\"),\n            (\"Head-ache (severe)\", \"head ache severe\")\n        ]\n        \n        for input_term, expected in test_cases:\n            result = mock_mapper._preprocess_term(input_term)\n            assert result == expected\n\n    def test_calculate_rule_based_score(self, mock_mapper):\n        \"\"\"규칙 기반 스코어 계산 테스트\"\"\"\n        # Exact match\n        score = mock_mapper._calculate_rule_based_score(\"headache\", \"Headache\")\n        assert score >= 0.8\n        \n        # Partial match\n        score = mock_mapper._calculate_rule_based_score(\"severe headache\", \"Headache\")\n        assert 0.5 <= score <= 0.8\n        \n        # No match\n        score = mock_mapper._calculate_rule_based_score(\"fever\", \"Headache\")\n        assert score < 0.3\n\n    @pytest.mark.asyncio\n    async def test_map_term_empty_input(self, mock_mapper):\n        \"\"\"빈 입력에 대한 처리 테스트\"\"\"\n        results = await mock_mapper.map_term(\"\", context=\"\")\n        assert results == []\n\n    @pytest.mark.asyncio\n    async def test_map_term_low_confidence_filtering(self, mock_mapper):\n        \"\"\"낮은 신뢰도 결과 필터링 테스트\"\"\"\n        # Mock low confidence scores\n        mock_mapper.sentence_model.encode.return_value = torch.randn(1, 384)\n        \n        results = await mock_mapper.map_term(\n            \"unknown symptom\", \n            top_k=10,\n            min_confidence=0.8\n        )\n        \n        # 높은 임계값으로 인해 결과가 적거나 없어야 함\n        assert len(results) <= 10\n        assert all(result['confidence'] >= 0.8 for result in results)\n```\n\n#### **<코드 12>** E2E 테스트\n```typescript\n// tests/e2e/case-management.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('ICSR Case Management', () => {\n  test.beforeEach(async ({ page }) => {\n    // 로그인\n    await page.goto('/login');\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'password123');\n    await page.click('button[type=\"submit\"]');\n    \n    // 대시보드로 이동 확인\n    await expect(page).toHaveURL('/dashboard');\n  });\n\n  test('should create new ICSR case with AI processing', async ({ page }) => {\n    // 새 케이스 생성 페이지로 이동\n    await page.click('text=새 케이스 생성');\n    await expect(page).toHaveURL('/cases/new');\n\n    // 환자 정보 입력\n    await page.fill('input[name=\"patient.initials\"]', 'J.D.');\n    await page.fill('input[name=\"patient.age\"]', '45');\n    await page.selectOption('select[name=\"patient.gender\"]', 'MALE');\n\n    // 의약품 정보 입력\n    await page.click('button:has-text(\"의약품 추가\")');\n    await page.fill('input[name=\"drugs.0.name\"]', 'Aspirin 100mg');\n    await page.fill('input[name=\"drugs.0.dose\"]', '100');\n    await page.selectOption('select[name=\"drugs.0.unit\"]', 'mg');\n\n    // 이상사례 정보 입력\n    await page.click('button:has-text(\"이상사례 추가\")');\n    await page.fill('input[name=\"events.0.verbatimTerm\"]', '심한 두통');\n    await page.fill('textarea[name=\"events.0.description\"]', '약물 복용 후 30분 뒤 발생한 심한 두통');\n\n    // 케이스 저장\n    await page.click('button:has-text(\"저장\")');\n\n    // 성공 메시지 확인\n    await expect(page.locator('.alert-success')).toContainText('케이스가 성공적으로 생성되었습니다');\n\n    // AI 처리 시작\n    await page.click('button:has-text(\"AI 처리 시작\")');\n    \n    // AI 처리 진행 확인\n    await expect(page.locator('.ai-processing-indicator')).toBeVisible();\n    await expect(page.locator('text=AI가 데이터를 분석중입니다')).toBeVisible();\n\n    // AI 처리 완료 대기 (최대 30초)\n    await expect(page.locator('.ai-processing-complete')).toBeVisible({ timeout: 30000 });\n\n    // MedDRA 매핑 결과 확인\n    const meddraSuggestion = page.locator('.meddra-suggestion').first();\n    await expect(meddraSuggestion).toContainText('Headache');\n    await expect(meddraSuggestion).toContainText('10019211'); // PT Code\n\n    // AI 제안 승인\n    await page.click('.meddra-suggestion .accept-button');\n\n    // 케이스 상태 확인\n    await expect(page.locator('.case-status')).toContainText('AI처리완료');\n  });\n\n  test('should validate and submit case to regulatory authority', async ({ page }) => {\n    // 기존 케이스로 이동 (AI 처리 완료 상태)\n    await page.goto('/cases/test-case-123');\n\n    // 케이스 검토 및 승인\n    await page.click('button:has-text(\"검토 완료\")');\n    await page.fill('textarea[name=\"reviewComments\"]', '모든 항목이 적절히 기재되었음');\n    await page.click('button:has-text(\"승인\")');\n\n    // 규제기관 제출\n    await page.click('button:has-text(\"규제기관 제출\")');\n    \n    // 제출 확인 모달\n    await expect(page.locator('.submit-confirmation-modal')).toBeVisible();\n    await page.selectOption('select[name=\"targetAuthority\"]', 'MFDS');\n    await page.click('button:has-text(\"제출 확인\")');\n\n    // 제출 진행 상태 확인\n    await expect(page.locator('.submission-progress')).toBeVisible();\n    await expect(page.locator('text=XML 생성중')).toBeVisible();\n\n    // 제출 완료 확인 (최대 60초)\n    await expect(page.locator('.submission-success')).toBeVisible({ timeout: 60000 });\n    await expect(page.locator('text=MFDS에 성공적으로 제출되었습니다')).toBeVisible();\n\n    // ACK 메시지 확인\n    await page.click('button:has-text(\"제출 상세 정보\")');\n    await expect(page.locator('.ack-message')).toContainText('승인됨 (AA)');\n  });\n\n  test('should handle AI processing errors gracefully', async ({ page }) => {\n    // AI 처리 중 오류가 발생하는 시나리오\n    await page.goto('/cases/error-case-456');\n\n    // AI 처리 시작\n    await page.click('button:has-text(\"AI 처리 재시도\")');\n\n    // 오류 발생 시 처리\n    await expect(page.locator('.error-alert')).toBeVisible({ timeout: 10000 });\n    await expect(page.locator('.error-alert')).toContainText('AI 처리 중 오류가 발생했습니다');\n\n    // 수동 처리로 전환 옵션 확인\n    await expect(page.locator('button:has-text(\"수동으로 처리\")')).toBeVisible();\n    \n    // 오류 세부 정보 확인\n    await page.click('button:has-text(\"오류 세부정보\")');\n    await expect(page.locator('.error-details')).toContainText('모델 서버 연결 실패');\n  });\n\n  test('should display real-time dashboard metrics', async ({ page }) => {\n    await page.goto('/dashboard');\n\n    // 주요 메트릭 확인\n    await expect(page.locator('.metric-total-cases')).toContainText(/\\d+/);\n    await expect(page.locator('.metric-ai-processed')).toContainText(/\\d+/);\n    await expect(page.locator('.metric-accuracy')).toContainText(/\\d+%/);\n\n    // 차트 로딩 확인\n    await expect(page.locator('.processing-time-chart')).toBeVisible();\n    await expect(page.locator('.ai-accuracy-chart')).toBeVisible();\n\n    // 실시간 업데이트 확인 (5초 대기)\n    const initialCaseCount = await page.locator('.metric-total-cases').textContent();\n    await page.waitForTimeout(5000);\n    \n    // 새로고침 없이 데이터 업데이트 확인\n    await expect(page.locator('.last-updated')).toContainText('방금 전');\n  });\n});\n```\n\n---\n\n## 🚀 7. 배포 및 DevOps\n\n### 7.1 CI/CD 파이프라인\n\n#### **<코드 13>** GitHub Actions 워크플로우\n```yaml\n# .github/workflows/deploy.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\nenv:\n  NODE_VERSION: '20.x'\n  PYTHON_VERSION: '3.11'\n  DOCKER_REGISTRY: 'your-registry.com'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: testpassword\n          POSTGRES_DB: icsr_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      \n      redis:\n        image: redis:7\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          cache: 'pip'\n\n      - name: Install dependencies\n        run: |\n          npm ci\n          pip install -r requirements.txt\n          pip install -r requirements-test.txt\n\n      - name: Run linting\n        run: |\n          npm run lint\n          flake8 src/\n          black --check src/\n\n      - name: Run unit tests\n        env:\n          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/icsr_test\n          REDIS_URL: redis://localhost:6379\n        run: |\n          npm run test:coverage\n          pytest tests/ --cov=src --cov-report=xml\n\n      - name: Run integration tests\n        env:\n          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/icsr_test\n          REDIS_URL: redis://localhost:6379\n        run: |\n          npm run test:integration\n          python -m pytest tests/integration/\n\n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./coverage/lcov.info,./coverage.xml\n          flags: unittests\n          name: icsr-ai-coverage\n\n      - name: Run security scan\n        run: |\n          npm audit --audit-level=high\n          safety check -r requirements.txt\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    outputs:\n      frontend-image: ${{ steps.build-frontend.outputs.image }}\n      backend-image: ${{ steps.build-backend.outputs.image }}\n      ai-engine-image: ${{ steps.build-ai.outputs.image }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Login to Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.DOCKER_REGISTRY }}\n          username: ${{ secrets.REGISTRY_USERNAME }}\n          password: ${{ secrets.REGISTRY_PASSWORD }}\n\n      - name: Build and push Frontend\n        id: build-frontend\n        uses: docker/build-push-action@v5\n        with:\n          context: ./frontend\n          file: ./frontend/Dockerfile\n          push: true\n          tags: |\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-frontend:latest\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-frontend:${{ github.sha }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Build and push Backend\n        id: build-backend\n        uses: docker/build-push-action@v5\n        with:\n          context: ./backend\n          file: ./backend/Dockerfile\n          push: true\n          tags: |\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-backend:latest\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-backend:${{ github.sha }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Build and push AI Engine\n        id: build-ai\n        uses: docker/build-push-action@v5\n        with:\n          context: ./ai-engine\n          file: ./ai-engine/Dockerfile\n          push: true\n          tags: |\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-engine:latest\n            ${{ env.DOCKER_REGISTRY }}/icsr-ai-engine:${{ github.sha }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n  deploy-staging:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Deploy to Staging\n        run: |\n          # Kubernetes 배포 스크립트\n          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -\n          kubectl rollout status deployment/icsr-ai-backend -n staging\n          kubectl rollout status deployment/icsr-ai-frontend -n staging\n          kubectl rollout status deployment/icsr-ai-engine -n staging\n\n      - name: Run E2E tests\n        run: |\n          npx playwright test --config=playwright.staging.config.ts\n\n      - name: Performance testing\n        run: |\n          k6 run tests/performance/load-test.js\n\n  deploy-production:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: production\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Blue-Green Deployment\n        run: |\n          # 블루-그린 배포 스크립트\n          ./scripts/blue-green-deploy.sh production ${{ github.sha }}\n\n      - name: Health Check\n        run: |\n          # 헬스 체크 스크립트\n          ./scripts/health-check.sh https://icsr-ai.prod.com/health\n\n      - name: Rollback on Failure\n        if: failure()\n        run: |\n          ./scripts/rollback.sh production\n\n  notify:\n    needs: [test, build, deploy-production]\n    runs-on: ubuntu-latest\n    if: always()\n\n    steps:\n      - name: Slack Notification\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#icsr-ai-deployment'\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n          fields: repo,message,commit,author,action,eventName,ref,workflow\n```\n\n### 7.2 Kubernetes 배포 구성\n\n#### **<코드 14>** Kubernetes 배포 매니페스트\n```yaml\n# k8s/production/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: icsr-ai-prod\n  labels:\n    name: icsr-ai-prod\n    environment: production\n\n---\n# k8s/production/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: icsr-ai-config\n  namespace: icsr-ai-prod\ndata:\n  NODE_ENV: \"production\"\n  LOG_LEVEL: \"info\"\n  DATABASE_HOST: \"postgres-cluster.icsr-ai-prod.svc.cluster.local\"\n  REDIS_HOST: \"redis-cluster.icsr-ai-prod.svc.cluster.local\"\n  AI_MODEL_ENDPOINT: \"http://icsr-ai-engine.icsr-ai-prod.svc.cluster.local:8000\"\n  MFDS_ENDPOINT: \"https://nedrug.mfds.go.kr/api\"\n\n---\n# k8s/production/secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: icsr-ai-secrets\n  namespace: icsr-ai-prod\ntype: Opaque\ndata:\n  DATABASE_PASSWORD: <base64-encoded-password>\n  JWT_SECRET: <base64-encoded-secret>\n  ENCRYPTION_KEY: <base64-encoded-key>\n  MFDS_API_KEY: <base64-encoded-api-key>\n\n---\n# k8s/production/backend-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: icsr-ai-backend\n  namespace: icsr-ai-prod\n  labels:\n    app: icsr-ai-backend\n    version: v1\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: icsr-ai-backend\n  template:\n    metadata:\n      labels:\n        app: icsr-ai-backend\n        version: v1\n    spec:\n      containers:\n      - name: backend\n        image: your-registry.com/icsr-ai-backend:latest\n        ports:\n        - containerPort: 3000\n          name: http\n        env:\n        - name: PORT\n          value: \"3000\"\n        envFrom:\n        - configMapRef:\n            name: icsr-ai-config\n        - secretRef:\n            name: icsr-ai-secrets\n        \n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        \n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n          timeoutSeconds: 10\n          failureThreshold: 3\n        \n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 5\n          failureThreshold: 3\n\n      - name: sidecar-proxy\n        image: nginx:1.24\n        ports:\n        - containerPort: 8080\n          name: proxy\n        volumeMounts:\n        - name: nginx-config\n          mountPath: /etc/nginx/conf.d\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"50m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n\n      volumes:\n      - name: nginx-config\n        configMap:\n          name: nginx-sidecar-config\n\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - icsr-ai-backend\n              topologyKey: kubernetes.io/hostname\n\n---\n# k8s/production/ai-engine-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: icsr-ai-engine\n  namespace: icsr-ai-prod\n  labels:\n    app: icsr-ai-engine\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: icsr-ai-engine\n  template:\n    metadata:\n      labels:\n        app: icsr-ai-engine\n    spec:\n      containers:\n      - name: ai-engine\n        image: your-registry.com/icsr-ai-engine:latest\n        ports:\n        - containerPort: 8000\n          name: http\n        env:\n        - name: CUDA_VISIBLE_DEVICES\n          value: \"0\"\n        - name: MODEL_PATH\n          value: \"/models\"\n        \n        resources:\n          requests:\n            memory: \"4Gi\"\n            cpu: \"1000m\"\n            nvidia.com/gpu: 1\n          limits:\n            memory: \"8Gi\"\n            cpu: \"2000m\"\n            nvidia.com/gpu: 1\n        \n        volumeMounts:\n        - name: model-storage\n          mountPath: /models\n          readOnly: true\n        - name: tmp-storage\n          mountPath: /tmp\n        \n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 60\n          periodSeconds: 30\n          timeoutSeconds: 20\n        \n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 10\n\n      volumes:\n      - name: model-storage\n        persistentVolumeClaim:\n          claimName: ai-model-pvc\n      - name: tmp-storage\n        emptyDir:\n          sizeLimit: 10Gi\n\n      nodeSelector:\n        accelerator: nvidia-tesla-v100\n      \n      tolerations:\n      - key: nvidia.com/gpu\n        operator: Exists\n        effect: NoSchedule\n\n---\n# k8s/production/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: icsr-ai-backend\n  namespace: icsr-ai-prod\n  labels:\n    app: icsr-ai-backend\nspec:\n  selector:\n    app: icsr-ai-backend\n  ports:\n  - name: http\n    port: 80\n    targetPort: 3000\n    protocol: TCP\n  type: ClusterIP\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: icsr-ai-engine\n  namespace: icsr-ai-prod\n  labels:\n    app: icsr-ai-engine\nspec:\n  selector:\n    app: icsr-ai-engine\n  ports:\n  - name: http\n    port: 8000\n    targetPort: 8000\n    protocol: TCP\n  type: ClusterIP\n\n---\n# k8s/production/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: icsr-ai-ingress\n  namespace: icsr-ai-prod\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/cors-allow-origin: \"https://icsr-ai.company.com\"\nspec:\n  tls:\n  - hosts:\n    - api.icsr-ai.company.com\n    secretName: icsr-ai-tls\n  rules:\n  - host: api.icsr-ai.company.com\n    http:\n      paths:\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: icsr-ai-backend\n            port:\n              number: 80\n      - path: /ai\n        pathType: Prefix\n        backend:\n          service:\n            name: icsr-ai-engine\n            port:\n              number: 8000\n\n---\n# k8s/production/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: icsr-ai-backend-hpa\n  namespace: icsr-ai-prod\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: icsr-ai-backend\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 50\n        periodSeconds: 60\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n```\n\n### 7.3 모니터링 및 로깅\n\n#### **<코드 15>** Prometheus 모니터링 설정\n```yaml\n# k8s/monitoring/prometheus-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n    \n    rule_files:\n      - \"icsr_ai_rules.yml\"\n    \n    alerting:\n      alertmanagers:\n        - static_configs:\n            - targets:\n              - alertmanager:9093\n    \n    scrape_configs:\n    - job_name: 'icsr-ai-backend'\n      static_configs:\n      - targets: ['icsr-ai-backend.icsr-ai-prod:80']\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n      \n    - job_name: 'icsr-ai-engine'\n      static_configs:\n      - targets: ['icsr-ai-engine.icsr-ai-prod:8000']\n      metrics_path: '/metrics'\n      scrape_interval: 30s\n      \n    - job_name: 'postgres'\n      static_configs:\n      - targets: ['postgres-exporter.icsr-ai-prod:9187']\n      \n    - job_name: 'redis'\n      static_configs:\n      - targets: ['redis-exporter.icsr-ai-prod:9121']","size_bytes":179438},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport helmet from \"helmet\";\nimport { pool } from \"./db\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\n\n// Trust proxy for proper IP detection and secure cookies behind reverse proxy\napp.set('trust proxy', 1);\n\n// Security headers - strict CSP for production, relaxed for development\napp.use(helmet({\n  contentSecurityPolicy: process.env.NODE_ENV === 'development' ? false : {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"], // Allow inline styles for UI components\n      scriptSrc: [\"'self'\"], // No unsafe-eval for production security\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"], // Restricted to self for production\n      objectSrc: [\"'none'\"], // Prevent plugin content injection\n      baseUri: [\"'self'\"], // Prevent base tag injection\n      formAction: [\"'self'\"], // Restrict form submissions\n      frameAncestors: [\"'self'\"], // Prevent clickjacking\n      fontSrc: [\"'self'\", \"data:\"], // Allow web fonts\n      manifestSrc: [\"'self'\"], // Web app manifest\n    },\n  },\n  hsts: process.env.NODE_ENV === 'production' ? {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  } : false\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session store configuration using PostgreSQL\nconst PgSession = connectPgSimple(session);\n\n// Session configuration with security hardening\napp.use(session({\n  store: new PgSession({\n    pool: pool,\n    tableName: 'session',\n    createTableIfMissing: true\n  }),\n  secret: process.env.SESSION_SECRET || \"dev-secret-key-change-in-production\",\n  name: 'pharma.sid', // Custom session name\n  resave: false,\n  saveUninitialized: false,\n  rolling: true, // Reset expiry on activity\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'strict' // CSRF protection\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      // Only log basic request info for security - never log response bodies\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Initialize database separately from server startup\nasync function initializeDatabase() {\n  try {\n    console.log(\"Checking database initialization...\");\n    await seedDatabase();\n  } catch (error) {\n    console.error('Database initialization error:', error);\n    console.log('Database initialization failed, but server will continue to start');\n    // Don't throw - continue with server startup even if database init fails\n  }\n}\n\n// Main server startup function\nasync function startServer() {\n  let server;\n  \n  try {\n    server = await registerRoutes(app);\n\n    // Health endpoint for API status checking\n    app.head(\"/api\", (_req, res) => res.sendStatus(200));\n    app.get(\"/api\", (_req, res) => res.json({ status: \"ok\" }));\n\n    // Prevent SPA fallback from swallowing API requests in production\n    // This must be after registerRoutes but before serveStatic\n    app.all(\"/api/*\", (_req, res) => {\n      res.status(404).json({ error: \"API endpoint not found\" });\n    });\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      // Log the error for debugging but don't crash the server\n      console.error('Express error handler:', err);\n      \n      if (!res.headersSent) {\n        res.status(status).json({ message });\n      }\n      // Don't throw - this would crash the process\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    \n    // Force development mode if NODE_ENV is not set\n    const environment = process.env.NODE_ENV || \"development\";\n    console.log(`Environment detected: ${environment}, app.get(\"env\"): ${app.get(\"env\")}`);\n    \n    if (environment === \"development\") {\n      console.log(\"Setting up Vite development server...\");\n      await setupVite(app, server);\n    } else {\n      console.log(\"Setting up static file serving...\");\n      serveStatic(app);\n    }\n  } catch (error) {\n    console.error('Error during server setup:', error);\n    console.log('Server setup had issues, but attempting to start anyway');\n    // Continue to server.listen even if setup has issues\n  }\n\n  // ALWAYS attempt to start the server, regardless of previous errors\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // Ensure we have a server object - create basic one if needed\n  if (!server) {\n    console.log('Creating basic HTTP server as fallback');\n    const { createServer } = await import(\"http\");\n    server = createServer(app);\n  }\n  \n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n\n  // Graceful shutdown handlers\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT, shutting down gracefully...');\n    server.close(() => {\n      console.log('Server closed');\n      process.exit(0);\n    });\n  });\n\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM, shutting down gracefully...');\n    server.close(() => {\n      console.log('Server closed');\n      process.exit(0);\n    });\n  });\n\n  return server;\n}\n\n// Start the application\n(async () => {\n  // Initialize database first (but don't let it block server startup)\n  await initializeDatabase();\n  \n  // Always start the server\n  await startServer();\n})();\n","size_bytes":6540},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport rateLimit from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, updateUserSchema, insertCaseSchema, updateCaseSchemaReviewer, updateCaseSchemaAdmin, insertAuditLogSchema, softDeleteCaseSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport \"./types\"; // Import type declarations\n\n// Authentication middleware - 개발 환경에서만 로그인 과정 우회\nconst requireAuth = async (req: Request, res: Response, next: any) => {\n  // 보안 경고: 개발 환경에서만 인증 우회\n  if (process.env.NODE_ENV === 'development') {\n    console.warn('WARNING: Authentication bypass enabled in development mode only');\n    \n    // 기본 관리자 사용자로 자동 인증 - 실제 DB에 있는 admin 사용자 ID 사용\n    const defaultUser = {\n      id: \"b28f5b1e-538c-4ad6-83c9-1edd800df3f2\", // 실제 DB admin 사용자 ID\n      email: \"admin@pharma.com\",\n      name: \"시스템 관리자\",\n      role: \"ADMIN\" as const,\n      organization: \"한국의약품안전청\",\n      isActive: true,\n      password: \"\", // 빈 패스워드\n      lastLoginAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isDeleted: false\n    };\n    \n    req.user = defaultUser;\n    return next();\n  }\n  \n  // 프로덕션 환경에서는 실제 인증 필요\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || !user.isActive) {\n    return res.status(401).json({ error: \"Invalid user session\" });\n  }\n  \n  req.user = user;\n  next();\n};\n\n// Role-based access control middleware\nconst requireRole = (roles: string[]) => {\n  return (req: Request, res: Response, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n    next();\n  };\n};\n\n// Audit logging middleware - sanitized for security\nconst auditLog = (action: string, resource: string) => {\n  return async (req: Request, res: Response, next: any) => {\n    // Store the original send function to capture result after operation\n    const originalSend = res.send;\n    \n    res.send = function(body) {\n      // Log after operation completion\n      if (req.user) {\n        // Sanitized details - never log sensitive data\n        const sanitizedDetails: any = { \n          method: req.method, \n          path: req.path,\n          success: res.statusCode < 400\n        };\n        \n        // Extract resourceId for create operations from response body\n        let resourceId = req.params.id;\n        if (action.includes('CREATE') && res.statusCode < 400 && body) {\n          try {\n            const responseData = typeof body === 'string' ? JSON.parse(body) : body;\n            if (responseData && responseData.id) {\n              resourceId = responseData.id;\n            }\n          } catch (e) {\n            // Ignore JSON parse errors\n          }\n        }\n        \n        // Only log non-sensitive metadata\n        if (action.includes('CREATE') || action.includes('UPDATE')) {\n          if (resource === 'users') {\n            sanitizedDetails.userRole = req.body?.role;\n            sanitizedDetails.userOrganization = req.body?.organization;\n            // Never log passwords, emails, or personal data\n          } else if (resource === 'cases') {\n            sanitizedDetails.severity = req.body?.severity;\n            sanitizedDetails.status = req.body?.status;\n            // Never log patient data or medical details\n          }\n        }\n        \n        storage.createAuditLog({\n          userId: req.user.id,\n          action,\n          resource,\n          resourceId,\n          details: sanitizedDetails,\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent')\n        }).catch(err => console.error('Audit log error:', err));\n      }\n      \n      return originalSend.call(this, body);\n    };\n    \n    next();\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Rate limiting for login attempts\n  const loginLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // Limit each IP to 5 requests per windowMs\n    message: { error: \"Too many login attempts, please try again later\" },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true, // Don't count successful requests\n  });\n  \n  // Authentication routes\n  app.post(\"/api/auth/login\", loginLimiter, async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      const isValid = await storage.verifyPassword(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Update last login - using partial update method\n      await storage.updateUser(user.id, { lastLoginAt: new Date() } as any);\n      \n      // Regenerate session ID to prevent session fixation attacks\n      req.session!.regenerate(async (err: any) => {\n        if (err) {\n          console.error('Session regeneration error:', err);\n          return res.status(500).json({ error: \"Session error\" });\n        }\n        \n        req.session!.userId = user.id;\n        \n        // Log successful login\n        await storage.createAuditLog({\n          userId: user.id,\n          action: \"LOGIN\",\n          resource: \"auth\",\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent')\n        });\n        \n        res.json({ \n          user: { \n            id: user.id, \n            email: user.email, \n            name: user.name, \n            role: user.role,\n            organization: user.organization\n          } \n        });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.post(\"/api/auth/logout\", requireAuth, async (req: Request, res: Response) => {\n    await storage.createAuditLog({\n      userId: req.user!.id,\n      action: \"LOGOUT\",\n      resource: \"auth\",\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n    \n    req.session!.destroy((err: any) => {\n      if (err) {\n        console.error(\"Session destroy error:\", err);\n      }\n    });\n    \n    res.json({ message: \"Logged out successfully\" });\n  });\n  \n  app.get(\"/api/auth/me\", requireAuth, (req: Request, res: Response) => {\n    const user = req.user!;\n    res.json({\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n      organization: user.organization\n    });\n  });\n  \n  // User management routes (Admin only)\n  app.get(\"/api/users\", requireAuth, requireRole([\"ADMIN\"]), async (req: Request, res: Response) => {\n    try {\n      const { role, isActive } = req.query;\n      const users = await storage.listUsers({ \n        role: role as string, \n        isActive: isActive === 'true' ? true : isActive === 'false' ? false : undefined \n      });\n      \n      // Remove passwords from response\n      const safeUsers = users.map(u => ({\n        id: u.id,\n        email: u.email,\n        name: u.name,\n        role: u.role,\n        organization: u.organization,\n        isActive: u.isActive,\n        lastLoginAt: u.lastLoginAt,\n        createdAt: u.createdAt\n      }));\n      \n      res.json(safeUsers);\n    } catch (error) {\n      console.error(\"List users error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.post(\"/api/users\", requireAuth, requireRole([\"ADMIN\"]), auditLog(\"CREATE_USER\", \"users\"), async (req: Request, res: Response) => {\n    try {\n      const result = insertUserSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: fromZodError(result.error).toString() });\n      }\n      \n      const existingUser = await storage.getUserByEmail(result.data.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(result.data);\n      \n      res.status(201).json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        organization: user.organization,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.put(\"/api/users/:id\", requireAuth, requireRole([\"ADMIN\"]), auditLog(\"UPDATE_USER\", \"users\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const result = updateUserSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: fromZodError(result.error).toString() });\n      }\n      \n      const user = await storage.updateUser(id, result.data);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        organization: user.organization,\n        isActive: user.isActive,\n        lastLoginAt: user.lastLoginAt,\n        updatedAt: user.updatedAt\n      });\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.delete(\"/api/users/:id\", requireAuth, requireRole([\"ADMIN\"]), auditLog(\"DELETE_USER\", \"users\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      // Prevent self-deletion\n      if (id === req.user!.id) {\n        return res.status(400).json({ error: \"Cannot delete your own account\" });\n      }\n      \n      const deleted = await storage.deleteUser(id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  // Case management routes\n  app.get(\"/api/cases\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { status, limit, includeDeleted } = req.query;\n      const reporterId = req.user!.role === \"USER\" ? req.user!.id : undefined;\n      \n      // Only ADMIN can access archived cases\n      const canIncludeDeleted = req.user!.role === \"ADMIN\" && includeDeleted === \"true\";\n      \n      const cases = await storage.listCases({\n        status: status as string,\n        reporterId,\n        limit: limit ? parseInt(limit as string) : undefined,\n        includeDeleted: canIncludeDeleted\n      });\n      \n      // Enhanced audit log for list READ access (compliance requirement)\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"READ_CASES_LIST\",\n        resource: \"cases\",\n        details: { \n          method: req.method, \n          path: req.path,\n          resultCount: cases.length,\n          archivedCount: cases.filter(c => c.isDeleted).length,\n          filters: { status, reporterId: !!reporterId, limit, includeDeleted: canIncludeDeleted }\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: canIncludeDeleted ? \"HIGH\" : \"INFO\"\n      });\n      \n      res.json(cases);\n    } catch (error) {\n      console.error(\"List cases error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Critical cases endpoint - Must come before /:id route\n  app.get(\"/api/cases/critical\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const cases = await storage.listCases();\n      const predictions = await storage.listAiPredictions();\n      \n      // Filter for critical cases based on severity and recent timeframe\n      const criticalCases = cases.filter(case_ => {\n        const isHighSeverity = ['High', 'Critical'].includes(case_.severity);\n        const isActiveCritical = ['검토 필요', '처리중'].includes(case_.status);\n        const daysSinceReport = Math.floor((new Date().getTime() - new Date(case_.dateReported).getTime()) / (1000 * 60 * 60 * 24));\n        \n        return isHighSeverity && isActiveCritical && daysSinceReport <= 30; // Last 30 days\n      });\n\n      // Transform data for frontend consumption\n      const transformedCriticalCases = criticalCases.map(case_ => {\n        const daysSinceReport = Math.floor((new Date().getTime() - new Date(case_.dateReported).getTime()) / (1000 * 60 * 60 * 24));\n        \n        // Get AI predictions for this case if available\n        const casePredictions = predictions.filter(p => p.caseId === case_.id);\n        const latestPrediction = casePredictions.length > 0 ? \n          casePredictions[casePredictions.length - 1] : null;\n\n        return {\n          id: case_.id, // Use actual database UUID for navigation\n          patientAge: case_.patientAge,\n          patientGender: case_.patientGender,\n          drugName: case_.drugName,\n          suspectedReaction: case_.adverseReaction,\n          severity: case_.severity,\n          outcome: case_.outcome || '진행 중',\n          reporterType: '의료진', // This field doesn't exist in schema, using default\n          aiPrediction: latestPrediction ? {\n            severity: latestPrediction.prediction && typeof latestPrediction.prediction === 'object' && \n                     'severity' in latestPrediction.prediction ? latestPrediction.prediction.severity : case_.severity,\n            confidence: Math.round(parseFloat(latestPrediction.confidence) * 100)\n          } : null,\n          createdAt: case_.dateReported,\n          daysSinceReport\n        };\n      });\n\n      // Sort by urgency (severity, days since report)\n      transformedCriticalCases.sort((a, b) => {\n        // Priority: Critical > High\n        if (a.severity !== b.severity) {\n          if (a.severity === 'Critical') return -1;\n          if (b.severity === 'Critical') return 1;\n        }\n        // Then by days since report (older cases first)\n        return b.daysSinceReport - a.daysSinceReport;\n      });\n\n      // Enhanced audit log for critical cases access\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"READ_CRITICAL_CASES\",\n        resource: \"cases\",\n        details: { \n          method: req.method, \n          path: req.path,\n          criticalCasesCount: transformedCriticalCases.length\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"HIGH\"\n      });\n\n      res.json(transformedCriticalCases);\n    } catch (error) {\n      console.error(\"Critical cases error:\", error);\n      res.status(500).json({ error: \"Failed to fetch critical cases\" });\n    }\n  });\n  \n  app.get(\"/api/cases/:id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { includeDeleted } = req.query;\n      \n      // Only ADMIN can access archived cases\n      const canAccessArchived = req.user!.role === \"ADMIN\" && includeDeleted === \"true\";\n      \n      const case_ = await storage.getCase(id, canAccessArchived);\n      \n      if (!case_) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      // Users can only see their own cases unless they are REVIEWER or ADMIN\n      if (req.user!.role === \"USER\" && case_.reporterId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      // Enhanced audit log for READ access (compliance requirement)\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"READ_CASE\",\n        resource: \"cases\",\n        resourceId: id,\n        details: { \n          method: req.method, \n          path: req.path,\n          caseId: id,\n          caseStatus: case_.status,\n          severity: case_.severity,\n          isArchived: case_.isDeleted,\n          includeDeleted: canAccessArchived\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: canAccessArchived ? \"HIGH\" : \"INFO\"\n      });\n      \n      res.json(case_);\n    } catch (error) {\n      console.error(\"Get case error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.post(\"/api/cases\", requireAuth, auditLog(\"CREATE_CASE\", \"cases\"), async (req: Request, res: Response) => {\n    try {\n      const result = insertCaseSchema.safeParse({\n        ...req.body,\n        reporterId: req.user!.id\n      });\n      \n      if (!result.success) {\n        return res.status(400).json({ error: fromZodError(result.error).toString() });\n      }\n      \n      const case_ = await storage.createCase(result.data);\n      res.status(201).json(case_);\n    } catch (error) {\n      console.error(\"Create case error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  app.put(\"/api/cases/:id\", requireAuth, requireRole([\"REVIEWER\", \"ADMIN\"]), auditLog(\"UPDATE_CASE\", \"cases\"), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      // Get existing case for audit trail\n      const existingCase = await storage.getCase(id);\n      if (!existingCase) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      // Role-based field validation for regulatory compliance\n      let result;\n      if (req.user!.role === \"REVIEWER\") {\n        result = updateCaseSchemaReviewer.safeParse(req.body);\n      } else { // ADMIN\n        result = updateCaseSchemaAdmin.safeParse(req.body);\n      }\n      \n      if (!result.success) {\n        return res.status(400).json({ error: fromZodError(result.error).toString() });\n      }\n      \n      // Enhanced audit logging with before/after values (non-PHI only)\n      const auditDetails = {\n        method: req.method,\n        path: req.path,\n        role: req.user!.role,\n        fieldsChanged: Object.keys(result.data),\n        before: {\n          status: existingCase.status,\n          severity: existingCase.severity,\n          outcome: existingCase.outcome\n        }\n      };\n      \n      const case_ = await storage.updateCase(id, result.data);\n      if (!case_) {\n        return res.status(500).json({ error: \"Failed to update case\" });\n      }\n      \n      // Log the change with HIGH severity for privileged operations\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"UPDATE_CASE\",\n        resource: \"cases\",\n        resourceId: id,\n        details: {\n          ...auditDetails,\n          after: {\n            status: case_.status,\n            severity: case_.severity,\n            outcome: case_.outcome\n          }\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"HIGH\"\n      });\n      \n      res.json(case_);\n    } catch (error) {\n      console.error(\"Update case error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  // Soft delete for pharmacovigilance compliance\n  app.delete(\"/api/cases/:id\", requireAuth, requireRole([\"ADMIN\"]), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate deletion reason\n      const result = softDeleteCaseSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: fromZodError(result.error).toString() });\n      }\n      \n      // Check if case exists first\n      const existingCase = await storage.getCase(id);\n      if (!existingCase) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      const softDeletedCase = await storage.softDeleteCase(id, req.user!.id, result.data.deletionReason);\n      if (!softDeletedCase) {\n        return res.status(500).json({ error: \"Failed to delete case\" });\n      }\n      \n      // Log soft deletion with HIGH severity for compliance\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"SOFT_DELETE_CASE\",\n        resource: \"cases\",\n        resourceId: id,\n        details: {\n          method: req.method,\n          path: req.path,\n          deletionReason: result.data.deletionReason,\n          originalStatus: existingCase.status,\n          originalSeverity: existingCase.severity\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"HIGH\"\n      });\n      \n      res.json({ message: \"Case archived successfully\", archivedCase: softDeletedCase });\n    } catch (error) {\n      console.error(\"Soft delete case error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  // Statistics/Dashboard routes\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const cases = await storage.listCases();\n      const totalCases = cases.length;\n      const pendingCases = cases.filter(c => c.status === '검토 필요' || c.status === '처리중').length;\n      const criticalCases = cases.filter(c => c.severity === 'High').length;\n      \n      // Get AI predictions for accuracy calculation\n      const predictions = await storage.listAiPredictions();\n      const aiAccuracy = predictions.length > 0 \n        ? Math.round(predictions.reduce((sum, p) => sum + parseFloat(p.confidence), 0) / predictions.length * 100)\n        : 0;\n      \n      const stats = {\n        totalCases,\n        pendingCases,\n        criticalCases,\n        aiAccuracy,\n        systemHealth: 98.7 // TODO: Implement real system health check\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Recent cases for dashboard\n  app.get(\"/api/dashboard/recent-cases\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const cases = await storage.listCases();\n      const predictions = await storage.listAiPredictions();\n      \n      const recentCases = cases\n        .sort((a, b) => new Date(b.dateReported).getTime() - new Date(a.dateReported).getTime())\n        .slice(0, 5)\n        .map(case_ => {\n          // Get AI predictions for this case\n          const casePredictions = predictions.filter(p => p.caseId === case_.id);\n          const latestPrediction = casePredictions.length > 0 ? \n            casePredictions[casePredictions.length - 1] : null;\n          \n          return {\n            id: case_.id, // Use actual database UUID for navigation\n            drug: case_.drugName,\n            severity: case_.severity,\n            status: case_.status,\n            aiConfidence: latestPrediction ? Math.round(parseFloat(latestPrediction.confidence) * 100) : null\n          };\n        });\n\n      res.json(recentCases);\n    } catch (error) {\n      console.error(\"Recent cases error:\", error);\n      res.status(500).json({ error: \"Failed to fetch recent cases\" });\n    }\n  });\n\n\n  // Audit logs (Admin only)\n  app.get(\"/api/audit-logs\", requireAuth, requireRole([\"ADMIN\"]), async (req: Request, res: Response) => {\n    try {\n      const { userId, severity, limit } = req.query;\n      const logs = await storage.listAuditLogs({\n        userId: userId as string,\n        severity: severity as string,\n        limit: limit ? parseInt(limit as string) : 50\n      });\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"List audit logs error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n  \n  // AI Models management (Admin only)\n  app.get(\"/api/ai-models\", requireAuth, requireRole([\"ADMIN\", \"REVIEWER\"]), async (req: Request, res: Response) => {\n    try {\n      const models = await storage.listAiModels();\n      res.json(models);\n    } catch (error) {\n      console.error(\"List AI models error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // AI Analysis routes\n  app.post(\"/api/ai-analysis\", requireAuth, requireRole([\"REVIEWER\", \"ADMIN\"]), async (req: Request, res: Response) => {\n    try {\n      const { caseId } = req.body;\n      \n      if (!caseId) {\n        return res.status(400).json({ error: \"Case ID is required\" });\n      }\n      \n      // Get the case to analyze\n      const case_ = await storage.getCase(caseId);\n      if (!case_) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      // Check access permissions (users can only analyze their own cases)\n      if (req.user!.role === \"USER\" && case_.reporterId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      // Import AI service dynamically to avoid import issues\n      const { aiAnalysisService } = await import(\"./ai-service\");\n      \n      // Perform AI analysis\n      const analysisResult = await aiAnalysisService.analyzeCase(case_);\n      \n      // Create prediction record\n      const predictionData = await aiAnalysisService.createPredictionRecord(caseId, analysisResult);\n      const prediction = await storage.createAiPrediction(predictionData);\n      \n      // Audit log for AI analysis\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"AI_ANALYSIS\",\n        resource: \"cases\",\n        resourceId: caseId,\n        details: {\n          method: req.method,\n          path: req.path,\n          modelName: predictionData.modelName,\n          modelVersion: predictionData.modelVersion,\n          confidence: analysisResult.confidence,\n          processingTime: analysisResult.processingTime,\n          previousSeverity: case_.severity,\n          predictedSeverity: analysisResult.severity.severity\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"INFO\"\n      });\n      \n      res.json({\n        analysis: analysisResult,\n        prediction: prediction,\n        message: \"AI analysis completed successfully\"\n      });\n    } catch (error) {\n      console.error(\"AI analysis error:\", error);\n      res.status(500).json({ error: \"AI analysis failed: \" + (error instanceof Error ? error.message : \"Unknown error\") });\n    }\n  });\n\n  // Get AI predictions for a case\n  app.get(\"/api/cases/:id/predictions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if case exists and user has access\n      const case_ = await storage.getCase(id);\n      if (!case_) {\n        return res.status(404).json({ error: \"Case not found\" });\n      }\n      \n      if (req.user!.role === \"USER\" && case_.reporterId !== req.user!.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      const predictions = await storage.listAiPredictions(id);\n      \n      // Audit log for predictions access\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"READ_AI_PREDICTIONS\",\n        resource: \"ai_predictions\",\n        resourceId: id,\n        details: {\n          method: req.method,\n          path: req.path,\n          caseId: id,\n          predictionsCount: predictions.length\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"INFO\"\n      });\n      \n      res.json(predictions);\n    } catch (error) {\n      console.error(\"Get predictions error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update AI prediction (for human review)\n  app.put(\"/api/predictions/:id/review\", requireAuth, requireRole([\"REVIEWER\", \"ADMIN\"]), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { reviewNotes, humanReviewed } = req.body;\n      \n      // Validate input\n      if (typeof reviewNotes !== 'string' || typeof humanReviewed !== 'boolean') {\n        return res.status(400).json({ error: \"Invalid review data\" });\n      }\n      \n      const updates = {\n        humanReviewed,\n        reviewerId: req.user!.id,\n        reviewNotes\n      };\n      \n      const updatedPrediction = await storage.updateAiPrediction(id, updates);\n      if (!updatedPrediction) {\n        return res.status(404).json({ error: \"Prediction not found\" });\n      }\n      \n      // Audit log for prediction review\n      await storage.createAuditLog({\n        userId: req.user!.id,\n        action: \"REVIEW_AI_PREDICTION\",\n        resource: \"ai_predictions\",\n        resourceId: id,\n        details: {\n          method: req.method,\n          path: req.path,\n          humanReviewed,\n          reviewNotesLength: reviewNotes.length,\n          caseId: updatedPrediction.caseId\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        severity: \"INFO\"\n      });\n      \n      res.json(updatedPrediction);\n    } catch (error) {\n      console.error(\"Update prediction review error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Health check endpoints for deployment - moved away from root path\n  // Removed GET / and HEAD / to allow Vite middleware to handle SPA serving\n\n  // Alternative health check endpoint for deployment tools that need JSON response\n  app.get(\"/api/health\", (req: Request, res: Response) => {\n    res.status(200).json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      service: \"pharma-surveillance-api\"\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":30015},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { storage } from \"./storage\";\n\nasync function seedDatabase() {\n  try {\n    console.log(\"Checking database initialization...\");\n    \n    // Check if users already exist\n    const existingAdmin = await storage.getUserByEmail(\"admin@pharma.com\");\n    const existingReviewer = await storage.getUserByEmail(\"reviewer@pharma.com\");\n    const existingUser = await storage.getUserByEmail(\"user@pharma.com\");\n    \n    if (existingAdmin && existingReviewer && existingUser) {\n      console.log(\"Database already initialized with seed data.\");\n      return;\n    }\n    \n    console.log(\"Seeding database with initial data...\");\n    \n    // Create admin user if doesn't exist\n    let admin = existingAdmin;\n    if (!admin) {\n      admin = await storage.createUser({\n        email: \"admin@pharma.com\",\n        name: \"시스템 관리자\",\n        password: \"admin123!\",\n        role: \"ADMIN\",\n        organization: \"한국의약품안전청\",\n        isActive: true\n      });\n      console.log(\"Created admin user:\", admin.email);\n    }\n    \n    // Create reviewer user if doesn't exist\n    let reviewer = existingReviewer;\n    if (!reviewer) {\n      reviewer = await storage.createUser({\n        email: \"reviewer@pharma.com\", \n        name: \"검토자\",\n        password: \"reviewer123!\",\n        role: \"REVIEWER\",\n        organization: \"한국의약품안전청\",\n        isActive: true\n      });\n      console.log(\"Created reviewer user:\", reviewer.email);\n    }\n    \n    // Create regular user if doesn't exist\n    let user = existingUser;\n    if (!user) {\n      user = await storage.createUser({\n        email: \"user@pharma.com\",\n        name: \"일반 사용자\", \n        password: \"user123!\",\n        role: \"USER\",\n        organization: \"종합병원\",\n        isActive: true\n      });\n      console.log(\"Created regular user:\", user.email);\n    }\n    \n    // Check and create AI model if doesn't exist\n    try {\n      const existingModels = await storage.listAiModels();\n      if (existingModels.length === 0) {\n        const aiModel = await storage.createAiModel({\n          name: \"Adverse Event Classifier\",\n          version: \"1.0.0\",\n          status: \"Active\",\n          accuracy: \"89.5\",\n          avgResponseTime: 1200,\n          totalPredictions: 0\n        });\n        console.log(\"Created AI Model:\", aiModel.name);\n      }\n    } catch (error) {\n      console.log(\"AI model creation skipped (may already exist)\");\n    }\n    \n    console.log(\"Database initialization completed!\");\n    \n  } catch (error) {\n    console.error(\"Error during database initialization:\", error);\n    // Don't throw error to prevent server startup failure\n  }\n}\n\n// Only run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().then(() => process.exit(0));\n}\n\nexport { seedDatabase };","size_bytes":2848},"server/storage.ts":{"content":"import { \n  users, \n  cases, \n  aiPredictions, \n  auditLogs, \n  aiModels,\n  type User, \n  type InsertUser,\n  type Case,\n  type InsertCase,\n  type AiPrediction,\n  type InsertAiPrediction,\n  type AuditLog,\n  type InsertAuditLog,\n  type AiModel,\n  type InsertAiModel,\n  type SoftDeleteCase\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, count } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  listUsers(filters?: { role?: string; isActive?: boolean }): Promise<User[]>;\n  \n  // Case methods\n  getCase(id: string, includeDeleted?: boolean): Promise<Case | undefined>;\n  listCases(filters?: { status?: string; reporterId?: string; limit?: number; includeDeleted?: boolean }): Promise<Case[]>;\n  createCase(case_: InsertCase): Promise<Case>;\n  updateCase(id: string, updates: Partial<InsertCase>): Promise<Case | undefined>;\n  deleteCase(id: string): Promise<boolean>;\n  softDeleteCase(id: string, deletedBy: string, reason: string): Promise<Case | undefined>;\n  \n  // AI Prediction methods\n  getAiPrediction(id: string): Promise<AiPrediction | undefined>;\n  createAiPrediction(prediction: InsertAiPrediction): Promise<AiPrediction>;\n  updateAiPrediction(id: string, updates: Partial<InsertAiPrediction>): Promise<AiPrediction | undefined>;\n  listAiPredictions(caseId?: string): Promise<AiPrediction[]>;\n  \n  // Audit Log methods\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  listAuditLogs(filters?: { userId?: string; severity?: string; limit?: number }): Promise<AuditLog[]>;\n  \n  // AI Model methods\n  getAiModel(id: string): Promise<AiModel | undefined>;\n  listAiModels(): Promise<AiModel[]>;\n  createAiModel(model: InsertAiModel): Promise<AiModel>;\n  updateAiModel(id: string, updates: Partial<InsertAiModel>): Promise<AiModel | undefined>;\n  \n  // Authentication helper\n  verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean>;\n  hashPassword(password: string): Promise<string>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const hashedPassword = await this.hashPassword(user.password);\n    const [newUser] = await db\n      .insert(users)\n      .values({ ...user, password: hashedPassword })\n      .returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    if (updates.password) {\n      updates.password = await this.hashPassword(updates.password);\n    }\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async listUsers(filters?: { role?: string; isActive?: boolean }): Promise<User[]> {\n    const where = and(\n      filters?.role ? eq(users.role, filters.role as any) : undefined,\n      filters?.isActive !== undefined ? eq(users.isActive, filters.isActive) : undefined\n    );\n    \n    return await db.select().from(users).where(where).orderBy(desc(users.createdAt));\n  }\n\n  // Case methods\n  async getCase(id: string, includeDeleted: boolean = false): Promise<Case | undefined> {\n    const where = includeDeleted \n      ? eq(cases.id, id)\n      : and(eq(cases.id, id), eq(cases.isDeleted, false));\n    \n    const [case_] = await db.select().from(cases).where(where);\n    return case_ || undefined;\n  }\n\n  async listCases(filters?: { status?: string; reporterId?: string; limit?: number; includeDeleted?: boolean }): Promise<Case[]> {\n    const where = and(\n      filters?.status ? eq(cases.status, filters.status as any) : undefined,\n      filters?.reporterId ? eq(cases.reporterId, filters.reporterId) : undefined,\n      !filters?.includeDeleted ? eq(cases.isDeleted, false) : undefined\n    );\n    \n    const base = db.select().from(cases).where(where).orderBy(desc(cases.createdAt));\n    return filters?.limit ? await base.limit(filters.limit) : await base;\n  }\n\n  async createCase(case_: InsertCase): Promise<Case> {\n    // Generate case number with timestamp for uniqueness\n    const timestamp = Date.now();\n    const year = new Date().getFullYear();\n    const caseNumber = `CSE-${year}-${timestamp.toString().slice(-6)}`;\n    \n    const [newCase] = await db\n      .insert(cases)\n      .values({ ...case_, caseNumber })\n      .returning();\n    return newCase;\n  }\n\n  async updateCase(id: string, updates: Partial<InsertCase>): Promise<Case | undefined> {\n    // Enforce reporterId immutability at storage level for compliance\n    const { reporterId, ...allowedUpdates } = updates;\n    \n    const [updatedCase] = await db\n      .update(cases)\n      .set({ ...allowedUpdates, updatedAt: new Date() })\n      .where(and(eq(cases.id, id), eq(cases.isDeleted, false)))\n      .returning();\n    return updatedCase || undefined;\n  }\n\n  async deleteCase(id: string): Promise<boolean> {\n    // Legacy hard delete method - kept for compatibility but deprecated\n    // Use softDeleteCase for pharmacovigilance compliance\n    const result = await db.delete(cases).where(eq(cases.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async softDeleteCase(id: string, deletedBy: string, reason: string): Promise<Case | undefined> {\n    const [deletedCase] = await db\n      .update(cases)\n      .set({\n        isDeleted: true,\n        deletedAt: new Date(),\n        deletedBy,\n        deletionReason: reason,\n        updatedAt: new Date()\n      })\n      .where(and(eq(cases.id, id), eq(cases.isDeleted, false)))\n      .returning();\n    return deletedCase || undefined;\n  }\n\n  // AI Prediction methods\n  async getAiPrediction(id: string): Promise<AiPrediction | undefined> {\n    const [prediction] = await db.select().from(aiPredictions).where(eq(aiPredictions.id, id));\n    return prediction || undefined;\n  }\n\n  async createAiPrediction(prediction: InsertAiPrediction): Promise<AiPrediction> {\n    const [newPrediction] = await db\n      .insert(aiPredictions)\n      .values(prediction)\n      .returning();\n    return newPrediction;\n  }\n\n  async updateAiPrediction(id: string, updates: Partial<InsertAiPrediction>): Promise<AiPrediction | undefined> {\n    const [updatedPrediction] = await db\n      .update(aiPredictions)\n      .set(updates)\n      .where(eq(aiPredictions.id, id))\n      .returning();\n    return updatedPrediction || undefined;\n  }\n\n  async listAiPredictions(caseId?: string): Promise<AiPrediction[]> {\n    const where = caseId ? eq(aiPredictions.caseId, caseId) : undefined;\n    \n    return await db.select().from(aiPredictions).where(where).orderBy(desc(aiPredictions.createdAt));\n  }\n\n  // Audit Log methods\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [newLog] = await db\n      .insert(auditLogs)\n      .values(log)\n      .returning();\n    return newLog;\n  }\n\n  async listAuditLogs(filters?: { userId?: string; severity?: string; limit?: number }): Promise<AuditLog[]> {\n    const where = and(\n      filters?.userId ? eq(auditLogs.userId, filters.userId) : undefined,\n      filters?.severity ? eq(auditLogs.severity, filters.severity as any) : undefined\n    );\n    \n    const base = db.select().from(auditLogs).where(where).orderBy(desc(auditLogs.timestamp));\n    return filters?.limit ? await base.limit(filters.limit) : await base;\n  }\n\n  // AI Model methods\n  async getAiModel(id: string): Promise<AiModel | undefined> {\n    const [model] = await db.select().from(aiModels).where(eq(aiModels.id, id));\n    return model || undefined;\n  }\n\n  async listAiModels(): Promise<AiModel[]> {\n    return await db.select().from(aiModels).orderBy(desc(aiModels.createdAt));\n  }\n\n  async createAiModel(model: InsertAiModel): Promise<AiModel> {\n    const [newModel] = await db\n      .insert(aiModels)\n      .values(model)\n      .returning();\n    return newModel;\n  }\n\n  async updateAiModel(id: string, updates: Partial<InsertAiModel>): Promise<AiModel | undefined> {\n    const [updatedModel] = await db\n      .update(aiModels)\n      .set({ ...updates, lastUpdated: new Date() })\n      .where(eq(aiModels.id, id))\n      .returning();\n    return updatedModel || undefined;\n  }\n\n  // Authentication helpers\n  async verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 10);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9259},"server/types.ts":{"content":"import { User } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nexport {};","size_bytes":233},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  timestamp, \n  boolean, \n  decimal, \n  integer,\n  jsonb,\n  pgEnum\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"USER\", \"REVIEWER\", \"ADMIN\"]);\nexport const caseStatusEnum = pgEnum(\"case_status\", [\"긴급\", \"검토 필요\", \"처리중\", \"완료\"]);\nexport const severityEnum = pgEnum(\"severity\", [\"Low\", \"Medium\", \"High\", \"Critical\"]);\nexport const logSeverityEnum = pgEnum(\"log_severity\", [\"INFO\", \"WARNING\", \"HIGH\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"USER\"),\n  organization: text(\"organization\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Cases table for adverse drug reactions\nexport const cases = pgTable(\"cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseNumber: text(\"case_number\").notNull().unique(),\n  patientAge: integer(\"patient_age\").notNull(),\n  patientGender: text(\"patient_gender\").notNull(),\n  drugName: text(\"drug_name\").notNull(),\n  drugDosage: text(\"drug_dosage\"),\n  adverseReaction: text(\"adverse_reaction\").notNull(),\n  reactionDescription: text(\"reaction_description\"),\n  severity: severityEnum(\"severity\").notNull(),\n  status: caseStatusEnum(\"status\").notNull().default(\"검토 필요\"),\n  reporterId: varchar(\"reporter_id\").notNull().references(() => users.id),\n  dateReported: timestamp(\"date_reported\").notNull().default(sql`now()`),\n  dateOfReaction: timestamp(\"date_of_reaction\"),\n  concomitantMeds: jsonb(\"concomitant_meds\"),\n  medicalHistory: text(\"medical_history\"),\n  outcome: text(\"outcome\"),\n  // Soft delete fields for pharmacovigilance compliance\n  isDeleted: boolean(\"is_deleted\").notNull().default(false),\n  deletedAt: timestamp(\"deleted_at\"),\n  deletedBy: varchar(\"deleted_by\").references(() => users.id),\n  deletionReason: text(\"deletion_reason\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// AI predictions table\nexport const aiPredictions = pgTable(\"ai_predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").notNull().references(() => cases.id),\n  modelName: text(\"model_name\").notNull(),\n  modelVersion: text(\"model_version\").notNull(),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 4 }).notNull(),\n  prediction: jsonb(\"prediction\").notNull(),\n  recommendation: text(\"recommendation\"),\n  processingTime: decimal(\"processing_time\", { precision: 8, scale: 3 }),\n  humanReviewed: boolean(\"human_reviewed\").notNull().default(false),\n  reviewerId: varchar(\"reviewer_id\").references(() => users.id),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  resource: text(\"resource\").notNull(),\n  resourceId: text(\"resource_id\"),\n  details: jsonb(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  severity: logSeverityEnum(\"severity\").notNull().default(\"INFO\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n});\n\n// AI models table\nexport const aiModels = pgTable(\"ai_models\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  version: text(\"version\").notNull(),\n  status: text(\"status\").notNull().default(\"Active\"),\n  accuracy: decimal(\"accuracy\", { precision: 5, scale: 2 }),\n  avgResponseTime: integer(\"avg_response_time\"),\n  totalPredictions: integer(\"total_predictions\").notNull().default(0),\n  lastUpdated: timestamp(\"last_updated\").notNull().default(sql`now()`),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  reportedCases: many(cases),\n  auditLogs: many(auditLogs),\n  aiPredictionReviews: many(aiPredictions),\n}));\n\nexport const casesRelations = relations(cases, ({ one, many }) => ({\n  reporter: one(users, {\n    fields: [cases.reporterId],\n    references: [users.id],\n  }),\n  deletedByUser: one(users, {\n    fields: [cases.deletedBy],\n    references: [users.id],\n  }),\n  aiPredictions: many(aiPredictions),\n}));\n\nexport const aiPredictionsRelations = relations(aiPredictions, ({ one }) => ({\n  case: one(cases, {\n    fields: [aiPredictions.caseId],\n    references: [cases.id],\n  }),\n  reviewer: one(users, {\n    fields: [aiPredictions.reviewerId],\n    references: [users.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n});\n\nexport const updateUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).partial();\n\n// Custom case schema that properly handles date strings\nexport const insertCaseSchema = z.object({\n  patientAge: z.number(),\n  patientGender: z.string(),\n  drugName: z.string(),\n  drugDosage: z.string().nullable().optional(),\n  adverseReaction: z.string(),\n  reactionDescription: z.string().nullable().optional(),\n  severity: z.enum([\"Low\", \"Medium\", \"High\", \"Critical\"]),\n  status: z.enum([\"긴급\", \"검토 필요\", \"처리중\", \"완료\"]).optional(),\n  reporterId: z.string(),\n  dateReported: z.coerce.date().optional(),\n  dateOfReaction: z.coerce.date().nullable().optional(),\n  concomitantMeds: z.any().nullable().optional(),\n  medicalHistory: z.string().nullable().optional(),\n  outcome: z.string().nullable().optional(),\n});\n\n// Update schema with field-level restrictions for regulatory compliance\nexport const updateCaseSchemaReviewer = z.object({\n  // REVIEWER can only modify review-related fields\n  severity: z.enum([\"Low\", \"Medium\", \"High\", \"Critical\"]).optional(),\n  status: z.enum([\"긴급\", \"검토 필요\", \"처리중\", \"완료\"]).optional(),\n  reactionDescription: z.string().nullable().optional(),\n  outcome: z.string().nullable().optional(),\n});\n\nexport const updateCaseSchemaAdmin = z.object({\n  // ADMIN can modify additional fields but never reporterId (immutable for audit trail)\n  patientAge: z.number().optional(),\n  patientGender: z.string().optional(),\n  drugName: z.string().optional(),\n  drugDosage: z.string().nullable().optional(),\n  adverseReaction: z.string().optional(),\n  reactionDescription: z.string().nullable().optional(),\n  severity: z.enum([\"Low\", \"Medium\", \"High\", \"Critical\"]).optional(),\n  status: z.enum([\"긴급\", \"검토 필요\", \"처리중\", \"완료\"]).optional(),\n  dateOfReaction: z.coerce.date().nullable().optional(),\n  concomitantMeds: z.any().nullable().optional(),\n  medicalHistory: z.string().nullable().optional(),\n  outcome: z.string().nullable().optional(),\n});\n\n// Soft delete schema for pharmacovigilance compliance\nexport const softDeleteCaseSchema = z.object({\n  deletionReason: z.string().min(10, \"Deletion reason must be at least 10 characters\"),\n});\n\nexport const insertAiPredictionSchema = createInsertSchema(aiPredictions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAiModelSchema = createInsertSchema(aiModels).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\nexport type UpdateCaseReviewer = z.infer<typeof updateCaseSchemaReviewer>;\nexport type UpdateCaseAdmin = z.infer<typeof updateCaseSchemaAdmin>;\nexport type SoftDeleteCase = z.infer<typeof softDeleteCaseSchema>;\nexport type Case = typeof cases.$inferSelect;\nexport type InsertAiPrediction = z.infer<typeof insertAiPredictionSchema>;\nexport type AiPrediction = typeof aiPredictions.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAiModel = z.infer<typeof insertAiModelSchema>;\nexport type AiModel = typeof aiModels.$inferSelect;\n","size_bytes":8919},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { Dashboard } from \"@/components/Dashboard\";\nimport { CaseManagement } from \"@/components/CaseManagement\";\nimport { CaseDetails } from \"@/components/CaseDetails\";\nimport { CriticalCases } from \"@/components/CriticalCases\";\nimport { UserManagement } from \"@/components/UserManagement\";\nimport { AIModelManagement } from \"@/components/AIModelManagement\";\nimport { AuditLogs } from \"@/components/AuditLogs\";\nimport { SystemMonitoring } from \"@/components/SystemMonitoring\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router({ userRole }: { userRole: string }) {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <Dashboard userRole={userRole} />} />\n      <Route path=\"/cases\" component={CaseManagement} />\n      <Route path=\"/cases/:id\" component={CaseDetails} />\n      <Route path=\"/critical-cases\" component={CriticalCases} />\n      <Route path=\"/users\" component={UserManagement} />\n      <Route path=\"/ai-models\" component={AIModelManagement} />\n      <Route path=\"/audit-logs\" component={AuditLogs} />\n      <Route path=\"/monitoring\" component={SystemMonitoring} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n\nfunction App() {\n  // In development, authentication is bypassed via requireAuth middleware\n  // No login state management needed\n\n  // Custom sidebar width for drug surveillance application\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar userRole=\"ADMIN\" />\n              <div className=\"flex flex-col flex-1\">\n                <header className=\"flex items-center justify-between p-4 border-b bg-background\">\n                  <div className=\"flex items-center gap-4\">\n                    <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                    <div className=\"text-sm text-muted-foreground\">\n                      약물감시 시스템 관리자\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <ThemeToggle />\n                  </div>\n                </header>\n                <main className=\"flex-1 overflow-auto p-6\">\n                  <Router userRole=\"ADMIN\" />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3252},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 215 25% 17%;\n\n  --border: 215 15% 88%;\n\n  --card: 215 5% 95%;\n\n  --card-foreground: 215 25% 17%;\n\n  --card-border: 215 10% 90%;\n\n  --sidebar: 215 8% 92%;\n\n  --sidebar-foreground: 215 25% 17%;\n\n  --sidebar-border: 215 12% 87%;\n\n  --sidebar-primary: 25 85% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 215 15% 86%;\n\n  --sidebar-accent-foreground: 215 25% 17%;\n\n  --sidebar-ring: 25 85% 45%;\n\n  --popover: 215 10% 89%;\n\n  --popover-foreground: 215 25% 17%;\n\n  --popover-border: 215 15% 84%;\n\n  --primary: 25 85% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 215 12% 84%;\n\n  --secondary-foreground: 215 25% 17%;\n\n  --muted: 215 8% 86%;\n\n  --muted-foreground: 215 18% 35%;\n\n  --accent: 215 12% 85%;\n\n  --accent-foreground: 215 25% 17%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 215 20% 78%;\n  --ring: 25 85% 45%;\n  --chart-1: 25 85% 45%;\n  --chart-2: 140 65% 45%;\n  --chart-3: 45 90% 55%;\n  --chart-4: 280 65% 50%;\n  --chart-5: 200 80% 50%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(215 20% 10% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(215 20% 10% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(215 20% 10% / 0.04), 0px 1px 2px -1px hsl(215 20% 10% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(215 20% 10% / 0.05), 0px 1px 2px -1px hsl(215 20% 10% / 0.07);\n  --shadow-md: 0px 2px 0px 0px hsl(215 20% 10% / 0.06), 0px 2px 4px -1px hsl(215 20% 10% / 0.08);\n  --shadow-lg: 0px 2px 0px 0px hsl(215 20% 10% / 0.07), 0px 4px 6px -1px hsl(215 20% 10% / 0.10);\n  --shadow-xl: 0px 2px 0px 0px hsl(215 20% 10% / 0.08), 0px 8px 10px -1px hsl(215 20% 10% / 0.12);\n  --shadow-2xl: 0px 2px 0px 0px hsl(215 20% 10% / 0.10);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 10%;\n\n  --foreground: 215 8% 88%;\n\n  --border: 220 10% 20%;\n\n  --card: 220 12% 14%;\n\n  --card-foreground: 215 8% 88%;\n\n  --card-border: 220 10% 22%;\n\n  --sidebar: 220 15% 12%;\n\n  --sidebar-foreground: 215 8% 88%;\n\n  --sidebar-border: 220 12% 18%;\n\n  --sidebar-primary: 25 85% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 8% 20%;\n\n  --sidebar-accent-foreground: 215 8% 88%;\n\n  --sidebar-ring: 25 85% 45%;\n\n  --popover: 220 10% 18%;\n\n  --popover-foreground: 215 8% 88%;\n\n  --popover-border: 220 8% 24%;\n\n  --primary: 25 85% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 22%;\n\n  --secondary-foreground: 215 8% 88%;\n\n  --muted: 220 6% 18%;\n\n  --muted-foreground: 215 8% 65%;\n\n  --accent: 220 8% 20%;\n\n  --accent-foreground: 215 8% 88%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 28%;\n  --ring: 25 85% 45%;\n  --chart-1: 25 85% 65%;\n  --chart-2: 140 65% 65%;\n  --chart-3: 45 90% 70%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 200 80% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 30% 5% / 0.10);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 30% 5% / 0.15);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 30% 5% / 0.20), 0px 1px 2px -1px hsl(220 30% 5% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(220 30% 5% / 0.25), 0px 1px 2px -1px hsl(220 30% 5% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(220 30% 5% / 0.30), 0px 2px 4px -1px hsl(220 30% 5% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 30% 5% / 0.35), 0px 4px 6px -1px hsl(220 30% 5% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 30% 5% / 0.40), 0px 8px 10px -1px hsl(220 30% 5% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 30% 5% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9817},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIModelManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Brain, \n  Play,\n  Pause,\n  RotateCcw,\n  TrendingUp,\n  Activity,\n  Zap,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface AIModel {\n  id: string;\n  name: string;\n  version: string;\n  status: string;\n  accuracy: number;\n  lastUpdated: string;\n  avgResponseTime: number;\n  totalPredictions: number;\n}\n\nexport function AIModelManagement() {\n  const [selectedModel, setSelectedModel] = useState<AIModel | null>(null);\n  const [isRetrainDialogOpen, setIsRetrainDialogOpen] = useState(false);\n\n  // Mock data - todo: remove mock functionality\n  const models: AIModel[] = [\n    {\n      id: \"model-001\",\n      name: \"Drug Safety Classifier\",\n      version: \"v2.1.3\",\n      status: \"Active\",\n      accuracy: 92.3,\n      lastUpdated: \"2024-01-10\",\n      avgResponseTime: 245,\n      totalPredictions: 15420\n    },\n    {\n      id: \"model-002\",\n      name: \"Severity Predictor\",\n      version: \"v1.8.2\", \n      status: \"Active\",\n      accuracy: 89.7,\n      lastUpdated: \"2024-01-08\",\n      avgResponseTime: 180,\n      totalPredictions: 12890\n    },\n    {\n      id: \"model-003\",\n      name: \"Causality Analyzer\",\n      version: \"v3.0.1\",\n      status: \"Training\",\n      accuracy: 85.2,\n      lastUpdated: \"2024-01-15\",\n      avgResponseTime: 320,\n      totalPredictions: 8750\n    }\n  ];\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"Active\": return \"default\";\n      case \"Training\": return \"secondary\";\n      case \"Error\": return \"destructive\";\n      case \"Inactive\": return \"outline\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"Active\": return Activity;\n      case \"Training\": return RotateCcw;\n      case \"Error\": return AlertCircle;\n      case \"Inactive\": return Pause;\n      default: return Brain;\n    }\n  };\n\n  const handleViewModel = (model: AIModel) => {\n    setSelectedModel(model);\n    console.log('View model details:', model.id);\n  };\n\n  const handleRetrainModel = (modelId: string) => {\n    setIsRetrainDialogOpen(true);\n    console.log('Retrain model triggered:', modelId);\n  };\n\n  const handleDeployModel = (modelId: string) => {\n    console.log('Deploy model triggered:', modelId);\n  };\n\n  const handleToggleModel = (modelId: string, currentStatus: string) => {\n    const newStatus = currentStatus === \"Active\" ? \"Inactive\" : \"Active\";\n    console.log('Toggle model status:', modelId, newStatus);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"ai-model-management-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">AI 모델 관리</h1>\n          <p className=\"text-muted-foreground\">인공지능 모델 상태 및 성능 관리</p>\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-refresh-models\">\n          <RotateCcw className=\"h-4 w-4 mr-2\" />\n          모델 상태 새로고침\n        </Button>\n      </div>\n\n      {/* System Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">활성 모델</CardTitle>\n            <Brain className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-active-models\">\n              {models.filter(m => m.status === \"Active\").length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">총 {models.length}개 모델 중</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">평균 정확도</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-avg-accuracy\">\n              {(models.reduce((acc, m) => acc + m.accuracy, 0) / models.length).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">+2.3% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 예측 수</CardTitle>\n            <Zap className=\"h-4 w-4 text-amber-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-predictions\">\n              {models.reduce((acc, m) => acc + m.totalPredictions, 0).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">이번 달</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Models List */}\n      <div className=\"space-y-4\">\n        {models.map((model) => {\n          const StatusIcon = getStatusIcon(model.status);\n          return (\n            <Card key={model.id} className=\"hover-elevate\" data-testid={`model-card-${model.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-3 flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <StatusIcon className=\"h-5 w-5\" />\n                        <h3 className=\"font-medium text-lg\">{model.name}</h3>\n                      </div>\n                      <Badge variant={getStatusVariant(model.status)}>\n                        {model.status}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">{model.version}</span>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">정확도</p>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-lg font-medium\">{model.accuracy}%</p>\n                          <Progress value={model.accuracy} className=\"h-2\" />\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">응답 시간</p>\n                        <p className=\"text-lg font-medium\">{model.avgResponseTime}ms</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">예측 수</p>\n                        <p className=\"text-lg font-medium\">{model.totalPredictions.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">마지막 업데이트</p>\n                        <p className=\"text-lg font-medium\">{model.lastUpdated}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewModel(model)} data-testid={`button-view-${model.id}`}>\n                      상세보기\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleRetrainModel(model.id)} data-testid={`button-retrain-${model.id}`}>\n                      재훈련\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleToggleModel(model.id, model.status)}\n                      data-testid={`button-toggle-${model.id}`}\n                    >\n                      {model.status === \"Active\" ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Model Detail Dialog */}\n      <Dialog open={!!selectedModel} onOpenChange={() => setSelectedModel(null)}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-model-details\">\n          <DialogHeader>\n            <DialogTitle>모델 상세 정보</DialogTitle>\n            <DialogDescription>{selectedModel?.name} - {selectedModel?.version}</DialogDescription>\n          </DialogHeader>\n          {selectedModel && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-medium\">성능 지표</h4>\n                  <div className=\"space-y-2 mt-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">정확도:</span>\n                      <span className=\"font-medium\">{selectedModel.accuracy}%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">평균 응답시간:</span>\n                      <span className=\"font-medium\">{selectedModel.avgResponseTime}ms</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">총 예측 수:</span>\n                      <span className=\"font-medium\">{selectedModel.totalPredictions.toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium\">모델 정보</h4>\n                  <div className=\"space-y-2 mt-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">상태:</span>\n                      <Badge variant={getStatusVariant(selectedModel.status)}>\n                        {selectedModel.status}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">버전:</span>\n                      <span className=\"font-medium\">{selectedModel.version}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm\">마지막 업데이트:</span>\n                      <span className=\"font-medium\">{selectedModel.lastUpdated}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Retrain Dialog */}\n      <Dialog open={isRetrainDialogOpen} onOpenChange={setIsRetrainDialogOpen}>\n        <DialogContent data-testid=\"dialog-retrain-model\">\n          <DialogHeader>\n            <DialogTitle>모델 재훈련</DialogTitle>\n            <DialogDescription>선택한 모델을 새로운 데이터로 재훈련합니다</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-amber-50 dark:bg-amber-950 rounded-lg\">\n              <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                모델 재훈련은 시간이 오래 걸릴 수 있습니다. 진행 중에는 모델이 일시적으로 사용 불가능할 수 있습니다.\n              </p>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsRetrainDialogOpen(false)} data-testid=\"button-cancel-retrain\">\n                취소\n              </Button>\n              <Button onClick={() => { setIsRetrainDialogOpen(false); console.log('Retrain confirmed'); }} data-testid=\"button-confirm-retrain\">\n                재훈련 시작\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12357},"client/src/components/AppSidebar.tsx":{"content":"import { \n  Activity, \n  Brain, \n  Database, \n  FileText, \n  Home, \n  Settings, \n  Shield, \n  Users,\n  AlertTriangle,\n  BarChart3,\n  Heart\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\n\n// Menu items based on user roles\nconst menuItems = [\n  {\n    title: \"대시보드\",\n    url: \"/\",\n    icon: Home,\n    roles: [\"USER\", \"REVIEWER\", \"ADMIN\"]\n  },\n  {\n    title: \"사례 관리\",\n    url: \"/cases\",\n    icon: FileText,\n    roles: [\"USER\", \"REVIEWER\", \"ADMIN\"]\n  },\n  {\n    title: \"AI 모델 관리\",\n    url: \"/ai-models\",\n    icon: Brain,\n    roles: [\"REVIEWER\", \"ADMIN\"]\n  },\n  {\n    title: \"사용자 관리\",\n    url: \"/users\",\n    icon: Users,\n    roles: [\"ADMIN\"]\n  },\n  {\n    title: \"감사 로그\",\n    url: \"/audit-logs\",\n    icon: Shield,\n    roles: [\"REVIEWER\", \"ADMIN\"]\n  },\n  {\n    title: \"시스템 모니터링\",\n    url: \"/monitoring\",\n    icon: Activity,\n    roles: [\"ADMIN\"]\n  },\n  {\n    title: \"설정\",\n    url: \"/settings\",\n    icon: Settings,\n    roles: [\"USER\", \"REVIEWER\", \"ADMIN\"]\n  },\n];\n\n\ninterface AppSidebarProps {\n  userRole?: string;\n}\n\nexport function AppSidebar({ userRole = \"ADMIN\" }: AppSidebarProps) {\n  const [location] = useLocation();\n\n  // Filter menu items based on user role\n  const filteredItems = menuItems.filter(item => \n    item.roles.includes(userRole)\n  );\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>약물감시 시스템</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {filteredItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.url.replace('/', '') || 'home'}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>빠른 상태</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <div className=\"p-4 space-y-3\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">시스템 상태</span>\n                <div className=\"flex items-center gap-1\">\n                  <Heart className=\"h-3 w-3 text-green-500\" />\n                  <span className=\"text-green-500\">정상</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">대기 중인 사례</span>\n                <span className=\"font-medium\">12</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">AI 신뢰도</span>\n                <span className=\"font-medium\">92.3%</span>\n              </div>\n            </div>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3521},"client/src/components/AuditLogs.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Search, \n  Download,\n  Filter,\n  Shield,\n  AlertTriangle,\n  Info,\n  Eye,\n  User\n} from \"lucide-react\";\n\ninterface AuditLog {\n  id: string;\n  timestamp: string;\n  action: string;\n  userId: string;\n  userName: string;\n  resource: string;\n  details: string;\n  ipAddress: string;\n  userAgent: string;\n  severity: string;\n}\n\nexport function AuditLogs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterSeverity, setFilterSeverity] = useState(\"all\");\n  const [filterTimeRange, setFilterTimeRange] = useState(\"24h\");\n\n  // Mock data - todo: remove mock functionality\n  const auditLogs: AuditLog[] = [\n    {\n      id: \"audit-001\",\n      timestamp: \"2024-01-15 14:30:22\",\n      action: \"USER_LOGIN\",\n      userId: \"user-001\",\n      userName: \"관리자\",\n      resource: \"/auth/login\",\n      details: \"Successful login\",\n      ipAddress: \"192.168.1.100\",\n      userAgent: \"Mozilla/5.0...\",\n      severity: \"INFO\"\n    },\n    {\n      id: \"audit-002\", \n      timestamp: \"2024-01-15 14:25:15\",\n      action: \"CASE_CREATED\",\n      userId: \"user-002\",\n      userName: \"김검토\",\n      resource: \"/api/cases\",\n      details: \"Created new adverse event case CSE-2024-001\",\n      ipAddress: \"192.168.1.101\",\n      userAgent: \"Mozilla/5.0...\",\n      severity: \"INFO\"\n    },\n    {\n      id: \"audit-003\",\n      timestamp: \"2024-01-15 14:20:08\",\n      action: \"FAILED_LOGIN\",\n      userId: \"unknown\",\n      userName: \"Unknown\",\n      resource: \"/auth/login\",\n      details: \"Failed login attempt - invalid credentials\",\n      ipAddress: \"203.0.113.1\",\n      userAgent: \"curl/7.68.0\",\n      severity: \"WARNING\"\n    },\n    {\n      id: \"audit-004\",\n      timestamp: \"2024-01-15 14:15:33\",\n      action: \"USER_DELETED\",\n      userId: \"user-001\",\n      userName: \"관리자\",\n      resource: \"/api/users/user-005\",\n      details: \"Deleted user account: inactive-user@example.com\",\n      ipAddress: \"192.168.1.100\",\n      userAgent: \"Mozilla/5.0...\",\n      severity: \"HIGH\"\n    },\n    {\n      id: \"audit-005\",\n      timestamp: \"2024-01-15 14:10:45\",\n      action: \"AI_PREDICTION\",\n      userId: \"system\",\n      userName: \"AI System\",\n      resource: \"/api/ai/predict\",\n      details: \"Generated prediction for case CSE-2024-001 with 92% confidence\",\n      ipAddress: \"127.0.0.1\",\n      userAgent: \"AI-Service/2.1.0\",\n      severity: \"INFO\"\n    }\n  ];\n\n  const filteredLogs = auditLogs.filter(log => {\n    const matchesSearch = log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         log.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         log.details.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSeverity = filterSeverity === \"all\" || log.severity === filterSeverity;\n    return matchesSearch && matchesSeverity;\n  });\n\n  const getSeverityVariant = (severity: string) => {\n    switch (severity) {\n      case \"HIGH\": return \"destructive\";\n      case \"WARNING\": return \"default\";\n      case \"INFO\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case \"HIGH\": return AlertTriangle;\n      case \"WARNING\": return AlertTriangle;\n      case \"INFO\": return Info;\n      default: return Info;\n    }\n  };\n\n  const getActionIcon = (action: string) => {\n    if (action.includes(\"LOGIN\")) return User;\n    if (action.includes(\"DELETE\")) return AlertTriangle;\n    if (action.includes(\"CREATE\") || action.includes(\"UPDATE\")) return Eye;\n    return Shield;\n  };\n\n  const handleExportLogs = () => {\n    console.log('Export logs triggered');\n  };\n\n  const handleViewDetails = (logId: string) => {\n    console.log('View log details:', logId);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"audit-logs-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">감사 로그</h1>\n          <p className=\"text-muted-foreground\">시스템 활동 및 사용자 작업 추적</p>\n        </div>\n        <Button onClick={handleExportLogs} data-testid=\"button-export-logs\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          로그 내보내기\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>로그 필터</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"작업, 사용자명, 세부사항으로 검색...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-logs\"\n                />\n              </div>\n            </div>\n            <Select value={filterSeverity} onValueChange={setFilterSeverity}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-filter-severity\">\n                <SelectValue placeholder=\"심각도\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">모든 심각도</SelectItem>\n                <SelectItem value=\"HIGH\">높음</SelectItem>\n                <SelectItem value=\"WARNING\">경고</SelectItem>\n                <SelectItem value=\"INFO\">정보</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterTimeRange} onValueChange={setFilterTimeRange}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-filter-time\">\n                <SelectValue placeholder=\"기간\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"1h\">1시간</SelectItem>\n                <SelectItem value=\"24h\">24시간</SelectItem>\n                <SelectItem value=\"7d\">7일</SelectItem>\n                <SelectItem value=\"30d\">30일</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 로그</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-logs\">{filteredLogs.length}</div>\n            <p className=\"text-xs text-muted-foreground\">최근 24시간</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">높은 심각도</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-high-severity\">\n              {filteredLogs.filter(log => log.severity === \"HIGH\").length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">즉시 확인 필요</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">로그인 시도</CardTitle>\n            <User className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-login-attempts\">\n              {filteredLogs.filter(log => log.action.includes(\"LOGIN\")).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">성공 및 실패</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">고유 사용자</CardTitle>\n            <Eye className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-unique-users\">\n              {new Set(filteredLogs.map(log => log.userId)).size}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">활동한 사용자</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Logs List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>최근 활동</CardTitle>\n          <CardDescription>시간순으로 정렬된 시스템 활동 로그</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {filteredLogs.map((log) => {\n              const SeverityIcon = getSeverityIcon(log.severity);\n              const ActionIcon = getActionIcon(log.action);\n              return (\n                <div key={log.id} className=\"flex items-start gap-4 p-4 border rounded-lg hover-elevate\" data-testid={`log-item-${log.id}`}>\n                  <div className=\"flex items-center gap-2\">\n                    <ActionIcon className=\"h-4 w-4 text-muted-foreground\" />\n                    <SeverityIcon className=\"h-4 w-4\" />\n                  </div>\n                  \n                  <div className=\"flex-1 space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{log.action}</span>\n                      <Badge variant={getSeverityVariant(log.severity)}>\n                        {log.severity}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">{log.timestamp}</span>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground\">{log.details}</p>\n                    \n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                      <span>사용자: {log.userName}</span>\n                      <span>IP: {log.ipAddress}</span>\n                      <span>리소스: {log.resource}</span>\n                    </div>\n                  </div>\n                  \n                  <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewDetails(log.id)} data-testid={`button-view-${log.id}`}>\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11058},"client/src/components/CaseManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Search, \n  Plus, \n  Eye,\n  AlertTriangle,\n  Clock,\n  CheckCircle,\n  FileText,\n  Brain\n} from \"lucide-react\";\n\ninterface Case {\n  id: string;\n  patientAge: number;\n  gender: string;\n  drug: string;\n  reaction: string;\n  severity: string;\n  status: string;\n  reporter: string;\n  dateReported: string;\n  aiConfidence?: number;\n  aiRecommendation?: string;\n}\n\nexport function CaseManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [selectedCase, setSelectedCase] = useState<Case | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  // Mock data - todo: remove mock functionality\n  const cases: Case[] = [\n    {\n      id: \"CSE-2024-001\",\n      patientAge: 45,\n      gender: \"Female\",\n      drug: \"Aspirin 100mg\",\n      reaction: \"Gastrointestinal bleeding\",\n      severity: \"High\",\n      status: \"검토 필요\",\n      reporter: \"Dr. Kim\",\n      dateReported: \"2024-01-15\",\n      aiConfidence: 92,\n      aiRecommendation: \"Immediate review recommended due to severity\"\n    },\n    {\n      id: \"CSE-2024-002\",\n      patientAge: 32,\n      gender: \"Male\",\n      drug: \"Ibuprofen 400mg\",\n      reaction: \"Skin rash\",\n      severity: \"Medium\",\n      status: \"처리중\",\n      reporter: \"Dr. Lee\",\n      dateReported: \"2024-01-14\",\n      aiConfidence: 87,\n      aiRecommendation: \"Standard monitoring required\"\n    }\n  ];\n\n  const filteredCases = cases.filter(case_ => {\n    const matchesSearch = case_.drug.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         case_.reaction.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         case_.id.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterStatus === \"all\" || case_.status === filterStatus;\n    return matchesSearch && matchesFilter;\n  });\n\n  const getSeverityVariant = (severity: string) => {\n    switch (severity) {\n      case \"Critical\": return \"destructive\";\n      case \"High\": return \"destructive\";\n      case \"Medium\": return \"default\";\n      case \"Low\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"긴급\": return AlertTriangle;\n      case \"검토 필요\": return Clock;\n      case \"처리중\": return Brain;\n      case \"완료\": return CheckCircle;\n      default: return FileText;\n    }\n  };\n\n  const handleViewCase = (case_: Case) => {\n    setSelectedCase(case_);\n    console.log('View case details:', case_.id);\n  };\n\n  const handleCreateCase = () => {\n    setIsCreateDialogOpen(true);\n    console.log('Create new case triggered');\n  };\n\n  const handleProcessCase = (caseId: string) => {\n    console.log('Process case triggered:', caseId);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"case-management-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">사례 관리</h1>\n          <p className=\"text-muted-foreground\">부작용 사례 관리 및 처리</p>\n        </div>\n        <Button onClick={handleCreateCase} data-testid=\"button-create-case\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          새 사례 등록\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>사례 검색</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"약물명, 반응, 사례 ID로 검색...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-cases\"\n                />\n              </div>\n            </div>\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"상태 필터\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">모든 상태</SelectItem>\n                <SelectItem value=\"긴급\">긴급</SelectItem>\n                <SelectItem value=\"검토 필요\">검토 필요</SelectItem>\n                <SelectItem value=\"처리중\">처리중</SelectItem>\n                <SelectItem value=\"완료\">완료</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cases List */}\n      <div className=\"space-y-4\">\n        {filteredCases.map((case_) => {\n          const StatusIcon = getStatusIcon(case_.status);\n          return (\n            <Card key={case_.id} className=\"hover-elevate\" data-testid={`case-card-${case_.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-2 flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"font-medium text-lg\">{case_.id}</span>\n                      <Badge variant={getSeverityVariant(case_.severity)}>\n                        {case_.severity}\n                      </Badge>\n                      <div className=\"flex items-center gap-1\">\n                        <StatusIcon className=\"h-4 w-4\" />\n                        <span className=\"text-sm\">{case_.status}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">환자</p>\n                        <p className=\"font-medium\">{case_.patientAge}세 {case_.gender}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">약물</p>\n                        <p className=\"font-medium\">{case_.drug}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">반응</p>\n                        <p className=\"font-medium\">{case_.reaction}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">보고자</p>\n                        <p className=\"font-medium\">{case_.reporter}</p>\n                      </div>\n                    </div>\n\n                    {case_.aiConfidence && (\n                      <div className=\"flex items-center gap-4 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                        <Brain className=\"h-4 w-4 text-blue-600\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">AI 분석 결과</p>\n                          <p className=\"text-xs text-muted-foreground\">신뢰도: {case_.aiConfidence}% | {case_.aiRecommendation}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewCase(case_)} data-testid={`button-view-${case_.id}`}>\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      상세보기\n                    </Button>\n                    <Button size=\"sm\" onClick={() => handleProcessCase(case_.id)} data-testid={`button-process-${case_.id}`}>\n                      처리\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Case Detail Dialog */}\n      <Dialog open={!!selectedCase} onOpenChange={() => setSelectedCase(null)}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-case-details\">\n          <DialogHeader>\n            <DialogTitle>사례 상세 정보</DialogTitle>\n            <DialogDescription>사례 ID: {selectedCase?.id}</DialogDescription>\n          </DialogHeader>\n          {selectedCase && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>환자 정보</Label>\n                  <p className=\"text-sm mt-1\">{selectedCase.patientAge}세 {selectedCase.gender}</p>\n                </div>\n                <div>\n                  <Label>중증도</Label>\n                  <Badge className=\"mt-1\" variant={getSeverityVariant(selectedCase.severity)}>\n                    {selectedCase.severity}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <Label>약물</Label>\n                <p className=\"text-sm mt-1\">{selectedCase.drug}</p>\n              </div>\n              <div>\n                <Label>부작용 반응</Label>\n                <p className=\"text-sm mt-1\">{selectedCase.reaction}</p>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Case Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-create-case\">\n          <DialogHeader>\n            <DialogTitle>새 사례 등록</DialogTitle>\n            <DialogDescription>새로운 부작용 사례를 등록합니다</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"patient-age\">환자 나이</Label>\n                <Input id=\"patient-age\" placeholder=\"나이\" data-testid=\"input-patient-age\" />\n              </div>\n              <div>\n                <Label htmlFor=\"patient-gender\">성별</Label>\n                <Select>\n                  <SelectTrigger data-testid=\"select-patient-gender\">\n                    <SelectValue placeholder=\"성별 선택\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Male\">남성</SelectItem>\n                    <SelectItem value=\"Female\">여성</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"drug-name\">약물명</Label>\n              <Input id=\"drug-name\" placeholder=\"약물명 및 용량\" data-testid=\"input-drug-name\" />\n            </div>\n            <div>\n              <Label htmlFor=\"reaction\">부작용 반응</Label>\n              <Textarea id=\"reaction\" placeholder=\"부작용 상세 설명\" data-testid=\"textarea-reaction\" />\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)} data-testid=\"button-cancel-create\">\n                취소\n              </Button>\n              <Button onClick={() => { setIsCreateDialogOpen(false); console.log('Create case submitted'); }} data-testid=\"button-submit-create\">\n                등록\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12011},"client/src/components/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  AlertTriangle, \n  Brain, \n  FileText, \n  TrendingUp, \n  Users, \n  Activity,\n  Clock,\n  CheckCircle\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ninterface DashboardStats {\n  totalCases: number;\n  pendingCases: number;\n  criticalCases: number;\n  aiAccuracy: number;\n  systemHealth: number;\n}\n\ninterface RecentCase {\n  id: string;\n  drug: string;\n  severity: string;\n  status: string;\n  aiConfidence: number | null;\n}\n\ninterface DashboardProps {\n  userRole?: string;\n}\n\nexport function Dashboard({ userRole = \"ADMIN\" }: DashboardProps) {\n  const [, setLocation] = useLocation();\n\n  // Fetch dashboard statistics\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api\", \"dashboard\", \"stats\"],\n    staleTime: 30000, // Cache for 30 seconds\n  });\n\n  // Fetch recent cases\n  const { data: recentCases, isLoading: casesLoading } = useQuery<RecentCase[]>({\n    queryKey: [\"/api\", \"dashboard\", \"recent-cases\"],\n    staleTime: 60000, // Cache for 1 minute\n  });\n\n  const isLoading = statsLoading || casesLoading;\n\n  const handleViewCase = (caseId: string) => {\n    setLocation(`/cases/${caseId}`);\n  };\n\n  const handleProcessPending = () => {\n    setLocation('/cases');\n  };\n\n  const handleViewCriticalCases = () => {\n    setLocation('/critical-cases');\n  };\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"dashboard-main\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">대시보드</h1>\n            <p className=\"text-muted-foreground\">약물감시 시스템 현황</p>\n          </div>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-3 bg-muted animate-pulse rounded\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">대시보드</h1>\n          <p className=\"text-muted-foreground\">약물감시 시스템 현황</p>\n        </div>\n        {userRole === \"ADMIN\" && (\n          <Button onClick={handleProcessPending} data-testid=\"button-process-pending\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            대기 중인 사례 처리\n          </Button>\n        )}\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 사례 수</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-cases\">{stats?.totalCases?.toLocaleString() || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">+12% from last month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">대기 중인 사례</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-amber-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-pending-cases\">{stats?.pendingCases || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">-3 from yesterday</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">AI 정확도</CardTitle>\n            <Brain className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-ai-accuracy\">{stats?.aiAccuracy || 0}%</div>\n            <p className=\"text-xs text-muted-foreground\">+2.1% from last week</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">시스템 상태</CardTitle>\n            <Activity className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-system-health\">{stats?.systemHealth || 0}%</div>\n            <p className=\"text-xs text-green-600\">All systems operational</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Cases */}\n      <Card>\n        <CardHeader>\n          <CardTitle>최근 사례</CardTitle>\n          <CardDescription>최근 제출된 부작용 사례</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentCases && recentCases.length > 0 ? recentCases.map((case_: RecentCase) => (\n              <div key={case_.id} className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\" data-testid={`case-item-${case_.id}`}>\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{case_.id}</span>\n                    <Badge variant={case_.severity === 'High' ? 'destructive' : case_.severity === 'Medium' ? 'default' : 'secondary'}>\n                      {case_.severity}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{case_.drug}</p>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium\">{case_.status}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {case_.aiConfidence ? `AI 신뢰도: ${case_.aiConfidence}%` : 'AI 분석 대기중'}\n                    </p>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewCase(case_.id)} data-testid={`button-view-${case_.id}`}>\n                    상세보기\n                  </Button>\n                </div>\n              </div>\n            )) : (\n              <p className=\"text-center text-muted-foreground py-4\">최근 사례가 없습니다.</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Critical Alerts */}\n      {stats && stats.criticalCases > 0 && (\n        <Card className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950\">\n          <CardHeader>\n            <CardTitle className=\"text-red-700 dark:text-red-300 flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              긴급 알림\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-red-600 dark:text-red-400\" data-testid=\"text-critical-alerts\">\n              {stats.criticalCases}개의 긴급 처리가 필요한 사례가 있습니다.\n            </p>\n            <Button variant=\"destructive\" size=\"sm\" className=\"mt-2\" onClick={handleViewCriticalCases} data-testid=\"button-view-critical\">\n              긴급 사례 확인\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8107},"client/src/components/SystemMonitoring.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Activity, \n  Database,\n  Server,\n  Cpu,\n  HardDrive,\n  Wifi,\n  AlertTriangle,\n  CheckCircle,\n  RefreshCw,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface SystemMetric {\n  name: string;\n  value: number;\n  unit: string;\n  status: string;\n  threshold: number;\n}\n\ninterface ServiceStatus {\n  name: string;\n  status: string;\n  uptime: string;\n  lastCheck: string;\n  responseTime?: number;\n}\n\nexport function SystemMonitoring() {\n  // Mock data - todo: remove mock functionality\n  const systemMetrics: SystemMetric[] = [\n    { name: \"CPU 사용률\", value: 45.2, unit: \"%\", status: \"normal\", threshold: 80 },\n    { name: \"메모리 사용률\", value: 62.8, unit: \"%\", status: \"normal\", threshold: 85 },\n    { name: \"디스크 사용률\", value: 78.5, unit: \"%\", status: \"warning\", threshold: 80 },\n    { name: \"네트워크 대역폭\", value: 234.7, unit: \"Mbps\", status: \"normal\", threshold: 500 }\n  ];\n\n  const services: ServiceStatus[] = [\n    {\n      name: \"웹 서버\",\n      status: \"healthy\",\n      uptime: \"15일 3시간\",\n      lastCheck: \"2024-01-15 14:30:00\",\n      responseTime: 120\n    },\n    {\n      name: \"데이터베이스\",\n      status: \"healthy\", \n      uptime: \"15일 3시간\",\n      lastCheck: \"2024-01-15 14:30:00\",\n      responseTime: 45\n    },\n    {\n      name: \"AI 서비스\",\n      status: \"healthy\",\n      uptime: \"2일 8시간\",\n      lastCheck: \"2024-01-15 14:30:00\", \n      responseTime: 250\n    },\n    {\n      name: \"캐시 서버\",\n      status: \"warning\",\n      uptime: \"1일 2시간\",\n      lastCheck: \"2024-01-15 14:30:00\",\n      responseTime: 780\n    }\n  ];\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case \"healthy\": return \"default\";\n      case \"warning\": return \"secondary\";\n      case \"error\": return \"destructive\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"healthy\": return CheckCircle;\n      case \"warning\": return AlertTriangle;\n      case \"error\": return AlertTriangle;\n      default: return Activity;\n    }\n  };\n\n  const getMetricColor = (status: string) => {\n    switch (status) {\n      case \"normal\": return \"bg-green-500\";\n      case \"warning\": return \"bg-yellow-500\";\n      case \"critical\": return \"bg-red-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const handleRefreshMetrics = () => {\n    console.log('Refresh metrics triggered');\n  };\n\n  const handleRestartService = (serviceName: string) => {\n    console.log('Restart service triggered:', serviceName);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"system-monitoring-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">시스템 모니터링</h1>\n          <p className=\"text-muted-foreground\">시스템 성능 및 서비스 상태 모니터링</p>\n        </div>\n        <Button onClick={handleRefreshMetrics} data-testid=\"button-refresh-metrics\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          새로고침\n        </Button>\n      </div>\n\n      {/* System Health Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">시스템 상태</CardTitle>\n            <Activity className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"status-system-health\">정상</div>\n            <p className=\"text-xs text-muted-foreground\">모든 서비스 운영 중</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">활성 사용자</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-active-users\">23</div>\n            <p className=\"text-xs text-muted-foreground\">현재 접속 중</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">응답 시간</CardTitle>\n            <Wifi className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-response-time\">145ms</div>\n            <p className=\"text-xs text-muted-foreground\">평균 응답 시간</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">가동 시간</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-uptime\">99.9%</div>\n            <p className=\"text-xs text-muted-foreground\">이번 달</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* System Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>시스템 리소스</CardTitle>\n          <CardDescription>실시간 시스템 리소스 사용률</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {systemMetrics.map((metric, index) => (\n              <div key={index} className=\"space-y-2\" data-testid={`metric-${metric.name}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-3 h-3 rounded-full ${getMetricColor(metric.status)}`} />\n                    <span className=\"font-medium\">{metric.name}</span>\n                  </div>\n                  <span className=\"text-sm font-medium\">\n                    {metric.value}{metric.unit}\n                  </span>\n                </div>\n                <Progress \n                  value={metric.value} \n                  className=\"h-2\"\n                  max={metric.threshold}\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>0{metric.unit}</span>\n                  <span>임계값: {metric.threshold}{metric.unit}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Service Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>서비스 상태</CardTitle>\n          <CardDescription>각 서비스의 건강 상태 및 성능 지표</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {services.map((service, index) => {\n              const StatusIcon = getStatusIcon(service.status);\n              return (\n                <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\" data-testid={`service-${service.name}`}>\n                  <div className=\"flex items-center gap-4\">\n                    <StatusIcon className=\"h-5 w-5\" />\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-medium\">{service.name}</h3>\n                        <Badge variant={getStatusVariant(service.status)}>\n                          {service.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground mt-1\">\n                        <span>가동시간: {service.uptime}</span>\n                        {service.responseTime && (\n                          <span>응답시간: {service.responseTime}ms</span>\n                        )}\n                        <span>마지막 확인: {service.lastCheck}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => handleRestartService(service.name)}\n                    data-testid={`button-restart-${service.name}`}\n                  >\n                    재시작\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Charts Placeholder */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>CPU 사용률 추이</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center border-2 border-dashed border-muted-foreground/25 rounded-lg\">\n              <p className=\"text-muted-foreground\">CPU 사용률 차트 영역</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>메모리 사용률 추이</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center border-2 border-dashed border-muted-foreground/25 rounded-lg\">\n              <p className=\"text-muted-foreground\">메모리 사용률 차트 영역</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9838},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n}","size_bytes":1603},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":692},"client/src/components/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Search, \n  Plus, \n  Edit,\n  Trash2,\n  UserCheck,\n  UserX,\n  Shield,\n  Users\n} from \"lucide-react\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  organization: string;\n  isActive: boolean;\n  lastLogin: string;\n  createdAt: string;\n}\n\nexport function UserManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRole, setFilterRole] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  // Mock data - todo: remove mock functionality\n  const users: User[] = [\n    {\n      id: \"user-001\",\n      email: \"admin@pharma.com\",\n      name: \"관리자\",\n      role: \"ADMIN\",\n      organization: \"시스템 관리부\",\n      isActive: true,\n      lastLogin: \"2024-01-15 10:30\",\n      createdAt: \"2023-01-01\"\n    },\n    {\n      id: \"user-002\", \n      email: \"reviewer@pharma.com\",\n      name: \"김검토\",\n      role: \"REVIEWER\",\n      organization: \"약물안전부\",\n      isActive: true,\n      lastLogin: \"2024-01-15 09:15\",\n      createdAt: \"2023-06-15\"\n    },\n    {\n      id: \"user-003\",\n      email: \"user@pharma.com\", \n      name: \"이사용\",\n      role: \"USER\",\n      organization: \"임상연구부\",\n      isActive: false,\n      lastLogin: \"2024-01-10 14:22\",\n      createdAt: \"2023-08-20\"\n    }\n  ];\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.organization.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterRole === \"all\" || user.role === filterRole;\n    return matchesSearch && matchesFilter;\n  });\n\n  const getRoleVariant = (role: string) => {\n    switch (role) {\n      case \"ADMIN\": return \"destructive\";\n      case \"REVIEWER\": return \"default\";\n      case \"USER\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"ADMIN\": return Shield;\n      case \"REVIEWER\": return UserCheck;\n      case \"USER\": return Users;\n      default: return Users;\n    }\n  };\n\n  const handleCreateUser = () => {\n    setIsCreateDialogOpen(true);\n    console.log('Create new user triggered');\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    console.log('Edit user triggered:', user.id);\n  };\n\n  const handleToggleUser = (userId: string, isActive: boolean) => {\n    console.log('Toggle user status:', userId, !isActive);\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    console.log('Delete user triggered:', userId);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"user-management-main\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">사용자 관리</h1>\n          <p className=\"text-muted-foreground\">시스템 사용자 계정 관리</p>\n        </div>\n        <Button onClick={handleCreateUser} data-testid=\"button-create-user\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          새 사용자 추가\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>사용자 검색</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"이름, 이메일, 조직으로 검색...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-users\"\n                />\n              </div>\n            </div>\n            <Select value={filterRole} onValueChange={setFilterRole}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-role\">\n                <SelectValue placeholder=\"역할 필터\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">모든 역할</SelectItem>\n                <SelectItem value=\"ADMIN\">관리자</SelectItem>\n                <SelectItem value=\"REVIEWER\">검토자</SelectItem>\n                <SelectItem value=\"USER\">사용자</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users List */}\n      <div className=\"space-y-4\">\n        {filteredUsers.map((user) => {\n          const RoleIcon = getRoleIcon(user.role);\n          return (\n            <Card key={user.id} className=\"hover-elevate\" data-testid={`user-card-${user.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar>\n                      <AvatarImage src=\"\" alt={user.name} />\n                      <AvatarFallback>{user.name.slice(0, 2)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-medium\">{user.name}</h3>\n                        <Badge variant={getRoleVariant(user.role)}>\n                          <RoleIcon className=\"h-3 w-3 mr-1\" />\n                          {user.role}\n                        </Badge>\n                        {user.isActive ? (\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            활성\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">\n                            비활성\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      <p className=\"text-xs text-muted-foreground\">{user.organization}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-right text-sm\">\n                      <p className=\"text-muted-foreground\">마지막 로그인</p>\n                      <p className=\"font-medium\">{user.lastLogin}</p>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => handleEditUser(user)} data-testid={`button-edit-${user.id}`}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleToggleUser(user.id, user.isActive)}\n                        data-testid={`button-toggle-${user.id}`}\n                      >\n                        {user.isActive ? <UserX className=\"h-4 w-4\" /> : <UserCheck className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDeleteUser(user.id)}\n                        data-testid={`button-delete-${user.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Create User Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"dialog-create-user\">\n          <DialogHeader>\n            <DialogTitle>새 사용자 추가</DialogTitle>\n            <DialogDescription>새로운 시스템 사용자를 추가합니다</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"user-name\">이름</Label>\n              <Input id=\"user-name\" placeholder=\"사용자 이름\" data-testid=\"input-user-name\" />\n            </div>\n            <div>\n              <Label htmlFor=\"user-email\">이메일</Label>\n              <Input id=\"user-email\" type=\"email\" placeholder=\"email@example.com\" data-testid=\"input-user-email\" />\n            </div>\n            <div>\n              <Label htmlFor=\"user-organization\">조직</Label>\n              <Input id=\"user-organization\" placeholder=\"소속 조직\" data-testid=\"input-user-organization\" />\n            </div>\n            <div>\n              <Label htmlFor=\"user-role\">역할</Label>\n              <Select>\n                <SelectTrigger data-testid=\"select-user-role\">\n                  <SelectValue placeholder=\"역할 선택\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"USER\">사용자</SelectItem>\n                  <SelectItem value=\"REVIEWER\">검토자</SelectItem>\n                  <SelectItem value=\"ADMIN\">관리자</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)} data-testid=\"button-cancel-create-user\">\n                취소\n              </Button>\n              <Button onClick={() => { setIsCreateDialogOpen(false); console.log('Create user submitted'); }} data-testid=\"button-submit-create-user\">\n                추가\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":10609},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import React, { forwardRef } from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4820},"client/src/components/ui/toaster.tsx":{"content":"import React from \"react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":798},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/ai-service.ts":{"content":"import OpenAI from \"openai\";\nimport type { Case, InsertAiPrediction } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface SeverityAnalysis {\n  severity: \"Low\" | \"Medium\" | \"High\" | \"Critical\";\n  confidence: number;\n  reasoning: string;\n  riskFactors: string[];\n}\n\nexport interface CaseRecommendations {\n  immediateActions: string[];\n  followUpRequired: string[];\n  regulatoryNotifications: string[];\n  additionalDataNeeded: string[];\n}\n\nexport interface AIAnalysisResult {\n  severity: SeverityAnalysis;\n  recommendations: CaseRecommendations;\n  confidence: number;\n  processingTime: number;\n}\n\n/**\n * AI-powered pharmacovigilance case analysis service\n * Provides severity assessment and recommendations for adverse drug reactions\n */\nexport class AIAnalysisService {\n  private modelName = \"gpt-5\";\n  private modelVersion = \"2025-08-07\";\n\n  /**\n   * Analyzes a pharmacovigilance case for severity and provides recommendations\n   */\n  async analyzeCase(caseData: Case): Promise<AIAnalysisResult> {\n    const startTime = Date.now();\n\n    try {\n      const systemPrompt = this.buildSystemPrompt();\n      const userPrompt = this.buildUserPrompt(caseData);\n\n      const response = await openai.chat.completions.create({\n        model: this.modelName,\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userPrompt }\n        ],\n        response_format: { type: \"json_object\" },\n        // Note: gpt-5 only supports default temperature\n      });\n\n      const analysisResult = JSON.parse(response.choices[0].message.content || \"{}\");\n      const processingTime = (Date.now() - startTime) / 1000;\n\n      return {\n        severity: {\n          severity: this.validateSeverity(analysisResult.severity?.level),\n          confidence: Math.max(0, Math.min(1, analysisResult.severity?.confidence || 0)),\n          reasoning: analysisResult.severity?.reasoning || \"No reasoning provided\",\n          riskFactors: Array.isArray(analysisResult.severity?.riskFactors) \n            ? analysisResult.severity.riskFactors \n            : []\n        },\n        recommendations: {\n          immediateActions: Array.isArray(analysisResult.recommendations?.immediateActions)\n            ? analysisResult.recommendations.immediateActions\n            : [],\n          followUpRequired: Array.isArray(analysisResult.recommendations?.followUpRequired)\n            ? analysisResult.recommendations.followUpRequired\n            : [],\n          regulatoryNotifications: Array.isArray(analysisResult.recommendations?.regulatoryNotifications)\n            ? analysisResult.recommendations.regulatoryNotifications\n            : [],\n          additionalDataNeeded: Array.isArray(analysisResult.recommendations?.additionalDataNeeded)\n            ? analysisResult.recommendations.additionalDataNeeded\n            : []\n        },\n        confidence: Math.max(0, Math.min(1, analysisResult.overallConfidence || 0)),\n        processingTime\n      };\n    } catch (error) {\n      console.error(\"AI analysis error:\", error);\n      throw new Error(`AI analysis failed: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n  }\n\n  /**\n   * Creates an AI prediction record for storage\n   */\n  async createPredictionRecord(\n    caseId: string, \n    analysisResult: AIAnalysisResult\n  ): Promise<InsertAiPrediction> {\n    return {\n      caseId,\n      modelName: this.modelName,\n      modelVersion: this.modelVersion,\n      confidence: analysisResult.confidence.toString(),\n      prediction: {\n        severity: analysisResult.severity,\n        recommendations: analysisResult.recommendations,\n        analysisTimestamp: new Date().toISOString()\n      },\n      recommendation: this.formatRecommendationSummary(analysisResult.recommendations),\n      processingTime: analysisResult.processingTime.toString(),\n      humanReviewed: false\n    };\n  }\n\n  private buildSystemPrompt(): string {\n    return `You are an expert pharmacovigilance analyst specialized in adverse drug reaction assessment. \n\nYour role is to analyze adverse drug reaction (ADR) cases according to international pharmacovigilance standards including ICH E2B guidelines and provide:\n\n1. SEVERITY ASSESSMENT: Classify the severity as Low, Medium, High, or Critical based on:\n   - Patient safety implications\n   - Life-threatening potential\n   - Hospitalization requirements\n   - Disability or significant incapacity\n   - Congenital anomaly/birth defect\n   - Death or life-threatening events\n\n2. RECOMMENDATIONS: Provide actionable recommendations for:\n   - Immediate actions required\n   - Follow-up investigations needed\n   - Regulatory notifications required\n   - Additional data collection needs\n\nRESPONSE FORMAT: Respond with JSON in this exact structure:\n{\n  \"severity\": {\n    \"level\": \"Low|Medium|High|Critical\",\n    \"confidence\": 0.0-1.0,\n    \"reasoning\": \"detailed explanation\",\n    \"riskFactors\": [\"factor1\", \"factor2\"]\n  },\n  \"recommendations\": {\n    \"immediateActions\": [\"action1\", \"action2\"],\n    \"followUpRequired\": [\"followup1\", \"followup2\"],\n    \"regulatoryNotifications\": [\"notification1\"],\n    \"additionalDataNeeded\": [\"data1\", \"data2\"]\n  },\n  \"overallConfidence\": 0.0-1.0\n}\n\nConsider Korean pharmaceutical regulations and adverse event reporting standards when applicable.`;\n  }\n\n  private buildUserPrompt(caseData: Case): string {\n    return `Please analyze this adverse drug reaction case:\n\nCASE DETAILS:\n- Case Number: ${caseData.caseNumber}\n- Patient: ${caseData.patientAge}세 ${caseData.patientGender}\n- Drug: ${caseData.drugName}${caseData.drugDosage ? ` (${caseData.drugDosage})` : ''}\n- Adverse Reaction: ${caseData.adverseReaction}\n- Reaction Description: ${caseData.reactionDescription || 'Not provided'}\n- Current Severity: ${caseData.severity}\n- Current Status: ${caseData.status}\n- Date of Reaction: ${caseData.dateOfReaction || 'Not specified'}\n- Concomitant Medications: ${caseData.concomitantMeds || 'None reported'}\n- Medical History: ${caseData.medicalHistory || 'Not provided'}\n- Outcome: ${caseData.outcome || 'Unknown'}\n- Report Date: ${caseData.dateReported}\n\nPlease provide a comprehensive pharmacovigilance analysis with severity assessment and recommendations according to international standards.`;\n  }\n\n  private validateSeverity(severity: string): \"Low\" | \"Medium\" | \"High\" | \"Critical\" {\n    const validSeverities = [\"Low\", \"Medium\", \"High\", \"Critical\"];\n    return validSeverities.includes(severity) ? severity as any : \"Medium\";\n  }\n\n  private formatRecommendationSummary(recommendations: CaseRecommendations): string {\n    const sections = [];\n    \n    if (recommendations.immediateActions.length > 0) {\n      sections.push(`즉시 조치: ${recommendations.immediateActions.join(', ')}`);\n    }\n    \n    if (recommendations.followUpRequired.length > 0) {\n      sections.push(`후속 조치: ${recommendations.followUpRequired.join(', ')}`);\n    }\n    \n    if (recommendations.regulatoryNotifications.length > 0) {\n      sections.push(`규제 당국 보고: ${recommendations.regulatoryNotifications.join(', ')}`);\n    }\n    \n    if (recommendations.additionalDataNeeded.length > 0) {\n      sections.push(`추가 데이터 필요: ${recommendations.additionalDataNeeded.join(', ')}`);\n    }\n    \n    return sections.join(' | ') || '추가 권장사항 없음';\n  }\n}\n\n// Singleton instance\nexport const aiAnalysisService = new AIAnalysisService();","size_bytes":7565},"usermanual.md":{"content":"# 약물감시 시스템 사용자 매뉴얼\n\n## 📋 목차\n1. [시스템 개요](#시스템-개요)\n2. [로그인 및 시작하기](#로그인-및-시작하기)\n3. [대시보드 사용법](#대시보드-사용법)\n4. [부작용 사례 관리](#부작용-사례-관리)\n5. [AI 분석 기능](#ai-분석-기능)\n6. [사용자 관리 (관리자용)](#사용자-관리-관리자용)\n7. [감사 로그 확인](#감사-로그-확인)\n8. [시스템 모니터링](#시스템-모니터링)\n9. [문제해결 가이드](#문제해결-가이드)\n\n---\n\n## 🎯 시스템 개요\n\n### 약물감시 시스템이란?\n약물감시(Pharmacovigilance) 시스템은 의약품 부작용을 체계적으로 수집, 분석, 관리하는 전문 플랫폼입니다. \n\n### 주요 기능\n- **부작용 사례 등록 및 관리**: 의약품 부작용 신고서 작성 및 처리\n- **AI 기반 분석**: GPT-5를 활용한 자동 부작용 분석 및 위험도 평가\n- **실시간 대시보드**: 통계 현황 및 주요 지표 모니터링\n- **규제 준수**: MFDS/KAERS 보고 기준에 맞는 감사 로그 관리\n- **역할 기반 접근**: 사용자 권한에 따른 차등 기능 제공\n\n### 사용자 역할\n| 역할 | 설명 | 주요 권한 |\n|------|------|----------|\n| **관리자 (ADMIN)** | 시스템 전체 관리 | 모든 기능 접근, 사용자 관리, 시스템 설정 |\n| **검토자 (REVIEWER)** | 부작용 사례 검토 | 사례 검토/승인, AI 분석 실행 |\n| **일반사용자 (USER)** | 부작용 신고 | 사례 등록, 본인 사례 조회 |\n\n---\n\n## 🔐 로그인 및 시작하기\n\n### 1단계: 시스템 접속\n1. 웹 브라우저에서 시스템 URL에 접속합니다.\n2. 약물감시 시스템 로그인 화면이 표시됩니다.\n\n### 2단계: 로그인 방법\n\n#### 방법 1: 직접 로그인\n1. **이메일 주소** 입력란에 계정 이메일을 입력합니다.\n2. **비밀번호** 입력란에 비밀번호를 입력합니다.\n3. 비밀번호 보기 아이콘(👁️)을 클릭하여 입력 내용을 확인할 수 있습니다.\n4. **로그인** 버튼을 클릭합니다.\n\n#### 방법 2: 데모 계정 사용 (테스트용)\n화면 상단의 **데모 계정** 섹션에서 원하는 역할을 클릭하면 자동으로 로그인 정보가 입력됩니다:\n\n| 데모 계정 | 이메일 | 역할 |\n|-----------|--------|------|\n| ADMIN | admin@pharma.com | 시스템 관리자 |\n| REVIEWER | reviewer@pharma.com | 검토자 |\n| USER | user@pharma.com | 일반 사용자 |\n\n### 3단계: 로그인 후 화면\n로그인 성공 시 다음이 표시됩니다:\n- 좌측: 네비게이션 메뉴 (사이드바)\n- 상단: 사용자 정보 및 로그아웃 버튼\n- 메인 영역: 대시보드 화면\n\n---\n\n## 📊 대시보드 사용법\n\n대시보드는 시스템의 현재 상황을 한눈에 볼 수 있는 메인 화면입니다.\n\n### 주요 통계 카드\n\n#### 1. 총 사례 수\n- **표시 내용**: 시스템에 등록된 전체 부작용 사례 수\n- **업데이트**: 실시간 자동 갱신\n- **활용법**: 전체적인 부작용 신고 추세 파악\n\n#### 2. 대기 중인 사례\n- **표시 내용**: 처리가 필요한 사례 수 (제출됨/검토중 상태)\n- **경고 표시**: 주황색 삼각형 아이콘으로 주의 표시\n- **활용법**: 우선 처리해야 할 업무량 확인\n\n#### 3. AI 정확도\n- **표시 내용**: AI 분석의 평균 신뢰도 (백분율)\n- **계산 방식**: 모든 AI 예측 결과의 신뢰도 평균\n- **활용법**: AI 분석 시스템의 성능 모니터링\n\n#### 4. 시스템 상태\n- **표시 내용**: 전체 시스템의 건강도\n- **정상 범위**: 98% 이상\n- **활용법**: 시스템 안정성 확인\n\n### 최근 사례 섹션\n- **표시 내용**: 최근 제출된 부작용 사례 5건\n- **포함 정보**:\n  - 사례 번호 (예: CSE-2025-457538)\n  - 의심 의약품명\n  - 위험도 등급 (Low/Medium/High)\n  - 처리 상태\n  - AI 신뢰도 (분석된 경우)\n\n#### 상세보기 방법\n1. 원하는 사례의 **상세보기** 버튼 클릭\n2. 사례 상세 정보 팝업창 열림\n3. 필요시 해당 사례로 이동하여 추가 작업 수행\n\n### 긴급 알림\n시스템에서 긴급 처리가 필요한 사례가 발견되면:\n- **빨간색 경고 박스**가 화면 하단에 표시됩니다\n- 긴급 사례 수와 **긴급 사례 확인** 버튼이 제공됩니다\n- 즉시 확인하여 적절한 조치를 취하시기 바랍니다\n\n---\n\n## 📝 부작용 사례 관리\n\n부작용 사례 관리는 약물감시 시스템의 핵심 기능입니다.\n\n### 사례 관리 화면 접근\n1. 좌측 메뉴에서 **부작용 사례** 클릭\n2. 사례 관리 메인 화면으로 이동\n\n### 새 사례 등록\n\n#### 1단계: 등록 시작\n1. **새 사례 등록** 버튼 클릭\n2. 사례 등록 팝업창이 열립니다\n\n#### 2단계: 환자 정보 입력\n- **환자 나이**: 숫자로 입력 (예: 65)\n- **환자 성별**: 드롭다운에서 선택\n  - 남성\n  - 여성\n  - 기타\n\n#### 3단계: 의약품 정보 입력\n- **약물명 및 용량**: 정확한 의약품명과 복용량 입력\n  - 예시: \"아스피린 100mg\", \"타이레놀 500mg\"\n  - 제네릭명 또는 상품명 모두 가능\n\n#### 4단계: 부작용 상세 설명\n- **부작용 내용**: 발생한 증상을 상세히 기술\n  - 발생 시점 명시 (복용 후 몇 시간/일)\n  - 증상의 정도와 지속 기간\n  - 관련 검사 결과 (있는 경우)\n\n#### 5단계: 등록 완료\n1. 모든 필수 정보 입력 후 **등록** 버튼 클릭\n2. 등록 성공 시 사례 목록에 새 사례가 추가됩니다\n\n### 사례 목록 관리\n\n#### 검색 기능\n- **검색창 사용**: 사례 번호, 약물명, 환자 정보로 검색 가능\n- **실시간 검색**: 입력과 동시에 결과 필터링\n\n#### 상태별 필터링\n드롭다운 메뉴에서 상태 선택:\n- **전체**: 모든 사례 표시\n- **제출됨**: 새로 등록된 사례\n- **검토중**: 검토자가 처리 중인 사례\n- **완료됨**: 처리 완료된 사례\n- **보관됨**: 소프트 삭제된 사례 (관리자만)\n\n#### 사례 카드 정보\n각 사례 카드에는 다음 정보가 표시됩니다:\n- **사례 번호**: 고유 식별자\n- **위험도 배지**: \n  - 🔴 High (높음)\n  - 🟡 Medium (보통)  \n  - 🟢 Low (낮음)\n- **의심 의약품**: 부작용 원인 의약품\n- **환자 정보**: 나이/성별\n- **등록일**: 사례 제출일\n- **현재 상태**: 처리 진행 상황\n\n### 사례 상세 보기 및 처리\n\n#### 상세 보기\n1. 사례 카드에서 **상세보기** 버튼 클릭\n2. 사례 상세 정보 화면으로 이동\n3. 다음 정보 확인 가능:\n   - 완전한 환자 정보\n   - 상세한 부작용 기술\n   - 의약품 복용 이력\n   - 처리 로그 및 코멘트\n\n#### 사례 처리 (검토자/관리자)\n1. **처리** 버튼 클릭\n2. 사례 상태 변경:\n   - 검토중으로 변경\n   - 추가 정보 요청\n   - 완료 처리\n3. 처리 코멘트 작성\n4. 변경사항 저장\n\n---\n\n## 🤖 AI 분석 기능\n\nAI 분석은 GPT-5를 활용하여 부작용 사례를 전문적으로 분석하는 고급 기능입니다.\n\n### AI 분석 권한\n- **실행 가능**: 검토자(REVIEWER), 관리자(ADMIN)\n- **결과 조회**: 모든 사용자 (본인 사례에 한함)\n\n### AI 분석 실행 방법\n\n#### 1단계: 분석 대상 선택\n1. 부작용 사례 목록에서 분석할 사례 선택\n2. 사례 상세 페이지로 이동\n\n#### 2단계: AI 분석 시작\n1. **AI 분석 실행** 버튼 클릭 (검토자/관리자만 표시)\n2. 분석 시작 확인 메시지 표시\n3. 분석 진행 상태 표시 (약 50초 소요)\n\n⚠️ **주의사항**: AI 분석은 시간이 다소 걸리므로 페이지를 닫지 마세요.\n\n### AI 분석 결과 해석\n\n#### 위험도 평가 (Severity Assessment)\n- **위험도 등급**: High / Medium / Low\n- **신뢰도**: AI가 판단한 확신 정도 (0-100%)\n- **의학적 근거**: 판단 근거에 대한 전문적 설명\n- **위험 요소**: 식별된 주요 리스크 팩터\n\n#### 권장사항 (Recommendations)\n분석 결과는 4개 카테고리로 제공됩니다:\n\n**1. 즉시 조치 (Immediate Actions)**\n- 응급상황 확인 지침\n- 즉시 취해야 할 의료적 조치\n- 의약품 중단/변경 권고\n\n**2. 후속 조치 (Follow-up Required)**  \n- 추가 검사 권장사항\n- 모니터링 계획\n- 전문의 의뢰 필요성\n\n**3. 규제 보고 (Regulatory Notifications)**\n- MFDS/KAERS 신고 필요성\n- 보고 기한 및 절차 안내\n- MedDRA 코딩 권장사항\n\n**4. 추가 데이터 필요 (Additional Data Needed)**\n- 부족한 정보 목록\n- 수집해야 할 추가 자료\n- 환자 면담 필요 사항\n\n#### 처리 시간 및 전체 신뢰도\n- **처리 시간**: 분석 소요 시간 (통상 45-55초)\n- **전체 신뢰도**: 분석 결과의 종합적 신뢰도\n- **모델 정보**: 사용된 AI 모델 버전 (GPT-5)\n\n### AI 분석 결과 활용\n\n#### 의료진 참고용\n- AI 분석은 **참고용**이며, 최종 판단은 의료진이 내려야 합니다\n- 분석 결과를 바탕으로 환자 상담 및 치료 계획 수립\n- 필요시 전문의 의견 추가 수렴\n\n#### 규제 보고용\n- AI가 제안한 규제 보고 가이드라인 활용\n- 보고서 작성 시 AI 분석 결과 첨부 가능\n- 보고 기한 준수를 위한 알림 설정\n\n---\n\n## 👥 사용자 관리 (관리자용)\n\n사용자 관리는 **관리자(ADMIN)** 권한을 가진 사용자만 접근할 수 있습니다.\n\n### 사용자 관리 화면 접근\n1. 좌측 메뉴에서 **사용자 관리** 클릭\n2. 사용자 관리 메인 화면으로 이동\n\n### 새 사용자 생성\n\n#### 1단계: 생성 시작\n1. **새 사용자 생성** 버튼 클릭\n2. 사용자 생성 팝업창이 열립니다\n\n#### 2단계: 기본 정보 입력\n- **이름**: 사용자의 실명 입력 (예: 홍길동)\n- **이메일**: 고유한 이메일 주소 (로그인 ID로 사용)\n- **조직**: 소속 기관명 (예: 종합병원, 한국의약품안전청)\n\n#### 3단계: 권한 설정\n역할 선택 (중요):\n- **ADMIN**: 시스템 전체 관리 권한\n- **REVIEWER**: 사례 검토 및 AI 분석 권한  \n- **USER**: 기본 사례 등록 권한\n\n#### 4단계: 비밀번호 설정\n- **초기 비밀번호**: 8자리 이상, 영문/숫자/특수문자 조합\n- 사용자에게 초기 비밀번호 안전하게 전달\n- 첫 로그인 시 비밀번호 변경 안내\n\n### 기존 사용자 관리\n\n#### 사용자 검색\n- **검색창**: 이름, 이메일, 조직으로 검색\n- **역할별 필터**: 드롭다운에서 특정 역할 선택하여 필터링\n\n#### 사용자 정보 수정\n1. 수정할 사용자 카드에서 **편집** 버튼 클릭\n2. 사용자 정보 수정 팝업창에서 내용 변경\n3. **저장** 버튼으로 변경사항 적용\n\n⚠️ **주의**: 이메일 변경 시 로그인 정보가 바뀝니다.\n\n#### 사용자 상태 관리\n각 사용자 카드에서 다음 작업 수행 가능:\n\n**활성화/비활성화**\n- 토글 스위치로 사용자 계정 활성화 상태 변경\n- 비활성화된 사용자는 로그인 불가\n\n**사용자 삭제**\n- **삭제** 버튼으로 사용자 계정 완전 제거\n- ⚠️ **경고**: 삭제된 계정은 복구 불가능\n\n### 사용자 활동 모니터링\n사용자 카드에서 확인 가능한 정보:\n- **마지막 로그인**: 최근 접속 시간\n- **등록일**: 계정 생성일\n- **처리 사례 수**: 해당 사용자가 처리한 사례 수\n- **현재 상태**: 활성화/비활성화 상태\n\n---\n\n## 📊 감사 로그 확인\n\n감사 로그는 시스템의 모든 중요한 활동을 기록하여 규제 준수를 보장합니다.\n\n### 감사 로그 접근\n1. 좌측 메뉴에서 **감사 로그** 클릭 (관리자만 접근 가능)\n2. 감사 로그 목록 화면으로 이동\n\n### 로그 정보 이해하기\n\n#### 기본 로그 정보\n각 감사 로그 엔트리에는 다음 정보가 포함됩니다:\n- **타임스탬프**: 활동 발생 정확한 시간\n- **사용자**: 활동을 수행한 사용자 정보\n- **액션**: 수행된 구체적 활동\n- **리소스**: 영향을 받은 시스템 자원\n- **IP 주소**: 접속 위치 정보\n- **심각도**: 활동의 중요도 수준\n\n#### 액션 유형\n주요 감사 대상 활동:\n- **로그인/로그아웃**: 사용자 인증 활동\n- **사례 생성/수정/삭제**: 부작용 사례 관리\n- **AI 분석 실행**: AI 분석 요청 및 결과\n- **사용자 관리**: 계정 생성/수정/삭제\n- **권한 변경**: 사용자 역할 변경\n- **시스템 설정**: 중요 설정 변경\n\n#### 심각도 수준\n- **LOW**: 일반적인 조회 활동\n- **MEDIUM**: 데이터 수정 활동\n- **HIGH**: 삭제, 권한 변경 등 중요한 활동\n\n### 로그 필터링 및 검색\n\n#### 사용자별 필터링\n1. **사용자 필터** 드롭다운 선택\n2. 특정 사용자의 활동만 조회\n3. 의심스러운 활동 패턴 분석\n\n#### 심각도별 필터링\n1. **심각도 필터** 드롭다운 선택\n2. HIGH 레벨 활동 우선 검토\n3. 보안 이슈 사전 탐지\n\n#### 날짜 범위 설정\n- 특정 기간의 로그만 조회\n- 사건 발생 전후 활동 분석\n- 정기적인 규제 보고 준비\n\n### 규제 준수 활용\n- **MFDS 보고**: 요구 시 감사 로그 제출\n- **내부 감사**: 정기적인 시스템 점검\n- **보안 검토**: 비정상적 접근 탐지\n- **규정 준수 증명**: 규제 당국 대응\n\n---\n\n## 🔧 시스템 모니터링\n\n시스템 모니터링은 약물감시 시스템의 전반적인 건강 상태를 확인하는 관리자 전용 기능입니다.\n\n### 모니터링 화면 접근\n1. 좌측 메뉴에서 **시스템 모니터링** 클릭 (관리자만 접근)\n2. 모니터링 대시보드로 이동\n\n### 핵심 성능 지표\n\n#### 시스템 상태\n- **전체 상태**: 정상/주의/경고 상태 표시\n- **가동률**: 시스템 운영 시간 비율 (목표: 99.9%)\n- **응답 시간**: 평균 API 응답 속도 (목표: 200ms 이하)\n\n#### 사용자 활동\n- **활성 사용자**: 현재 접속 중인 사용자 수\n- **일일 로그인**: 오늘 로그인한 사용자 수\n- **세션 지속 시간**: 평균 사용 시간\n\n#### 리소스 사용량\n실시간 시스템 리소스 모니터링:\n- **CPU 사용률**: 프로세서 부하 상태\n- **메모리 사용률**: RAM 사용 현황  \n- **디스크 용량**: 저장 공간 사용량\n- **네트워크 트래픽**: 데이터 전송량\n\n### 서비스 상태 점검\n\n#### 핵심 서비스 모니터링\n각 서비스의 상태를 실시간 확인:\n\n**데이터베이스 서비스**\n- 연결 상태: 정상/오류\n- 쿼리 성능: 평균 응답 시간\n- 연결 수: 현재 DB 연결 수\n\n**AI 분석 서비스**\n- OpenAI API 상태: 정상/오류\n- 분석 대기열: 처리 대기 중인 요청 수\n- 평균 처리 시간: AI 분석 소요 시간\n\n**인증 서비스**\n- 로그인 성공률: 성공/실패 비율\n- 세션 관리: 활성 세션 수\n- 보안 이벤트: 비정상 접근 시도\n\n#### 성능 그래프\n시간대별 시스템 성능 추이:\n- **응답 시간 그래프**: 24시간 추이\n- **사용자 활동 그래프**: 시간대별 접속 패턴\n- **에러 발생 추이**: 오류 발생 빈도\n\n### 알림 및 경고\n\n#### 자동 알림 조건\n다음 상황 발생 시 자동 알림:\n- CPU/메모리 사용률 80% 초과\n- 응답 시간 1초 초과 지속\n- 데이터베이스 연결 오류\n- AI 분석 서비스 중단\n\n#### 알림 확인 방법\n1. **새로고침** 버튼으로 최신 상태 확인\n2. 경고 발생 시 빨간색 상태 표시\n3. 상세 로그에서 문제 원인 분석\n\n### 유지보수 가이드\n\n#### 정기 점검 항목\n**일일 점검**\n- 시스템 전체 상태 확인\n- 활성 사용자 수 모니터링\n- 오류 로그 검토\n\n**주간 점검**\n- 성능 그래프 추이 분석\n- 디스크 용량 정리 필요성 검토\n- 백업 상태 확인\n\n**월간 점검**\n- 시스템 성능 종합 분석\n- 사용량 증가 추이 검토\n- 인프라 확장 필요성 검토\n\n---\n\n## ❓ 문제해결 가이드\n\n### 일반적인 문제 및 해결방법\n\n#### 로그인 관련 문제\n\n**문제**: 로그인이 되지 않습니다.\n**해결방법**:\n1. 이메일 주소와 비밀번호가 정확한지 확인\n2. Caps Lock 상태 확인\n3. 브라우저 쿠키 및 캐시 삭제 후 재시도\n4. 계정이 비활성화되었을 가능성 - 관리자에게 문의\n\n**문제**: 비밀번호를 잊어버렸습니다.\n**해결방법**:\n1. 현재 시스템에서는 관리자를 통한 비밀번호 재설정 필요\n2. 관리자에게 연락하여 임시 비밀번호 발급 요청\n\n#### 사례 등록 관련 문제\n\n**문제**: 사례 등록 시 오류가 발생합니다.\n**해결방법**:\n1. 모든 필수 필드가 입력되었는지 확인\n2. 특수문자 사용 시 문제될 수 있음 - 일반 텍스트로 입력\n3. 브라우저 새로고침 후 재시도\n4. 지속적 문제 발생 시 관리자에게 문의\n\n**문제**: 등록한 사례가 목록에 표시되지 않습니다.\n**해결방법**:\n1. 페이지 새로고침 (F5)\n2. 검색 필터가 적용되어 있는지 확인\n3. 상태 필터를 \"전체\"로 설정\n4. 다른 브라우저로 재접속 시도\n\n#### AI 분석 관련 문제\n\n**문제**: AI 분석이 시작되지 않습니다.\n**해결방법**:\n1. 사용자 권한 확인 (검토자/관리자만 가능)\n2. 인터넷 연결 상태 확인\n3. 이미 분석 중인 다른 사례가 있는지 확인\n4. 시간을 두고 재시도\n\n**문제**: AI 분석이 너무 오래 걸립니다.\n**해결방법**:\n1. 정상 처리 시간: 45-60초\n2. 90초 이상 걸릴 경우 페이지 새로고침\n3. 네트워크 상태 확인\n4. 관리자에게 서비스 상태 문의\n\n#### 성능 관련 문제\n\n**문제**: 시스템이 느리게 작동합니다.\n**해결방법**:\n1. 브라우저 캐시 및 임시파일 삭제\n2. 다른 탭/프로그램 종료하여 메모리 확보\n3. 안정적인 네트워크 환경에서 접속\n4. 최신 브라우저 버전 사용\n\n**문제**: 데이터가 로딩되지 않습니다.\n**해결방법**:\n1. 페이지 새로고침 (F5 또는 Ctrl+F5)\n2. 브라우저 개발자도구에서 오류 메시지 확인\n3. 다른 브라우저로 접속 시도\n4. 관리자에게 서버 상태 문의\n\n### 브라우저 권장사항\n\n#### 지원 브라우저\n- **Chrome**: 버전 90 이상 (권장)\n- **Firefox**: 버전 88 이상\n- **Safari**: 버전 14 이상\n- **Edge**: 버전 90 이상\n\n#### 브라우저 설정\n- JavaScript 활성화 필요\n- 쿠키 허용 설정\n- 팝업 차단 해제 (팝업창 사용 시)\n\n### 보안 관련 주의사항\n\n#### 계정 보안\n- 비밀번호는 정기적으로 변경\n- 타인과 계정 정보 공유 금지\n- 공용 컴퓨터 사용 시 로그아웃 필수\n\n#### 데이터 보안\n- 환자 정보는 업무 목적으로만 사용\n- 화면 캡처 시 개인정보 노출 주의\n- 중요 데이터 출력 시 보안 관리\n\n### 기술 지원\n\n#### 문의 채널\n**일반 사용 문의**\n- 각 기관의 시스템 담당자에게 1차 문의\n- 교육 및 사용법 안내\n\n**기술적 문제**\n- 시스템 관리자에게 직접 문의\n- 오류 메시지 및 화면 캡처 첨부\n\n**긴급 상황**\n- 시스템 중단 또는 중대한 보안 이슈\n- 관리자 직통 연락망 이용\n\n#### 문의 시 포함할 정보\n1. 문제 발생 시간\n2. 사용자 계정 정보 (이메일)\n3. 사용 브라우저 및 운영체제\n4. 오류 메시지 전문\n5. 문제 발생 전 수행한 작업\n\n---\n\n## 📞 고객 지원\n\n### 교육 및 훈련\n- 신규 사용자 교육 프로그램\n- 정기적인 업데이트 교육\n- 모범 사례 공유\n\n### 시스템 업데이트\n- 정기적인 기능 개선\n- 보안 패치 적용\n- 사용자 피드백 반영\n\n---\n\n**이 매뉴얼에 대한 문의나 개선 제안이 있으시면 시스템 관리자에게 연락해주시기 바랍니다.**\n\n*최종 업데이트: 2025년 9월 12일*","size_bytes":19831},"create-admin.md":{"content":"# 프로덕션 환경 관리자 계정 생성 가이드\n\n## 보안 경고 ⚠️\n프로덕션 환경에서는 보안상의 이유로 자동으로 기본 계정이 생성되지 않습니다.\n\n## 프로덕션에서 첫 관리자 계정 생성하기\n\n### 방법 1: 데이터베이스 직접 접근\n1. Replit Database 패널에서 프로덕션 데이터베이스에 접속\n2. 다음 SQL을 실행하여 관리자 계정 생성:\n\n```sql\nINSERT INTO users (id, email, name, password, role, organization, \"isActive\", \"createdAt\")\nVALUES (\n  gen_random_uuid(),\n  'your-admin@company.com',\n  '관리자 이름',\n  '$2b$10$YourHashedPasswordHere',  -- bcrypt로 해시된 비밀번호\n  'ADMIN',\n  '귀하의 조직명',\n  true,\n  NOW()\n);\n```\n\n### 방법 2: 개발환경에서 계정 생성 후 백업/복원\n1. 개발환경에서 관리자 계정 생성\n2. 해당 사용자 데이터를 프로덕션으로 이전\n\n### 비밀번호 해시 생성하기\nNode.js에서 bcrypt를 사용하여 비밀번호 해시 생성:\n\n```javascript\nconst bcrypt = require('bcrypt');\nconst password = 'your-secure-password';\nconst hashedPassword = await bcrypt.hash(password, 10);\nconsole.log(hashedPassword);\n```\n\n## 보안 권장사항\n- 강력한 비밀번호 사용 (최소 12자, 대소문자/숫자/특수문자 포함)\n- 첫 로그인 후 즉시 비밀번호 변경\n- 불필요한 기본 계정들은 생성하지 않기\n- 정기적인 비밀번호 변경\n\n## 추가 사용자 생성\n관리자로 로그인한 후 시스템 내의 \"사용자 관리\" 기능을 통해 안전하게 추가 사용자를 생성할 수 있습니다.","size_bytes":1607},"replit.md":{"content":"# Drug Surveillance System\n\n## Overview\n\nThe Drug Surveillance System is a comprehensive pharmacovigilance platform designed for healthcare organizations and regulatory agencies to collect, analyze, and manage adverse drug reaction reports. The system leverages AI-powered analysis using GPT-5 to provide automated severity assessments and recommendations for drug safety cases. It supports role-based access control with three user levels (USER, REVIEWER, ADMIN) and maintains regulatory compliance through comprehensive audit logging and case management workflows.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom design system following Material Design principles\n- **State Management**: TanStack React Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme System**: Light/dark mode support with system preference detection\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Session Management**: PostgreSQL-backed sessions with express-session\n- **Security**: Helmet.js for security headers, CSRF protection, rate limiting\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **API Design**: RESTful endpoints with role-based middleware protection\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Key Tables**: Users, Cases, AI Predictions, Audit Logs, AI Models\n- **Data Integrity**: Foreign key constraints, enum types for status fields\n- **Audit Trail**: Comprehensive logging of all user actions and system events\n\n### AI Integration\n- **Model**: OpenAI GPT-5 (latest model as of August 2025)\n- **Capabilities**: Automated severity assessment, risk factor identification, regulatory recommendations\n- **Analysis Pipeline**: Structured prompts for pharmacovigilance case evaluation\n- **Performance Tracking**: Response time monitoring and accuracy metrics\n\n### Security & Compliance\n- **Authentication**: Session-based with secure cookie configuration\n- **Authorization**: Role-based access control (USER/REVIEWER/ADMIN)\n- **Data Protection**: Input validation, SQL injection prevention, XSS protection\n- **Audit Logging**: Immutable audit trail for regulatory compliance\n- **CSRF Protection**: Token-based CSRF prevention\n- **Rate Limiting**: API endpoint protection against abuse\n\n### Development & Deployment\n- **Build System**: Vite for development and production builds\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Code Quality**: ESLint configuration for consistent code standards\n- **Hot Reload**: Development server with HMR support\n- **Asset Management**: Optimized bundling and code splitting\n\n## External Dependencies\n\n### Core Services\n- **OpenAI API**: GPT-5 model for AI-powered case analysis and severity assessment\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **Replit Infrastructure**: Development and hosting environment\n\n### Third-Party Libraries\n- **UI Framework**: React 18 with Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n- **Database**: Drizzle ORM with Neon serverless PostgreSQL adapter\n- **Authentication**: bcrypt for password hashing, express-session for session management\n- **Security**: Helmet.js, rate limiting middleware, CSRF protection\n- **Data Fetching**: TanStack React Query for server state management\n- **Validation**: Zod schema validation for type-safe data handling\n\n### Development Tools\n- **Build Tool**: Vite with TypeScript and React plugins\n- **Code Quality**: ESLint for linting, Prettier for formatting\n- **Type Checking**: TypeScript compiler with strict mode enabled\n- **Package Management**: npm with lock file for dependency versioning\n\n### Fonts & Assets\n- **Typography**: Google Fonts (Inter, JetBrains Mono) for consistent typography\n- **Icons**: Lucide React for consistent iconography\n- **Images**: Local asset management through Vite's asset pipeline","size_bytes":4435},"client/src/components/CaseDetails.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, FileText, Calendar, User, Pill, AlertTriangle, Brain } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface CaseDetails {\n  id: string;\n  patientAge: number;\n  patientGender: string;\n  drugName: string;\n  drugDosage: string;\n  adverseReaction: string;\n  dateReported: string;\n  severity: string;\n  outcome: string;\n  reporterId: string;\n  aiPrediction?: {\n    severity: string;\n    confidence: number;\n    recommendations: string[];\n  };\n  isDeleted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function CaseDetails() {\n  const { id } = useParams<{ id: string }>();\n\n  const { data: caseData, isLoading, error } = useQuery<CaseDetails>({\n    queryKey: [\"/api\", \"cases\", id],\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"case-details-loading\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"h-10 w-20 bg-muted animate-pulse rounded\" />\n          <div className=\"h-8 w-48 bg-muted animate-pulse rounded\" />\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <div className=\"h-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\" />\n                  <div className=\"h-4 bg-muted animate-pulse rounded w-3/4\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !caseData) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"case-details-error\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/cases\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-cases\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              목록으로\n            </Button>\n          </Link>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h2 className=\"text-lg font-semibold mb-2\">사례를 찾을 수 없습니다</h2>\n              <p className=\"text-muted-foreground\">요청하신 사례가 존재하지 않거나 접근 권한이 없습니다.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'high':\n      case 'critical':\n        return 'destructive';\n      case 'medium':\n      case 'moderate':\n        return 'default';\n      case 'low':\n      case 'mild':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"case-details-main\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/cases\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-cases\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              목록으로\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">사례 상세정보</h1>\n            <p className=\"text-muted-foreground\">사례 ID: {caseData.id}</p>\n          </div>\n        </div>\n        <Badge variant={getSeverityColor(caseData.severity)} data-testid=\"badge-severity\">\n          {caseData.severity}\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {/* 환자 정보 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              환자 정보\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">연령</label>\n              <p className=\"text-sm\" data-testid=\"text-patient-age\">{caseData.patientAge}세</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">성별</label>\n              <p className=\"text-sm\" data-testid=\"text-patient-gender\">{caseData.patientGender}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 약물 정보 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Pill className=\"h-5 w-5\" />\n              약물 정보\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">약물명</label>\n              <p className=\"text-sm font-medium\" data-testid=\"text-drug-name\">{caseData.drugName}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">용량</label>\n              <p className=\"text-sm\" data-testid=\"text-dosage\">{caseData.drugDosage}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">부작용 반응</label>\n              <p className=\"text-sm\" data-testid=\"text-adverse-reaction\">{caseData.adverseReaction}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 시간 정보 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              시간 정보\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">보고일</label>\n              <p className=\"text-sm\" data-testid=\"text-date-reported\">{new Date(caseData.dateReported).toLocaleDateString('ko-KR')}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">보고일</label>\n              <p className=\"text-sm\" data-testid=\"text-created-date\">{new Date(caseData.createdAt).toLocaleDateString('ko-KR')}</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 부작용 정보 */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            부작용 정보\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-muted-foreground\">의심 부작용</label>\n            <p className=\"text-sm mt-1\" data-testid=\"text-suspected-reaction\">{caseData.adverseReaction}</p>\n          </div>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">중증도</label>\n              <div className=\"mt-1\">\n                <Badge variant={getSeverityColor(caseData.severity)} data-testid=\"badge-severity-detail\">\n                  {caseData.severity}\n                </Badge>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">결과</label>\n              <p className=\"text-sm\" data-testid=\"text-outcome\">{caseData.outcome}</p>\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-muted-foreground\">보고자 ID</label>\n            <p className=\"text-sm\" data-testid=\"text-reporter-id\">{caseData.reporterId}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI 분석 결과 */}\n      {caseData.aiPrediction && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5 text-blue-500\" />\n              AI 분석 결과\n            </CardTitle>\n            <CardDescription>AI 모델의 분석 결과 및 권장사항</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">AI 예측 중증도</label>\n                <div className=\"mt-1\">\n                  <Badge variant={getSeverityColor(caseData.aiPrediction.severity)} data-testid=\"badge-ai-severity\">\n                    {caseData.aiPrediction.severity}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">신뢰도</label>\n                <p className=\"text-sm\" data-testid=\"text-ai-confidence\">{caseData.aiPrediction.confidence}%</p>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">AI 권장사항</label>\n              <ul className=\"mt-1 space-y-1\" data-testid=\"list-ai-recommendations\">\n                {caseData.aiPrediction.recommendations.map((recommendation, index) => (\n                  <li key={index} className=\"text-sm text-muted-foreground\">• {recommendation}</li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":9843},"client/src/components/CriticalCases.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Clock, User, Pill, ChevronRight } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\ninterface CriticalCase {\n  id: string;\n  patientAge: number;\n  patientGender: string;\n  drugName: string;\n  suspectedReaction: string;\n  severity: string;\n  outcome: string;\n  reporterType: string;\n  aiPrediction?: {\n    severity: string;\n    confidence: number;\n  };\n  createdAt: string;\n  daysSinceReport: number;\n}\n\nexport function CriticalCases() {\n  const { data: criticalCases, isLoading, error } = useQuery<CriticalCase[]>({\n    queryKey: [\"/api\", \"cases\", \"critical\"],\n    staleTime: 30000, // 30초 캐시\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"critical-cases-loading\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">긴급 사례</h1>\n          <p className=\"text-muted-foreground\">즉시 처리가 필요한 중요 사례</p>\n        </div>\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <div className=\"h-4 bg-muted animate-pulse rounded w-3/4\" />\n                <div className=\"h-3 bg-muted animate-pulse rounded w-1/2\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted animate-pulse rounded\" />\n                  <div className=\"h-4 bg-muted animate-pulse rounded w-2/3\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"critical-cases-error\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">긴급 사례</h1>\n          <p className=\"text-muted-foreground\">즉시 처리가 필요한 중요 사례</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h2 className=\"text-lg font-semibold mb-2\">데이터를 불러올 수 없습니다</h2>\n              <p className=\"text-muted-foreground\">네트워크 연결을 확인하고 다시 시도해주세요.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'high':\n      case 'critical':\n        return 'destructive';\n      case 'medium':\n      case 'moderate':\n        return 'default';\n      case 'low':\n      case 'mild':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getPriorityLevel = (daysSinceReport: number, severity: string) => {\n    if (severity.toLowerCase() === 'critical' || severity.toLowerCase() === 'high') {\n      if (daysSinceReport >= 7) return 'urgent';\n      if (daysSinceReport >= 3) return 'high';\n      return 'medium';\n    }\n    return 'low';\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return <Badge variant=\"destructive\">매우 긴급</Badge>;\n      case 'high':\n        return <Badge variant=\"destructive\">긴급</Badge>;\n      case 'medium':\n        return <Badge variant=\"default\">중요</Badge>;\n      default:\n        return <Badge variant=\"secondary\">일반</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"critical-cases-main\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">긴급 사례</h1>\n          <p className=\"text-muted-foreground\">즉시 처리가 필요한 중요 사례</p>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          총 {criticalCases?.length || 0}건의 긴급 사례\n        </div>\n      </div>\n\n      {/* Summary Alert */}\n      {criticalCases && criticalCases.length > 0 && (\n        <Card className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-3\">\n              <AlertTriangle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n              <div>\n                <p className=\"text-red-700 dark:text-red-300 font-medium\">\n                  {criticalCases.length}건의 긴급 처리가 필요한 사례가 있습니다.\n                </p>\n                <p className=\"text-red-600 dark:text-red-400 text-sm mt-1\">\n                  이 사례들은 즉시 검토하고 조치가 필요합니다.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Critical Cases List */}\n      <div className=\"space-y-4\">\n        {criticalCases && criticalCases.length > 0 ? (\n          criticalCases.map((criticalCase) => {\n            const priority = getPriorityLevel(criticalCase.daysSinceReport, criticalCase.severity);\n            return (\n              <Card key={criticalCase.id} className=\"hover-elevate\" data-testid={`critical-case-${criticalCase.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <CardTitle className=\"text-lg\">사례 ID: {criticalCase.id}</CardTitle>\n                      {getPriorityBadge(priority)}\n                      <Badge variant={getSeverityColor(criticalCase.severity)}>\n                        {criticalCase.severity}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Clock className=\"h-4 w-4\" />\n                      {criticalCase.daysSinceReport}일 전 보고\n                    </div>\n                  </div>\n                  <CardDescription>\n                    긴급 처리가 필요한 부작용 사례\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    {/* 환자 정보 */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-sm font-medium\">\n                        <User className=\"h-4 w-4\" />\n                        환자 정보\n                      </div>\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <p data-testid={`patient-info-${criticalCase.id}`}>\n                          {criticalCase.patientAge}세, {criticalCase.patientGender}\n                        </p>\n                        <p>보고자: {criticalCase.reporterType}</p>\n                      </div>\n                    </div>\n\n                    {/* 약물 정보 */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-sm font-medium\">\n                        <Pill className=\"h-4 w-4\" />\n                        약물 정보\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <p className=\"font-medium\" data-testid={`drug-name-${criticalCase.id}`}>\n                          {criticalCase.drugName}\n                        </p>\n                        <p data-testid={`reaction-${criticalCase.id}`}>\n                          부작용: {criticalCase.suspectedReaction}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* AI 분석 & 결과 */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-sm font-medium\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        분석 결과\n                      </div>\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <p data-testid={`outcome-${criticalCase.id}`}>결과: {criticalCase.outcome}</p>\n                        {criticalCase.aiPrediction && (\n                          <p data-testid={`ai-analysis-${criticalCase.id}`}>\n                            AI 분석: {criticalCase.aiPrediction.severity} ({criticalCase.aiPrediction.confidence}% 신뢰도)\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mt-4 pt-4 border-t\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      보고일: {new Date(criticalCase.createdAt).toLocaleDateString('ko-KR')}\n                    </div>\n                    <Link href={`/cases/${criticalCase.id}`}>\n                      <Button size=\"sm\" data-testid={`button-view-critical-${criticalCase.id}`}>\n                        상세보기\n                        <ChevronRight className=\"h-4 w-4 ml-1\" />\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        ) : (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <AlertTriangle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                <h2 className=\"text-lg font-semibold mb-2\">긴급 사례가 없습니다</h2>\n                <p className=\"text-muted-foreground\">현재 긴급 처리가 필요한 사례가 없습니다.</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10135},"build-for-publish.sh":{"content":"#!/bin/bash\n\n# Publishing을 위한 빌드 스크립트\necho \"Building for publishing...\"\n\n# 1. 기존 빌드 실행\nnpm run build\n\n# 2. dist/public의 내용을 dist로 복사 (index.html이 dist 루트에 위치하도록)\nif [ -d \"dist/public\" ]; then\n    echo \"Moving files from dist/public to dist...\"\n    cp -r dist/public/* dist/\n    rm -rf dist/public\n    echo \"Files moved successfully!\"\n    echo \"index.html is now located at: dist/index.html\"\nelse\n    echo \"Warning: dist/public directory not found\"\nfi\n\necho \"Build for publishing completed!\"","size_bytes":552}},"version":1}